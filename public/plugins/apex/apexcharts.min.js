/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLGlFQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./resources/plugins/apex/apexcharts.min.js":
/*!**************************************************!*\
  !*** ./resources/plugins/apex/apexcharts.min.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(setImmediate) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\r\n * ApexCharts v3.6.12\r\n * (c) 2018-2019 Juned Chhipa\r\n * Released under the MIT License.\r\n */\n!function (t, e) {\n  \"object\" == ( false ? undefined : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(this, function () {\n  \"use strict\";\n\n  function t(e) {\n    return (t = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n      return _typeof(t);\n    } : function (t) {\n      return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n    })(e);\n  }\n\n  function e(t, e) {\n    if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function i(t, e) {\n    for (var i = 0; i < e.length; i++) {\n      var s = e[i];\n      s.enumerable = s.enumerable || !1, s.configurable = !0, \"value\" in s && (s.writable = !0), Object.defineProperty(t, s.key, s);\n    }\n  }\n\n  function s(t, e, s) {\n    return e && i(t.prototype, e), s && i(t, s), t;\n  }\n\n  function a(t, e, i) {\n    return e in t ? Object.defineProperty(t, e, {\n      value: i,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = i, t;\n  }\n\n  function n(t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var i = null != arguments[e] ? arguments[e] : {},\n          s = Object.keys(i);\n      \"function\" == typeof Object.getOwnPropertySymbols && (s = s.concat(Object.getOwnPropertySymbols(i).filter(function (t) {\n        return Object.getOwnPropertyDescriptor(i, t).enumerable;\n      }))), s.forEach(function (e) {\n        a(t, e, i[e]);\n      });\n    }\n\n    return t;\n  }\n\n  function r(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), e && l(t, e);\n  }\n\n  function o(t) {\n    return (o = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    })(t);\n  }\n\n  function l(t, e) {\n    return (l = Object.setPrototypeOf || function (t, e) {\n      return t.__proto__ = e, t;\n    })(t, e);\n  }\n\n  function h(t, e) {\n    return !e || \"object\" != _typeof(e) && \"function\" != typeof e ? function (t) {\n      if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      return t;\n    }(t) : e;\n  }\n\n  function c(t) {\n    return function (t) {\n      if (Array.isArray(t)) {\n        for (var e = 0, i = new Array(t.length); e < t.length; e++) {\n          i[e] = t[e];\n        }\n\n        return i;\n      }\n    }(t) || function (t) {\n      if (Symbol.iterator in Object(t) || \"[object Arguments]\" === Object.prototype.toString.call(t)) return Array.from(t);\n    }(t) || function () {\n      throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n    }();\n  }\n\n  var d = function () {\n    function i() {\n      e(this, i);\n    }\n\n    return s(i, [{\n      key: \"shadeRGBColor\",\n      value: function value(t, e) {\n        var i = e.split(\",\"),\n            s = t < 0 ? 0 : 255,\n            a = t < 0 ? -1 * t : t,\n            n = parseInt(i[0].slice(4)),\n            r = parseInt(i[1]),\n            o = parseInt(i[2]);\n        return \"rgb(\" + (Math.round((s - n) * a) + n) + \",\" + (Math.round((s - r) * a) + r) + \",\" + (Math.round((s - o) * a) + o) + \")\";\n      }\n    }, {\n      key: \"shadeHexColor\",\n      value: function value(t, e) {\n        var i = parseInt(e.slice(1), 16),\n            s = t < 0 ? 0 : 255,\n            a = t < 0 ? -1 * t : t,\n            n = i >> 16,\n            r = i >> 8 & 255,\n            o = 255 & i;\n        return \"#\" + (16777216 + 65536 * (Math.round((s - n) * a) + n) + 256 * (Math.round((s - r) * a) + r) + (Math.round((s - o) * a) + o)).toString(16).slice(1);\n      }\n    }, {\n      key: \"shadeColor\",\n      value: function value(t, e) {\n        return e.length > 7 ? this.shadeRGBColor(t, e) : this.shadeHexColor(t, e);\n      }\n    }], [{\n      key: \"bind\",\n      value: function value(t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      }\n    }, {\n      key: \"isObject\",\n      value: function value(e) {\n        return e && \"object\" === t(e) && !Array.isArray(e) && null != e;\n      }\n    }, {\n      key: \"listToArray\",\n      value: function value(t) {\n        var e,\n            i = [];\n\n        for (e = 0; e < t.length; e++) {\n          i[e] = t[e];\n        }\n\n        return i;\n      }\n    }, {\n      key: \"extend\",\n      value: function value(t, e) {\n        var i = this;\n        \"function\" != typeof Object.assign && (Object.assign = function (t) {\n          if (null == t) throw new TypeError(\"Cannot convert undefined or null to object\");\n\n          for (var e = Object(t), i = 1; i < arguments.length; i++) {\n            var s = arguments[i];\n            if (null != s) for (var a in s) {\n              s.hasOwnProperty(a) && (e[a] = s[a]);\n            }\n          }\n\n          return e;\n        });\n        var s = Object.assign({}, t);\n        return this.isObject(t) && this.isObject(e) && Object.keys(e).forEach(function (n) {\n          i.isObject(e[n]) && n in t ? s[n] = i.extend(t[n], e[n]) : Object.assign(s, a({}, n, e[n]));\n        }), s;\n      }\n    }, {\n      key: \"extendArray\",\n      value: function value(t, e) {\n        var s = [];\n        return t.map(function (t) {\n          s.push(i.extend(e, t));\n        }), t = s;\n      }\n    }, {\n      key: \"monthMod\",\n      value: function value(t) {\n        return t % 12;\n      }\n    }, {\n      key: \"addProps\",\n      value: function value(t, e, i) {\n        \"string\" == typeof e && (e = e.split(\".\")), t[e[0]] = t[e[0]] || {};\n        var s = t[e[0]];\n        return e.length > 1 ? (e.shift(), this.addProps(s, e, i)) : t[e[0]] = i, t;\n      }\n    }, {\n      key: \"clone\",\n      value: function value(e) {\n        if (\"[object Array]\" === Object.prototype.toString.call(e)) {\n          for (var i = [], s = 0; s < e.length; s++) {\n            i[s] = this.clone(e[s]);\n          }\n\n          return i;\n        }\n\n        if (\"object\" === t(e)) {\n          var a = {};\n\n          for (var n in e) {\n            e.hasOwnProperty(n) && (a[n] = this.clone(e[n]));\n          }\n\n          return a;\n        }\n\n        return e;\n      }\n    }, {\n      key: \"log10\",\n      value: function value(t) {\n        return Math.log(t) / Math.LN10;\n      }\n    }, {\n      key: \"roundToBase10\",\n      value: function value(t) {\n        return Math.pow(10, Math.floor(Math.log10(t)));\n      }\n    }, {\n      key: \"roundToBase\",\n      value: function value(t, e) {\n        return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));\n      }\n    }, {\n      key: \"parseNumber\",\n      value: function value(t) {\n        return null === t ? t : parseFloat(t);\n      }\n    }, {\n      key: \"noExponents\",\n      value: function value(t) {\n        var e = String(t).split(/[eE]/);\n        if (1 == e.length) return e[0];\n        var i = \"\",\n            s = t < 0 ? \"-\" : \"\",\n            a = e[0].replace(\".\", \"\"),\n            n = Number(e[1]) + 1;\n\n        if (n < 0) {\n          for (i = s + \"0.\"; n++;) {\n            i += \"0\";\n          }\n\n          return i + a.replace(/^\\-/, \"\");\n        }\n\n        for (n -= a.length; n--;) {\n          i += \"0\";\n        }\n\n        return a + i;\n      }\n    }, {\n      key: \"getDimensions\",\n      value: function value(t) {\n        var e = getComputedStyle(t),\n            i = [],\n            s = t.clientHeight,\n            a = t.clientWidth;\n        return s -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom), a -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight), i.push(a), i.push(s), i;\n      }\n    }, {\n      key: \"getBoundingClientRect\",\n      value: function value(t) {\n        var e = t.getBoundingClientRect();\n        return {\n          top: e.top,\n          right: e.right,\n          bottom: e.bottom,\n          left: e.left,\n          width: e.width,\n          height: e.height,\n          x: e.x,\n          y: e.y\n        };\n      }\n    }, {\n      key: \"hexToRgba\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"#999999\",\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;\n        \"#\" !== t.substring(0, 1) && (t = \"#999999\");\n        var i = t.replace(\"#\", \"\");\n        i = i.match(new RegExp(\"(.{\" + i.length / 3 + \"})\", \"g\"));\n\n        for (var s = 0; s < i.length; s++) {\n          i[s] = parseInt(1 === i[s].length ? i[s] + i[s] : i[s], 16);\n        }\n\n        return void 0 !== e && i.push(e), \"rgba(\" + i.join(\",\") + \")\";\n      }\n    }, {\n      key: \"getOpacityFromRGBA\",\n      value: function value(t) {\n        return (t = t.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i))[3];\n      }\n    }, {\n      key: \"rgb2hex\",\n      value: function value(t) {\n        return (t = t.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)) && 4 === t.length ? \"#\" + (\"0\" + parseInt(t[1], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[2], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[3], 10).toString(16)).slice(-2) : \"\";\n      }\n    }, {\n      key: \"isColorHex\",\n      value: function value(t) {\n        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t);\n      }\n    }, {\n      key: \"polarToCartesian\",\n      value: function value(t, e, i, s) {\n        var a = (s - 90) * Math.PI / 180;\n        return {\n          x: t + i * Math.cos(a),\n          y: e + i * Math.sin(a)\n        };\n      }\n    }, {\n      key: \"escapeString\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"x\",\n            i = t.toString().slice();\n        return i = i.replace(/[` ~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, e);\n      }\n    }, {\n      key: \"negToZero\",\n      value: function value(t) {\n        return t < 0 ? 0 : t;\n      }\n    }, {\n      key: \"moveIndexInArray\",\n      value: function value(t, e, i) {\n        if (i >= t.length) for (var s = i - t.length + 1; s--;) {\n          t.push(void 0);\n        }\n        return t.splice(i, 0, t.splice(e, 1)[0]), t;\n      }\n    }, {\n      key: \"extractNumber\",\n      value: function value(t) {\n        return parseFloat(t.replace(/[^\\d\\.]*/g, \"\"));\n      }\n    }, {\n      key: \"randomString\",\n      value: function value(t) {\n        for (var e = \"\", i = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", s = 0; s < t; s++) {\n          e += i.charAt(Math.floor(Math.random() * i.length));\n        }\n\n        return e;\n      }\n    }, {\n      key: \"findAncestor\",\n      value: function value(t, e) {\n        for (; (t = t.parentElement) && !t.classList.contains(e);) {\n          ;\n        }\n\n        return t;\n      }\n    }, {\n      key: \"setELstyles\",\n      value: function value(t, e) {\n        for (var i in e) {\n          e.hasOwnProperty(i) && (t.style.key = e[i]);\n        }\n      }\n    }, {\n      key: \"isNumber\",\n      value: function value(t) {\n        return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10));\n      }\n    }, {\n      key: \"isFloat\",\n      value: function value(t) {\n        return Number(t) === t && t % 1 != 0;\n      }\n    }, {\n      key: \"isSafari\",\n      value: function value() {\n        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n      }\n    }, {\n      key: \"isFirefox\",\n      value: function value() {\n        return navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n      }\n    }, {\n      key: \"isIE11\",\n      value: function value() {\n        if (-1 !== window.navigator.userAgent.indexOf(\"MSIE\") || window.navigator.appVersion.indexOf(\"Trident/\") > -1) return !0;\n      }\n    }, {\n      key: \"isIE\",\n      value: function value() {\n        var t = window.navigator.userAgent,\n            e = t.indexOf(\"MSIE \");\n        if (e > 0) return parseInt(t.substring(e + 5, t.indexOf(\".\", e)), 10);\n\n        if (t.indexOf(\"Trident/\") > 0) {\n          var i = t.indexOf(\"rv:\");\n          return parseInt(t.substring(i + 3, t.indexOf(\".\", i)), 10);\n        }\n\n        var s = t.indexOf(\"Edge/\");\n        return s > 0 && parseInt(t.substring(s + 5, t.indexOf(\".\", s)), 10);\n      }\n    }]), i;\n  }(),\n      u = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"getDefaultFilter\",\n      value: function value(t, e) {\n        var i = this.w;\n        t.unfilter(!0), new window.SVG.Filter().size(\"120%\", \"180%\", \"-5%\", \"-40%\"), \"none\" !== i.config.states.normal.filter ? this.applyFilter(t, e, i.config.states.normal.filter.type, i.config.states.normal.filter.value) : i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);\n      }\n    }, {\n      key: \"addNormalFilter\",\n      value: function value(t, e) {\n        var i = this.w;\n        i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);\n      }\n    }, {\n      key: \"addLightenFilter\",\n      value: function value(t, e, i) {\n        var s = this,\n            a = this.w,\n            n = i.intensity;\n\n        if (!d.isFirefox()) {\n          t.unfilter(!0);\n          var r = new window.SVG.Filter();\n          r.size(\"120%\", \"180%\", \"-5%\", \"-40%\"), t.filter(function (t) {\n            var i = a.config.chart.dropShadow;\n            (r = i.enabled ? s.addShadow(t, e, i) : t).componentTransfer({\n              rgb: {\n                type: \"linear\",\n                slope: 1.5,\n                intercept: n\n              }\n            });\n          }), t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\");\n        }\n      }\n    }, {\n      key: \"addDarkenFilter\",\n      value: function value(t, e, i) {\n        var s = this,\n            a = this.w,\n            n = i.intensity;\n\n        if (!d.isFirefox()) {\n          t.unfilter(!0);\n          var r = new window.SVG.Filter();\n          r.size(\"120%\", \"180%\", \"-5%\", \"-40%\"), t.filter(function (t) {\n            var i = a.config.chart.dropShadow;\n            (r = i.enabled ? s.addShadow(t, e, i) : t).componentTransfer({\n              rgb: {\n                type: \"linear\",\n                slope: n\n              }\n            });\n          }), t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\");\n        }\n      }\n    }, {\n      key: \"applyFilter\",\n      value: function value(t, e, i) {\n        var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5;\n\n        switch (i) {\n          case \"none\":\n            this.addNormalFilter(t, e);\n            break;\n\n          case \"lighten\":\n            this.addLightenFilter(t, e, {\n              intensity: s\n            });\n            break;\n\n          case \"darken\":\n            this.addDarkenFilter(t, e, {\n              intensity: s\n            });\n        }\n      }\n    }, {\n      key: \"addShadow\",\n      value: function value(t, e, i) {\n        var s = i.blur,\n            a = i.top,\n            n = i.left,\n            r = i.color,\n            o = i.opacity,\n            l = t.flood(Array.isArray(r) ? r[e] : r, o).composite(t.sourceAlpha, \"in\").offset(n, a).gaussianBlur(s).merge(t.source);\n        return t.blend(t.source, l);\n      }\n    }, {\n      key: \"dropShadow\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            s = e.top,\n            a = e.left,\n            n = e.blur,\n            r = e.color,\n            o = e.opacity,\n            l = e.noUserSpaceOnUse;\n        return t.unfilter(!0), r = Array.isArray(r) ? r[i] : r, new window.SVG.Filter().size(\"120%\", \"180%\", \"-5%\", \"-40%\"), t.filter(function (t) {\n          var e = null;\n          e = d.isSafari() || d.isFirefox() || d.isIE() ? t.flood(r, o).composite(t.sourceAlpha, \"in\").offset(a, s).gaussianBlur(n) : t.flood(r, o).composite(t.sourceAlpha, \"in\").offset(a, s).gaussianBlur(n).merge(t.source), t.blend(t.source, e);\n        }), l || t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), t;\n      }\n    }, {\n      key: \"setSelectionFilter\",\n      value: function value(t, e, i) {\n        var s = this.w;\n\n        if (void 0 !== s.globals.selectedDataPoints[e] && s.globals.selectedDataPoints[e].indexOf(i) > -1) {\n          t.node.setAttribute(\"selected\", !0);\n          var a = s.config.states.active.filter;\n          \"none\" !== a && this.applyFilter(t, e, a.type, a.value);\n        }\n      }\n    }]), t;\n  }(),\n      g = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.setEasingFunctions();\n    }\n\n    return s(t, [{\n      key: \"setEasingFunctions\",\n      value: function value() {\n        var t;\n\n        switch (this.w.config.chart.animations.easing) {\n          case \"linear\":\n            t = \"-\";\n            break;\n\n          case \"easein\":\n            t = \"<\";\n            break;\n\n          case \"easeout\":\n            t = \">\";\n            break;\n\n          case \"easeinout\":\n            t = \"<>\";\n            break;\n\n          case \"swing\":\n            t = function t(_t) {\n              var e = 1.70158;\n              return (_t -= 1) * _t * ((e + 1) * _t + e) + 1;\n            };\n\n            break;\n\n          case \"bounce\":\n            t = function t(_t2) {\n              return _t2 < 1 / 2.75 ? 7.5625 * _t2 * _t2 : _t2 < 2 / 2.75 ? 7.5625 * (_t2 -= 1.5 / 2.75) * _t2 + .75 : _t2 < 2.5 / 2.75 ? 7.5625 * (_t2 -= 2.25 / 2.75) * _t2 + .9375 : 7.5625 * (_t2 -= 2.625 / 2.75) * _t2 + .984375;\n            };\n\n            break;\n\n          case \"elastic\":\n            t = function t(_t3) {\n              return _t3 === !!_t3 ? _t3 : Math.pow(2, -10 * _t3) * Math.sin((_t3 - .075) * (2 * Math.PI) / .3) + 1;\n            };\n\n            break;\n\n          default:\n            t = \"<>\";\n        }\n\n        this.w.globals.easing = t;\n      }\n    }, {\n      key: \"animateLine\",\n      value: function value(t, e, i, s) {\n        t.attr(e).animate(s).attr(i);\n      }\n    }, {\n      key: \"animateCircleRadius\",\n      value: function value(t, e, i, s, a) {\n        e || (e = 0), t.attr({\n          r: e\n        }).animate(s, a).attr({\n          r: i\n        });\n      }\n    }, {\n      key: \"animateCircle\",\n      value: function value(t, e, i, s, a) {\n        t.attr({\n          r: e.r,\n          cx: e.cx,\n          cy: e.cy\n        }).animate(s, a).attr({\n          r: i.r,\n          cx: i.cx,\n          cy: i.cy\n        });\n      }\n    }, {\n      key: \"animateRect\",\n      value: function value(t, e, i, s, a) {\n        t.attr(e).animate(s).attr(i).afterAll(function () {\n          a();\n        });\n      }\n    }, {\n      key: \"animatePathsGradually\",\n      value: function value(t) {\n        var e = t.el,\n            i = t.j,\n            s = t.pathFrom,\n            a = t.pathTo,\n            n = t.speed,\n            r = t.delay,\n            o = t.strokeWidth,\n            l = this.w,\n            h = 0;\n        l.config.chart.animations.animateGradually.enabled && (h = l.config.chart.animations.animateGradually.delay), l.config.chart.animations.dynamicAnimation.enabled && l.globals.dataChanged && (h = 0), this.morphSVG(e, i, s, a, n, o, r * h);\n      }\n    }, {\n      key: \"showDelayedElements\",\n      value: function value() {\n        this.w.globals.delayedElements.forEach(function (t) {\n          t.el.classList.remove(\"hidden\");\n        });\n      }\n    }, {\n      key: \"morphSVG\",\n      value: function value(t, e, i, s, a, n, r) {\n        var o = this,\n            l = this.w;\n        i || (i = t.attr(\"pathFrom\")), s || (s = t.attr(\"pathTo\")), (!i || i.indexOf(\"undefined\") > -1 || i.indexOf(\"NaN\") > -1) && (i = \"M 0 \".concat(l.globals.gridHeight), a = 1), (s.indexOf(\"undefined\") > -1 || s.indexOf(\"NaN\") > -1) && (s = \"M 0 \".concat(l.globals.gridHeight), a = 1), l.globals.shouldAnimate || (a = 1), t.plot(i).animate(1, l.globals.easing, r).plot(i).animate(a, l.globals.easing, r).plot(s).afterAll(function () {\n          d.isNumber(e) ? e === l.globals.series[l.globals.maxValsInArrayIndex].length - 2 && l.globals.shouldAnimate && (l.globals.animationEnded = !0) : l.globals.shouldAnimate && (l.globals.animationEnded = !0, \"function\" == typeof l.config.chart.events.animationEnd && l.config.chart.events.animationEnd(o.ctx, l)), o.showDelayedElements();\n        });\n      }\n    }]), t;\n  }(),\n      f = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"drawLine\",\n      value: function value(t, e, i, s) {\n        var a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : \"#a8a8a8\",\n            n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,\n            r = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null;\n        return this.w.globals.dom.Paper.line().attr({\n          x1: t,\n          y1: e,\n          x2: i,\n          y2: s,\n          stroke: a,\n          \"stroke-dasharray\": n,\n          \"stroke-width\": r\n        });\n      }\n    }, {\n      key: \"drawRect\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n            a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,\n            n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"#fefefe\",\n            r = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1,\n            o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,\n            l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,\n            h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,\n            c = this.w.globals.dom.Paper.rect();\n        return c.attr({\n          x: t,\n          y: e,\n          width: i > 0 ? i : 0,\n          height: s > 0 ? s : 0,\n          rx: a,\n          ry: a,\n          fill: n,\n          opacity: r,\n          \"stroke-width\": null !== o ? o : 0,\n          stroke: null !== l ? l : \"none\",\n          \"stroke-dasharray\": h\n        }), c;\n      }\n    }, {\n      key: \"drawPolygon\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"#e1e1e1\",\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"none\";\n        return this.w.globals.dom.Paper.polygon(t).attr({\n          fill: i,\n          stroke: e\n        });\n      }\n    }, {\n      key: \"drawCircle\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n            i = this.w.globals.dom.Paper.circle(2 * t);\n        return null !== e && i.attr(e), i;\n      }\n    }, {\n      key: \"drawPath\",\n      value: function value(t) {\n        var e = t.d,\n            i = void 0 === e ? \"\" : e,\n            s = t.stroke,\n            a = void 0 === s ? \"#a8a8a8\" : s,\n            n = t.strokeWidth,\n            r = void 0 === n ? 1 : n,\n            o = t.fill,\n            l = t.fillOpacity,\n            h = void 0 === l ? 1 : l,\n            c = t.strokeOpacity,\n            d = void 0 === c ? 1 : c,\n            u = t.classes,\n            g = t.strokeLinecap,\n            f = void 0 === g ? null : g,\n            p = t.strokeDashArray,\n            x = void 0 === p ? 0 : p,\n            b = this.w;\n        return null === f && (f = b.config.stroke.lineCap), (i.indexOf(\"undefined\") > -1 || i.indexOf(\"NaN\") > -1) && (i = \"M 0 \".concat(b.globals.gridHeight)), b.globals.dom.Paper.path(i).attr({\n          fill: o,\n          \"fill-opacity\": h,\n          stroke: a,\n          \"stroke-opacity\": d,\n          \"stroke-linecap\": f,\n          \"stroke-width\": r,\n          \"stroke-dasharray\": x,\n          \"class\": u\n        });\n      }\n    }, {\n      key: \"group\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n            e = this.w.globals.dom.Paper.group();\n        return null !== t && e.attr(t), e;\n      }\n    }, {\n      key: \"move\",\n      value: function value(t, e) {\n        var i = [\"M\", t, e].join(\" \");\n        return i;\n      }\n    }, {\n      key: \"line\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n            s = null;\n        return null === i ? s = [\"L\", t, e].join(\" \") : \"H\" === i ? s = [\"H\", t].join(\" \") : \"V\" === i && (s = [\"V\", e].join(\" \")), s;\n      }\n    }, {\n      key: \"curve\",\n      value: function value(t, e, i, s, a, n) {\n        var r = [\"C\", t, e, i, s, a, n].join(\" \");\n        return r;\n      }\n    }, {\n      key: \"quadraticCurve\",\n      value: function value(t, e, i, s) {\n        return [\"Q\", t, e, i, s].join(\" \");\n      }\n    }, {\n      key: \"arc\",\n      value: function value(t, e, i, s, a, n, r) {\n        var o = \"A\";\n        arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (o = \"a\");\n        var l = [o, t, e, i, s, a, n, r].join(\" \");\n        return l;\n      }\n    }, {\n      key: \"renderPaths\",\n      value: function value(t) {\n        var e,\n            i = t.i,\n            s = t.j,\n            a = t.realIndex,\n            r = t.pathFrom,\n            o = t.pathTo,\n            l = t.stroke,\n            h = t.strokeWidth,\n            c = t.strokeLinecap,\n            d = t.fill,\n            f = t.animationDelay,\n            p = t.initialSpeed,\n            x = t.dataChangeSpeed,\n            b = t.className,\n            m = t.id,\n            v = t.shouldClipToGrid,\n            y = void 0 === v || v,\n            w = t.bindEventsOnPaths,\n            k = void 0 === w || w,\n            A = t.drawShadow,\n            S = void 0 === A || A,\n            C = this.w,\n            L = new u(this.ctx),\n            z = new g(this.ctx),\n            P = this.w.config.chart.animations.enabled,\n            M = P && this.w.config.chart.animations.dynamicAnimation.enabled,\n            E = !!(P && !C.globals.resized || M && C.globals.dataChanged && C.globals.shouldAnimate);\n        E ? e = r : (e = o, this.w.globals.animationEnded = !0);\n        var T = C.config.stroke.dashArray,\n            X = 0;\n        X = Array.isArray(T) ? T[a] : C.config.stroke.dashArray;\n        var I = this.drawPath({\n          d: e,\n          stroke: l,\n          strokeWidth: h,\n          fill: d,\n          fillOpacity: 1,\n          classes: b,\n          strokeLinecap: c,\n          strokeDashArray: X\n        });\n        if (I.attr(\"id\", \"\".concat(m, \"-\").concat(i)), I.attr(\"index\", a), y && I.attr({\n          \"clip-path\": \"url(#gridRectMask\".concat(C.globals.cuid, \")\")\n        }), \"none\" !== C.config.states.normal.filter.type) L.getDefaultFilter(I, a);else if (C.config.chart.dropShadow.enabled && S && (!C.config.chart.dropShadow.enabledSeries || C.config.chart.dropShadow.enabledSeries && -1 !== C.config.chart.dropShadow.enabledSeries.indexOf(a))) {\n          var Y = C.config.chart.dropShadow;\n          L.dropShadow(I, Y, a);\n        }\n        k && (I.node.addEventListener(\"mouseenter\", this.pathMouseEnter.bind(this, I)), I.node.addEventListener(\"mouseleave\", this.pathMouseLeave.bind(this, I)), I.node.addEventListener(\"mousedown\", this.pathMouseDown.bind(this, I))), I.attr({\n          pathTo: o,\n          pathFrom: r\n        });\n        var F = {\n          el: I,\n          j: s,\n          pathFrom: r,\n          pathTo: o,\n          strokeWidth: h\n        };\n        return !P || C.globals.resized || C.globals.dataChanged ? !C.globals.resized && C.globals.dataChanged || z.showDelayedElements() : z.animatePathsGradually(n({}, F, {\n          speed: p,\n          delay: f\n        })), C.globals.dataChanged && M && E && z.animatePathsGradually(n({}, F, {\n          speed: x\n        })), I;\n      }\n    }, {\n      key: \"drawPattern\",\n      value: function value(t, e, i) {\n        var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"#a8a8a8\",\n            a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;\n        return this.w.globals.dom.Paper.pattern(e, i, function (n) {\n          \"horizontalLines\" === t ? n.line(0, 0, i, 0).stroke({\n            color: s,\n            width: a + 1\n          }) : \"verticalLines\" === t ? n.line(0, 0, 0, e).stroke({\n            color: s,\n            width: a + 1\n          }) : \"slantedLines\" === t ? n.line(0, 0, e, i).stroke({\n            color: s,\n            width: a\n          }) : \"squares\" === t ? n.rect(e, i).fill(\"none\").stroke({\n            color: s,\n            width: a\n          }) : \"circles\" === t && n.circle(e).fill(\"none\").stroke({\n            color: s,\n            width: a\n          });\n        });\n      }\n    }, {\n      key: \"drawGradient\",\n      value: function value(t, e, i, s, a) {\n        var n,\n            r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,\n            o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,\n            l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,\n            h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,\n            c = this.w;\n        e = d.hexToRgba(e, s), i = d.hexToRgba(i, a);\n        var u = 0,\n            g = 1,\n            f = 1,\n            p = null;\n        null !== o && (u = void 0 !== o[0] ? o[0] / 100 : 0, g = void 0 !== o[1] ? o[1] / 100 : 1, f = void 0 !== o[2] ? o[2] / 100 : 1, p = void 0 !== o[3] ? o[3] / 100 : null);\n        var x = !(\"donut\" !== c.config.chart.type && \"pie\" !== c.config.chart.type && \"bubble\" !== c.config.chart.type);\n\n        if (n = null === l || 0 === l.length ? c.globals.dom.Paper.gradient(x ? \"radial\" : \"linear\", function (t) {\n          t.at(u, e, s), t.at(g, i, a), t.at(f, i, a), null !== p && t.at(p, e, s);\n        }) : c.globals.dom.Paper.gradient(x ? \"radial\" : \"linear\", function (t) {\n          (Array.isArray(l[h]) ? l[h] : l).forEach(function (e) {\n            t.at(e.offset / 100, e.color, e.opacity);\n          });\n        }), x) {\n          var b = c.globals.gridWidth / 2,\n              m = c.globals.gridHeight / 2;\n          \"bubble\" !== c.config.chart.type ? n.attr({\n            gradientUnits: \"userSpaceOnUse\",\n            cx: b,\n            cy: m,\n            r: r\n          }) : n.attr({\n            cx: .5,\n            cy: .5,\n            r: .8,\n            fx: .2,\n            fy: .2\n          });\n        } else \"vertical\" === t ? n.from(0, 0).to(0, 1) : \"diagonal\" === t ? n.from(0, 0).to(1, 1) : \"horizontal\" === t ? n.from(0, 1).to(1, 1) : \"diagonal2\" === t && n.from(0, 1).to(2, 2);\n\n        return n;\n      }\n    }, {\n      key: \"drawText\",\n      value: function value(t) {\n        var e,\n            i = this.w,\n            s = t.x,\n            a = t.y,\n            n = t.text,\n            r = t.textAnchor,\n            o = t.fontSize,\n            l = t.fontFamily,\n            h = t.foreColor,\n            c = t.opacity;\n        return void 0 === n && (n = \"\"), r || (r = \"start\"), h || (h = i.config.chart.foreColor), l = l || i.config.chart.fontFamily, (e = Array.isArray(n) ? i.globals.dom.Paper.text(function (t) {\n          for (var e = 0; e < n.length; e++) {\n            t.tspan(n[e]);\n          }\n        }) : i.globals.dom.Paper.plain(n)).attr({\n          x: s,\n          y: a,\n          \"text-anchor\": r,\n          \"dominant-baseline\": \"auto\",\n          \"font-size\": o,\n          \"font-family\": l,\n          fill: h,\n          \"class\": (t.cssClass, t.cssClass)\n        }), e.node.style.fontFamily = l, e.node.style.opacity = c, e;\n      }\n    }, {\n      key: \"addTspan\",\n      value: function value(t, e, i) {\n        var s = t.tspan(e);\n        i || (i = this.w.config.chart.fontFamily), s.node.style.fontFamily = i;\n      }\n    }, {\n      key: \"drawMarker\",\n      value: function value(t, e, i) {\n        t = t || 0;\n        var s = i.pSize || 0,\n            a = null;\n\n        if (\"square\" === i.shape) {\n          var n = void 0 === i.pRadius ? s / 2 : i.pRadius;\n          null === e && (s = 0, n = 0);\n          var r = 1.2 * s + n,\n              o = this.drawRect(r, r, r, r, n);\n          o.attr({\n            x: t - r / 2,\n            y: e - r / 2,\n            cx: t,\n            cy: e,\n            \"class\": i[\"class\"] ? i[\"class\"] : \"\",\n            fill: i.pointFillColor,\n            \"fill-opacity\": i.pointFillOpacity ? i.pointFillOpacity : 1,\n            stroke: i.pointStrokeColor,\n            \"stroke-width\": i.pWidth ? i.pWidth : 0,\n            \"stroke-opacity\": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1\n          }), a = o;\n        } else \"circle\" === i.shape && (d.isNumber(e) || (s = 0, e = 0), a = this.drawCircle(s, {\n          cx: t,\n          cy: e,\n          \"class\": i[\"class\"] ? i[\"class\"] : \"\",\n          stroke: i.pointStrokeColor,\n          fill: i.pointFillColor,\n          \"fill-opacity\": i.pointFillOpacity ? i.pointFillOpacity : 1,\n          \"stroke-width\": i.pWidth ? i.pWidth : 0,\n          \"stroke-opacity\": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1\n        }));\n\n        return a;\n      }\n    }, {\n      key: \"pathMouseEnter\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new u(this.ctx),\n            a = parseInt(t.node.getAttribute(\"index\")),\n            n = parseInt(t.node.getAttribute(\"j\"));\n\n        if (\"function\" == typeof i.config.chart.events.dataPointMouseEnter && i.config.chart.events.dataPointMouseEnter(e, this.ctx, {\n          seriesIndex: a,\n          dataPointIndex: n,\n          w: i\n        }), this.ctx.fireEvent(\"dataPointMouseEnter\", [e, this.ctx, {\n          seriesIndex: a,\n          dataPointIndex: n,\n          w: i\n        }]), (\"none\" === i.config.states.active.filter.type || \"true\" !== t.node.getAttribute(\"selected\")) && \"none\" !== i.config.states.hover.filter.type && \"none\" !== i.config.states.active.filter.type && !i.globals.isTouchDevice) {\n          var r = i.config.states.hover.filter;\n          s.applyFilter(t, a, r.type, r.value);\n        }\n      }\n    }, {\n      key: \"pathMouseLeave\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new u(this.ctx),\n            a = parseInt(t.node.getAttribute(\"index\")),\n            n = parseInt(t.node.getAttribute(\"j\"));\n        \"function\" == typeof i.config.chart.events.dataPointMouseLeave && i.config.chart.events.dataPointMouseLeave(e, this.ctx, {\n          seriesIndex: a,\n          dataPointIndex: n,\n          w: i\n        }), this.ctx.fireEvent(\"dataPointMouseLeave\", [e, this.ctx, {\n          seriesIndex: a,\n          dataPointIndex: n,\n          w: i\n        }]), \"none\" !== i.config.states.active.filter.type && \"true\" === t.node.getAttribute(\"selected\") || \"none\" !== i.config.states.hover.filter.type && s.getDefaultFilter(t, a);\n      }\n    }, {\n      key: \"pathMouseDown\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new u(this.ctx),\n            a = parseInt(t.node.getAttribute(\"index\")),\n            n = parseInt(t.node.getAttribute(\"j\")),\n            r = \"false\";\n\n        if (\"true\" === t.node.getAttribute(\"selected\")) {\n          if (t.node.setAttribute(\"selected\", \"false\"), i.globals.selectedDataPoints[a].indexOf(n) > -1) {\n            var o = i.globals.selectedDataPoints[a].indexOf(n);\n            i.globals.selectedDataPoints[a].splice(o, 1);\n          }\n        } else {\n          if (!i.config.states.active.allowMultipleDataPointsSelection && i.globals.selectedDataPoints.length > 0) {\n            i.globals.selectedDataPoints = [];\n            var l = i.globals.dom.Paper.select(\".apexcharts-series path\").members,\n                h = i.globals.dom.Paper.select(\".apexcharts-series circle, .apexcharts-series rect\").members;\n            l.forEach(function (t) {\n              t.node.setAttribute(\"selected\", \"false\"), s.getDefaultFilter(t, a);\n            }), h.forEach(function (t) {\n              t.node.setAttribute(\"selected\", \"false\"), s.getDefaultFilter(t, a);\n            });\n          }\n\n          t.node.setAttribute(\"selected\", \"true\"), r = \"true\", void 0 === i.globals.selectedDataPoints[a] && (i.globals.selectedDataPoints[a] = []), i.globals.selectedDataPoints[a].push(n);\n        }\n\n        if (\"true\" === r) {\n          var c = i.config.states.active.filter;\n          \"none\" !== c && s.applyFilter(t, a, c.type, c.value);\n        } else \"none\" !== i.config.states.active.filter.type && s.getDefaultFilter(t, a);\n\n        \"function\" == typeof i.config.chart.events.dataPointSelection && i.config.chart.events.dataPointSelection(e, this.ctx, {\n          selectedDataPoints: i.globals.selectedDataPoints,\n          seriesIndex: a,\n          dataPointIndex: n,\n          w: i\n        }), this.ctx.fireEvent(\"dataPointSelection\", [e, this.ctx, {\n          selectedDataPoints: i.globals.selectedDataPoints,\n          seriesIndex: a,\n          dataPointIndex: n,\n          w: i\n        }]);\n      }\n    }, {\n      key: \"rotateAroundCenter\",\n      value: function value(t) {\n        var e = t.getBBox();\n        return {\n          x: e.x + e.width / 2,\n          y: e.y + e.height / 2\n        };\n      }\n    }, {\n      key: \"getTextRects\",\n      value: function value(t, e, i, s) {\n        var a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],\n            n = this.w,\n            r = this.drawText({\n          x: -200,\n          y: -200,\n          text: t,\n          textAnchor: \"start\",\n          fontSize: e,\n          fontFamily: i,\n          foreColor: \"#fff\",\n          opacity: 0\n        });\n        s && r.attr(\"transform\", s), n.globals.dom.Paper.add(r);\n        var o = r.bbox();\n        return a || (o = r.node.getBoundingClientRect()), r.remove(), {\n          width: o.width,\n          height: o.height\n        };\n      }\n    }, {\n      key: \"placeTextWithEllipsis\",\n      value: function value(t, e, i) {\n        if (t.textContent = e, e.length > 0 && t.getSubStringLength(0, e.length) >= i) {\n          for (var s = e.length - 3; s > 0; s -= 3) {\n            if (t.getSubStringLength(0, s) <= i) return void (t.textContent = e.substring(0, s) + \"...\");\n          }\n\n          t.textContent = \"...\";\n        }\n      }\n    }], [{\n      key: \"setAttrs\",\n      value: function value(t, e) {\n        for (var i in e) {\n          e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n        }\n      }\n    }]), t;\n  }();\n\n  var p = {\n    name: \"en\",\n    options: {\n      months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n      shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      toolbar: {\n        exportToSVG: \"Download SVG\",\n        exportToPNG: \"Download PNG\",\n        menu: \"Menu\",\n        selection: \"Selection\",\n        selectionZoom: \"Selection Zoom\",\n        zoomIn: \"Zoom In\",\n        zoomOut: \"Zoom Out\",\n        pan: \"Panning\",\n        reset: \"Reset Zoom\"\n      }\n    }\n  },\n      x = function () {\n    function t() {\n      e(this, t), this.yAxis = {\n        show: !0,\n        showAlways: !1,\n        seriesName: void 0,\n        opposite: !1,\n        reversed: !1,\n        logarithmic: !1,\n        tickAmount: void 0,\n        forceNiceScale: !1,\n        max: void 0,\n        min: void 0,\n        floating: !1,\n        decimalsInFloat: void 0,\n        labels: {\n          show: !0,\n          minWidth: 0,\n          maxWidth: 160,\n          offsetX: 0,\n          offsetY: 0,\n          align: void 0,\n          rotate: 0,\n          padding: 20,\n          style: {\n            colors: [],\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            cssClass: \"\"\n          },\n          formatter: void 0\n        },\n        axisBorder: {\n          show: !1,\n          color: \"#78909C\",\n          offsetX: 0,\n          offsetY: 0\n        },\n        axisTicks: {\n          show: !1,\n          color: \"#78909C\",\n          width: 6,\n          offsetX: 0,\n          offsetY: 0\n        },\n        title: {\n          text: void 0,\n          rotate: 90,\n          offsetY: 0,\n          offsetX: 0,\n          style: {\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            cssClass: \"\"\n          }\n        },\n        tooltip: {\n          enabled: !1,\n          offsetX: 0\n        },\n        crosshairs: {\n          show: !0,\n          position: \"front\",\n          stroke: {\n            color: \"#b6b6b6\",\n            width: 1,\n            dashArray: 0\n          }\n        }\n      }, this.xAxisAnnotation = {\n        x: 0,\n        x2: null,\n        strokeDashArray: 1,\n        fillColor: \"#c2c2c2\",\n        borderColor: \"#c2c2c2\",\n        opacity: .3,\n        offsetX: 0,\n        offsetY: 0,\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          text: void 0,\n          textAnchor: \"middle\",\n          orientation: \"vertical\",\n          position: \"top\",\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 2,\n              bottom: 2\n            }\n          }\n        }\n      }, this.yAxisAnnotation = {\n        y: 0,\n        y2: null,\n        strokeDashArray: 1,\n        fillColor: \"#c2c2c2\",\n        borderColor: \"#c2c2c2\",\n        opacity: .3,\n        offsetX: 0,\n        offsetY: 0,\n        yAxisIndex: 0,\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          text: void 0,\n          textAnchor: \"end\",\n          position: \"right\",\n          offsetX: 0,\n          offsetY: -3,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 0,\n              bottom: 2\n            }\n          }\n        }\n      }, this.pointAnnotation = {\n        x: 0,\n        y: null,\n        yAxisIndex: 0,\n        seriesIndex: 0,\n        marker: {\n          size: 0,\n          fillColor: \"#fff\",\n          strokeWidth: 2,\n          strokeColor: \"#0e1726\",\n          shape: \"circle\",\n          offsetX: 0,\n          offsetY: 0,\n          radius: 2,\n          cssClass: \"\"\n        },\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          text: void 0,\n          textAnchor: \"middle\",\n          offsetX: 0,\n          offsetY: -15,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 0,\n              bottom: 2\n            }\n          }\n        },\n        customSVG: {\n          SVG: void 0,\n          cssClass: void 0,\n          offsetX: 0,\n          offsetY: 0\n        }\n      };\n    }\n\n    return s(t, [{\n      key: \"init\",\n      value: function value() {\n        return {\n          annotations: {\n            position: \"front\",\n            yaxis: [this.yAxisAnnotation],\n            xaxis: [this.xAxisAnnotation],\n            points: [this.pointAnnotation]\n          },\n          chart: {\n            animations: {\n              enabled: !0,\n              easing: \"easeinout\",\n              speed: 800,\n              animateGradually: {\n                delay: 150,\n                enabled: !0\n              },\n              dynamicAnimation: {\n                enabled: !0,\n                speed: 350\n              }\n            },\n            background: \"transparent\",\n            locales: [p],\n            defaultLocale: \"en\",\n            dropShadow: {\n              enabled: !1,\n              enabledSeries: void 0,\n              top: 2,\n              left: 2,\n              blur: 4,\n              color: \"#000\",\n              opacity: .35\n            },\n            events: {\n              animationEnd: void 0,\n              beforeMount: void 0,\n              mounted: void 0,\n              updated: void 0,\n              click: void 0,\n              legendClick: void 0,\n              markerClick: void 0,\n              selection: void 0,\n              dataPointSelection: void 0,\n              dataPointMouseEnter: void 0,\n              dataPointMouseLeave: void 0,\n              beforeZoom: void 0,\n              zoomed: void 0,\n              scrolled: void 0\n            },\n            foreColor: \"#373d3f\",\n            fontFamily: \"Helvetica, Arial, sans-serif\",\n            height: \"auto\",\n            parentHeightOffset: 15,\n            id: void 0,\n            group: void 0,\n            offsetX: 0,\n            offsetY: 0,\n            selection: {\n              enabled: !1,\n              type: \"x\",\n              fill: {\n                color: \"#24292e\",\n                opacity: .1\n              },\n              stroke: {\n                width: 1,\n                color: \"#24292e\",\n                opacity: .4,\n                dashArray: 3\n              },\n              xaxis: {\n                min: void 0,\n                max: void 0\n              },\n              yaxis: {\n                min: void 0,\n                max: void 0\n              }\n            },\n            sparkline: {\n              enabled: !1\n            },\n            brush: {\n              enabled: !1,\n              autoScaleYaxis: !1,\n              target: void 0\n            },\n            stacked: !1,\n            stackType: \"normal\",\n            toolbar: {\n              show: !0,\n              tools: {\n                download: !0,\n                selection: !0,\n                zoom: !0,\n                zoomin: !0,\n                zoomout: !0,\n                pan: !0,\n                reset: !0,\n                customIcons: []\n              },\n              autoSelected: \"zoom\"\n            },\n            type: \"line\",\n            width: \"100%\",\n            zoom: {\n              enabled: !0,\n              type: \"x\",\n              zoomedArea: {\n                fill: {\n                  color: \"#90CAF9\",\n                  opacity: .4\n                },\n                stroke: {\n                  color: \"#0D47A1\",\n                  opacity: .4,\n                  width: 1\n                }\n              }\n            }\n          },\n          plotOptions: {\n            bar: {\n              horizontal: !1,\n              columnWidth: \"70%\",\n              barHeight: \"70%\",\n              distributed: !1,\n              endingShape: \"flat\",\n              colors: {\n                ranges: [],\n                backgroundBarColors: [],\n                backgroundBarOpacity: 1\n              },\n              dataLabels: {\n                maxItems: 100,\n                hideOverflowingLabels: !0,\n                position: \"top\"\n              }\n            },\n            candlestick: {\n              colors: {\n                upward: \"#00B746\",\n                downward: \"#EF403C\"\n              },\n              wick: {\n                useFillColor: !0\n              }\n            },\n            heatmap: {\n              radius: 2,\n              enableShades: !0,\n              shadeIntensity: .5,\n              reverseNegativeShade: !0,\n              distributed: !1,\n              colorScale: {\n                inverse: !1,\n                ranges: [],\n                min: void 0,\n                max: void 0\n              }\n            },\n            radialBar: {\n              size: void 0,\n              inverseOrder: !1,\n              startAngle: 0,\n              endAngle: 360,\n              offsetX: 0,\n              offsetY: 0,\n              hollow: {\n                margin: 5,\n                size: \"50%\",\n                background: \"transparent\",\n                image: void 0,\n                imageWidth: 150,\n                imageHeight: 150,\n                imageOffsetX: 0,\n                imageOffsetY: 0,\n                imageClipped: !0,\n                position: \"front\",\n                dropShadow: {\n                  enabled: !1,\n                  top: 0,\n                  left: 0,\n                  blur: 3,\n                  color: \"#000\",\n                  opacity: .5\n                }\n              },\n              track: {\n                show: !0,\n                startAngle: void 0,\n                endAngle: void 0,\n                background: \"#f2f2f2\",\n                strokeWidth: \"97%\",\n                opacity: 1,\n                margin: 5,\n                dropShadow: {\n                  enabled: !1,\n                  top: 0,\n                  left: 0,\n                  blur: 3,\n                  color: \"#000\",\n                  opacity: .5\n                }\n              },\n              dataLabels: {\n                show: !0,\n                name: {\n                  show: !0,\n                  fontSize: \"16px\",\n                  fontFamily: void 0,\n                  color: void 0,\n                  offsetY: 0\n                },\n                value: {\n                  show: !0,\n                  fontSize: \"14px\",\n                  fontFamily: void 0,\n                  color: void 0,\n                  offsetY: 16,\n                  formatter: function formatter(t) {\n                    return t + \"%\";\n                  }\n                },\n                total: {\n                  show: !1,\n                  label: \"Total\",\n                  color: void 0,\n                  formatter: function formatter(t) {\n                    return t.globals.seriesTotals.reduce(function (t, e) {\n                      return t + e;\n                    }, 0) / t.globals.series.length + \"%\";\n                  }\n                }\n              }\n            },\n            rangeBar: {},\n            pie: {\n              size: void 0,\n              customScale: 1,\n              offsetX: 0,\n              offsetY: 0,\n              expandOnClick: !0,\n              dataLabels: {\n                offset: 0,\n                minAngleToShowLabel: 10\n              },\n              donut: {\n                size: \"65%\",\n                background: \"transparent\",\n                labels: {\n                  show: !1,\n                  name: {\n                    show: !0,\n                    fontSize: \"16px\",\n                    fontFamily: void 0,\n                    color: void 0,\n                    offsetY: -10\n                  },\n                  value: {\n                    show: !0,\n                    fontSize: \"20px\",\n                    fontFamily: void 0,\n                    color: void 0,\n                    offsetY: 10,\n                    formatter: function formatter(t) {\n                      return t;\n                    }\n                  },\n                  total: {\n                    show: !1,\n                    label: \"Total\",\n                    color: void 0,\n                    formatter: function formatter(t) {\n                      return t.globals.seriesTotals.reduce(function (t, e) {\n                        return t + e;\n                      }, 0);\n                    }\n                  }\n                }\n              }\n            },\n            radar: {\n              size: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              polygons: {\n                strokeColors: \"#e8e8e8\",\n                connectorColors: \"#e8e8e8\",\n                fill: {\n                  colors: void 0\n                }\n              }\n            }\n          },\n          colors: void 0,\n          dataLabels: {\n            enabled: !0,\n            enabledOnSeries: void 0,\n            formatter: function formatter(t) {\n              return t;\n            },\n            textAnchor: \"middle\",\n            offsetX: 0,\n            offsetY: 0,\n            style: {\n              fontSize: \"12px\",\n              fontFamily: void 0,\n              colors: void 0\n            },\n            dropShadow: {\n              enabled: !1,\n              top: 1,\n              left: 1,\n              blur: 1,\n              color: \"#000\",\n              opacity: .45\n            }\n          },\n          fill: {\n            type: \"solid\",\n            colors: void 0,\n            opacity: .85,\n            gradient: {\n              shade: \"dark\",\n              type: \"horizontal\",\n              shadeIntensity: .5,\n              gradientToColors: void 0,\n              inverseColors: !0,\n              opacityFrom: 1,\n              opacityTo: 1,\n              stops: [0, 50, 100],\n              colorStops: []\n            },\n            image: {\n              src: [],\n              width: void 0,\n              height: void 0\n            },\n            pattern: {\n              style: \"sqaures\",\n              width: 6,\n              height: 6,\n              strokeWidth: 2\n            }\n          },\n          grid: {\n            show: !0,\n            borderColor: \"#e0e0e0\",\n            strokeDashArray: 0,\n            position: \"back\",\n            xaxis: {\n              lines: {\n                show: !1,\n                animate: !1\n              }\n            },\n            yaxis: {\n              lines: {\n                show: !0,\n                animate: !1\n              }\n            },\n            row: {\n              colors: void 0,\n              opacity: .5\n            },\n            column: {\n              colors: void 0,\n              opacity: .5\n            },\n            padding: {\n              top: 0,\n              right: 10,\n              bottom: 0,\n              left: 12\n            }\n          },\n          labels: [],\n          legend: {\n            show: !0,\n            showForSingleSeries: !1,\n            showForNullSeries: !0,\n            showForZeroSeries: !0,\n            floating: !1,\n            position: \"bottom\",\n            horizontalAlign: \"center\",\n            fontSize: \"12px\",\n            fontFamily: void 0,\n            width: void 0,\n            height: void 0,\n            formatter: void 0,\n            offsetX: -20,\n            offsetY: 0,\n            labels: {\n              colors: void 0,\n              useSeriesColors: !1\n            },\n            markers: {\n              width: 12,\n              height: 12,\n              strokeWidth: 0,\n              strokeColor: \"#fff\",\n              radius: 12,\n              customHTML: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              onClick: void 0\n            },\n            itemMargin: {\n              horizontal: 0,\n              vertical: 5\n            },\n            onItemClick: {\n              toggleDataSeries: !0\n            },\n            onItemHover: {\n              highlightDataSeries: !0\n            }\n          },\n          markers: {\n            discrete: [],\n            size: 0,\n            colors: void 0,\n            strokeColors: \"#fff\",\n            strokeWidth: 2,\n            strokeOpacity: .9,\n            fillOpacity: 1,\n            shape: \"circle\",\n            radius: 2,\n            offsetX: 0,\n            offsetY: 0,\n            hover: {\n              size: void 0,\n              sizeOffset: 3\n            }\n          },\n          noData: {\n            text: void 0,\n            align: \"center\",\n            verticalAlign: \"middle\",\n            offsetX: 0,\n            offsetY: 0,\n            style: {\n              color: void 0,\n              fontSize: \"14px\",\n              fontFamily: void 0\n            }\n          },\n          responsive: [],\n          series: void 0,\n          states: {\n            normal: {\n              filter: {\n                type: \"none\",\n                value: 0\n              }\n            },\n            hover: {\n              filter: {\n                type: \"lighten\",\n                value: .15\n              }\n            },\n            active: {\n              allowMultipleDataPointsSelection: !1,\n              filter: {\n                type: \"darken\",\n                value: .65\n              }\n            }\n          },\n          title: {\n            text: void 0,\n            align: \"left\",\n            margin: 10,\n            offsetX: 0,\n            offsetY: 0,\n            floating: !1,\n            style: {\n              fontSize: \"14px\",\n              fontFamily: void 0,\n              color: void 0\n            }\n          },\n          subtitle: {\n            text: void 0,\n            align: \"left\",\n            margin: 10,\n            offsetX: 0,\n            offsetY: 30,\n            floating: !1,\n            style: {\n              fontSize: \"12px\",\n              fontFamily: void 0,\n              color: void 0\n            }\n          },\n          stroke: {\n            show: !0,\n            curve: \"smooth\",\n            lineCap: \"butt\",\n            width: 2,\n            colors: void 0,\n            dashArray: 0\n          },\n          tooltip: {\n            enabled: !0,\n            enabledOnSeries: void 0,\n            shared: !0,\n            followCursor: !1,\n            intersect: !1,\n            inverseOrder: !1,\n            custom: void 0,\n            fillSeriesColor: !1,\n            theme: \"light\",\n            style: {\n              fontSize: \"12px\",\n              fontFamily: void 0\n            },\n            onDatasetHover: {\n              highlightDataSeries: !1\n            },\n            x: {\n              show: !0,\n              format: \"dd MMM\",\n              formatter: void 0\n            },\n            y: {\n              formatter: void 0,\n              title: {\n                formatter: function formatter(t) {\n                  return t;\n                }\n              }\n            },\n            z: {\n              formatter: void 0,\n              title: \"Size: \"\n            },\n            marker: {\n              show: !0\n            },\n            items: {\n              display: \"flex\"\n            },\n            fixed: {\n              enabled: !1,\n              position: \"topRight\",\n              offsetX: 0,\n              offsetY: 0\n            }\n          },\n          xaxis: {\n            type: \"category\",\n            categories: [],\n            offsetX: 0,\n            offsetY: 0,\n            labels: {\n              show: !0,\n              rotate: -45,\n              rotateAlways: !1,\n              hideOverlappingLabels: !0,\n              trim: !0,\n              minHeight: void 0,\n              maxHeight: 120,\n              showDuplicates: !0,\n              style: {\n                colors: [],\n                fontSize: \"12px\",\n                fontFamily: void 0,\n                cssClass: \"\"\n              },\n              offsetX: 0,\n              offsetY: 0,\n              format: void 0,\n              formatter: void 0,\n              datetimeFormatter: {\n                year: \"yyyy\",\n                month: \"MMM 'yy\",\n                day: \"dd MMM\",\n                hour: \"HH:mm\",\n                minute: \"HH:mm:ss\"\n              }\n            },\n            axisBorder: {\n              show: !0,\n              color: \"#78909C\",\n              width: \"100%\",\n              height: 1,\n              offsetX: 0,\n              offsetY: 0\n            },\n            axisTicks: {\n              show: !0,\n              color: \"#78909C\",\n              height: 6,\n              offsetX: 0,\n              offsetY: 0\n            },\n            tickAmount: void 0,\n            tickPlacement: \"on\",\n            min: void 0,\n            max: void 0,\n            range: void 0,\n            floating: !1,\n            position: \"bottom\",\n            title: {\n              text: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              style: {\n                color: void 0,\n                fontSize: \"12px\",\n                fontFamily: void 0,\n                cssClass: \"\"\n              }\n            },\n            crosshairs: {\n              show: !0,\n              width: 1,\n              position: \"back\",\n              opacity: .9,\n              stroke: {\n                color: \"#b6b6b6\",\n                width: 1,\n                dashArray: 3\n              },\n              fill: {\n                type: \"solid\",\n                color: \"#B1B9C4\",\n                gradient: {\n                  colorFrom: \"#D8E3F0\",\n                  colorTo: \"#BED1E6\",\n                  stops: [0, 100],\n                  opacityFrom: .4,\n                  opacityTo: .5\n                }\n              },\n              dropShadow: {\n                enabled: !1,\n                left: 0,\n                top: 0,\n                blur: 1,\n                opacity: .4\n              }\n            },\n            tooltip: {\n              enabled: !0,\n              offsetY: 0,\n              formatter: void 0,\n              style: {\n                fontSize: \"12px\",\n                fontFamily: void 0\n              }\n            }\n          },\n          yaxis: this.yAxis,\n          theme: {\n            mode: \"light\",\n            palette: \"palette1\",\n            monochrome: {\n              enabled: !1,\n              color: \"#008FFB\",\n              shadeTo: \"light\",\n              shadeIntensity: .65\n            }\n          }\n        };\n      }\n    }]), t;\n  }(),\n      b = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.graphics = new f(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;\n    }\n\n    return s(t, [{\n      key: \"drawAnnotations\",\n      value: function value() {\n        var t = this.w;\n\n        if (t.globals.axisCharts) {\n          for (var e = this.drawYAxisAnnotations(), i = this.drawXAxisAnnotations(), s = this.drawPointAnnotations(), a = t.config.chart.animations.enabled, n = [e, i, s], r = [i.node, e.node, s.node], o = 0; o < 3; o++) {\n            t.globals.dom.elGraphical.add(n[o]), !a || t.globals.resized || t.globals.dataChanged || r[o].classList.add(\"hidden\"), t.globals.delayedElements.push({\n              el: r[o],\n              index: 0\n            });\n          }\n\n          this.annotationsBackground();\n        }\n      }\n    }, {\n      key: \"addXaxisAnnotation\",\n      value: function value(t, e, i) {\n        var s = this.w,\n            a = this.invertAxis ? s.globals.minY : s.globals.minX,\n            n = this.invertAxis ? s.globals.yRange[0] : s.globals.xRange,\n            r = (t.x - a) / (n / s.globals.gridWidth),\n            o = t.label.text;\n\n        if (\"category\" === s.config.xaxis.type || s.config.xaxis.convertedCatToNumeric) {\n          var l = s.globals.labels.indexOf(t.x),\n              h = s.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g text:nth-child(\" + (l + 1) + \")\");\n          h && (r = parseFloat(h.getAttribute(\"x\")));\n        }\n\n        var c = t.strokeDashArray;\n\n        if (!(r < 0 || r > s.globals.gridWidth)) {\n          if (null === t.x2) {\n            var d = this.graphics.drawLine(r + t.offsetX, 0 + t.offsetY, r + t.offsetX, s.globals.gridHeight + t.offsetY, t.borderColor, c);\n            e.appendChild(d.node);\n          } else {\n            var u = (t.x2 - a) / (n / s.globals.gridWidth);\n\n            if (u < r) {\n              var g = r;\n              r = u, u = g;\n            }\n\n            if (o) {\n              var f = this.graphics.drawRect(r + t.offsetX, 0 + t.offsetY, u - r, s.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, c);\n              e.appendChild(f.node);\n            }\n          }\n\n          var p = \"top\" === t.label.position ? -3 : s.globals.gridHeight,\n              x = this.graphics.drawText({\n            x: r + t.label.offsetX,\n            y: p + t.label.offsetY,\n            text: o,\n            textAnchor: t.label.textAnchor,\n            fontSize: t.label.style.fontSize,\n            fontFamily: t.label.style.fontFamily,\n            foreColor: t.label.style.color,\n            cssClass: \"apexcharts-xaxis-annotation-label \" + t.label.style.cssClass\n          });\n          x.attr({\n            rel: i\n          }), e.appendChild(x.node), this.setOrientations(t, i);\n        }\n      }\n    }, {\n      key: \"drawXAxisAnnotations\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = this.graphics.group({\n          \"class\": \"apexcharts-xaxis-annotations\"\n        });\n        return e.config.annotations.xaxis.map(function (e, s) {\n          t.addXaxisAnnotation(e, i.node, s);\n        }), i;\n      }\n    }, {\n      key: \"addYaxisAnnotation\",\n      value: function value(t, e, i) {\n        var s,\n            a,\n            n = this.w,\n            r = t.strokeDashArray;\n\n        if (this.invertAxis) {\n          var o = n.globals.labels.indexOf(t.y),\n              l = n.globals.dom.baseEl.querySelector(\".apexcharts-yaxis-texts-g text:nth-child(\" + (o + 1) + \")\");\n          l && (s = parseFloat(l.getAttribute(\"y\")));\n        } else s = n.globals.gridHeight - (t.y - n.globals.minYArr[t.yAxisIndex]) / (n.globals.yRange[t.yAxisIndex] / n.globals.gridHeight), n.config.yaxis[t.yAxisIndex] && n.config.yaxis[t.yAxisIndex].reversed && (s = (t.y - n.globals.minYArr[t.yAxisIndex]) / (n.globals.yRange[t.yAxisIndex] / n.globals.gridHeight));\n\n        var h = t.label.text;\n\n        if (null === t.y2) {\n          var c = this.graphics.drawLine(0 + t.offsetX, s + t.offsetY, n.globals.gridWidth + t.offsetX, s + t.offsetY, t.borderColor, r);\n          e.appendChild(c.node);\n        } else {\n          if (this.invertAxis) {\n            var d = n.globals.labels.indexOf(t.y2),\n                u = n.globals.dom.baseEl.querySelector(\".apexcharts-yaxis-texts-g text:nth-child(\" + (d + 1) + \")\");\n            u && (a = parseFloat(u.getAttribute(\"y\")));\n          } else a = n.globals.gridHeight - (t.y2 - n.globals.minYArr[t.yAxisIndex]) / (n.globals.yRange[t.yAxisIndex] / n.globals.gridHeight), n.config.yaxis[t.yAxisIndex] && n.config.yaxis[t.yAxisIndex].reversed && (a = (t.y2 - n.globals.minYArr[t.yAxisIndex]) / (n.globals.yRange[t.yAxisIndex] / n.globals.gridHeight));\n\n          if (a > s) {\n            var g = s;\n            s = a, a = g;\n          }\n\n          if (h) {\n            var f = this.graphics.drawRect(0 + t.offsetX, a + t.offsetY, n.globals.gridWidth + t.offsetX, s - a, 0, t.fillColor, t.opacity, 1, t.borderColor, r);\n            e.appendChild(f.node);\n          }\n        }\n\n        var p = \"right\" === t.label.position ? n.globals.gridWidth : 0,\n            x = this.graphics.drawText({\n          x: p + t.label.offsetX,\n          y: (a || s) + t.label.offsetY - 3,\n          text: h,\n          textAnchor: t.label.textAnchor,\n          fontSize: t.label.style.fontSize,\n          fontFamily: t.label.style.fontFamily,\n          foreColor: t.label.style.color,\n          cssClass: \"apexcharts-yaxis-annotation-label \" + t.label.style.cssClass\n        });\n        x.attr({\n          rel: i\n        }), e.appendChild(x.node);\n      }\n    }, {\n      key: \"drawYAxisAnnotations\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = this.graphics.group({\n          \"class\": \"apexcharts-yaxis-annotations\"\n        });\n        return e.config.annotations.yaxis.map(function (e, s) {\n          t.addYaxisAnnotation(e, i.node, s);\n        }), i;\n      }\n    }, {\n      key: \"clearAnnotations\",\n      value: function value(t) {\n        var e = t.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations\");\n        (e = d.listToArray(e)).forEach(function (t) {\n          for (; t.firstChild;) {\n            t.removeChild(t.firstChild);\n          }\n        });\n      }\n    }, {\n      key: \"addPointAnnotation\",\n      value: function value(t, e, i) {\n        var s = this.w,\n            a = 0,\n            n = 0,\n            r = 0;\n\n        if (this.invertAxis && console.warn(\"Point annotation is not supported in horizontal bar charts.\"), \"string\" == typeof t.x) {\n          var o = s.globals.labels.indexOf(t.x),\n              l = s.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g text:nth-child(\" + (o + 1) + \")\");\n          a = parseFloat(l.getAttribute(\"x\"));\n          var h = t.y;\n          null === t.y && (h = s.globals.series[t.seriesIndex][o]), n = s.globals.gridHeight - (h - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight) - parseInt(t.label.style.fontSize) - t.marker.size, r = s.globals.gridHeight - (h - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight), s.config.yaxis[t.yAxisIndex] && s.config.yaxis[t.yAxisIndex].reversed && (n = (h - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight) + parseInt(t.label.style.fontSize) + t.marker.size, r = (h - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight));\n        } else a = (t.x - s.globals.minX) / (s.globals.xRange / s.globals.gridWidth), n = s.globals.gridHeight - (parseFloat(t.y) - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight) - parseInt(t.label.style.fontSize) - t.marker.size, r = s.globals.gridHeight - (t.y - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight), s.config.yaxis[t.yAxisIndex] && s.config.yaxis[t.yAxisIndex].reversed && (n = (parseFloat(t.y) - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight) - parseInt(t.label.style.fontSize) - t.marker.size, r = (t.y - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight));\n\n        if (!(a < 0 || a > s.globals.gridWidth)) {\n          var c = {\n            pSize: t.marker.size,\n            pWidth: t.marker.strokeWidth,\n            pointFillColor: t.marker.fillColor,\n            pointStrokeColor: t.marker.strokeColor,\n            shape: t.marker.shape,\n            radius: t.marker.radius,\n            \"class\": \"apexcharts-point-annotation-marker \" + t.marker.cssClass\n          },\n              d = this.graphics.drawMarker(a + t.marker.offsetX, r + t.marker.offsetY, c);\n          e.appendChild(d.node);\n          var u = t.label.text ? t.label.text : \"\",\n              g = this.graphics.drawText({\n            x: a + t.label.offsetX,\n            y: n + t.label.offsetY,\n            text: u,\n            textAnchor: t.label.textAnchor,\n            fontSize: t.label.style.fontSize,\n            fontFamily: t.label.style.fontFamily,\n            foreColor: t.label.style.color,\n            cssClass: \"apexcharts-point-annotation-label \" + t.label.style.cssClass\n          });\n\n          if (g.attr({\n            rel: i\n          }), e.appendChild(g.node), t.customSVG.SVG) {\n            var f = this.graphics.group({\n              \"class\": \"apexcharts-point-annotations-custom-svg \" + t.customSVG.cssClass\n            });\n            f.attr({\n              transform: \"translate(\".concat(a + t.customSVG.offsetX, \", \").concat(n + t.customSVG.offsetY, \")\")\n            }), f.node.innerHTML = t.customSVG.SVG, e.appendChild(f.node);\n          }\n        }\n      }\n    }, {\n      key: \"drawPointAnnotations\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = this.graphics.group({\n          \"class\": \"apexcharts-point-annotations\"\n        });\n        return e.config.annotations.points.map(function (e, s) {\n          t.addPointAnnotation(e, i.node, s);\n        }), i;\n      }\n    }, {\n      key: \"setOrientations\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n            i = this.w;\n\n        if (\"vertical\" === t.label.orientation) {\n          var s = null !== e ? e : 0,\n              a = i.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='\".concat(s, \"']\"));\n\n          if (null !== a) {\n            var n = a.getBoundingClientRect();\n            a.setAttribute(\"x\", parseFloat(a.getAttribute(\"x\")) - n.height + 4), \"top\" === t.label.position ? a.setAttribute(\"y\", parseFloat(a.getAttribute(\"y\")) + n.width) : a.setAttribute(\"y\", parseFloat(a.getAttribute(\"y\")) - n.width);\n            var r = this.graphics.rotateAroundCenter(a),\n                o = r.x,\n                l = r.y;\n            a.setAttribute(\"transform\", \"rotate(-90 \".concat(o, \" \").concat(l, \")\"));\n          }\n        }\n      }\n    }, {\n      key: \"addBackgroundToAnno\",\n      value: function value(t, e) {\n        var i = this.w;\n        if (!e.label.text) return null;\n        var s = i.globals.dom.baseEl.querySelector(\".apexcharts-grid\").getBoundingClientRect(),\n            a = t.getBoundingClientRect(),\n            n = e.label.style.padding.left,\n            r = e.label.style.padding.right,\n            o = e.label.style.padding.top,\n            l = e.label.style.padding.bottom;\n        \"vertical\" === e.label.orientation && (o = e.label.style.padding.left, l = e.label.style.padding.right, n = e.label.style.padding.top, r = e.label.style.padding.bottom);\n        var h = a.left - s.left - n,\n            c = a.top - s.top - o;\n        return this.graphics.drawRect(h, c, a.width + n + r, a.height + o + l, 0, e.label.style.background, 1, e.label.borderWidth, e.label.borderColor, 0);\n      }\n    }, {\n      key: \"annotationsBackground\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = function i(_i, s, a) {\n          var n = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(a, \"-annotations .apexcharts-\").concat(a, \"-annotation-label[rel='\").concat(s, \"']\"));\n\n          if (n) {\n            var r = n.parentNode,\n                o = t.addBackgroundToAnno(n, _i);\n            o && r.insertBefore(o.node, n);\n          }\n        };\n\n        e.config.annotations.xaxis.map(function (t, e) {\n          i(t, e, \"xaxis\");\n        }), e.config.annotations.yaxis.map(function (t, e) {\n          i(t, e, \"yaxis\");\n        }), e.config.annotations.points.map(function (t, e) {\n          i(t, e, \"point\");\n        });\n      }\n    }, {\n      key: \"addText\",\n      value: function value(t, e, i) {\n        var s = t.x,\n            a = t.y,\n            n = t.text,\n            r = t.textAnchor,\n            o = t.appendTo,\n            l = void 0 === o ? \".apexcharts-inner\" : o,\n            h = t.foreColor,\n            c = t.fontSize,\n            d = t.fontFamily,\n            u = t.cssClass,\n            g = t.backgroundColor,\n            f = t.borderWidth,\n            p = t.strokeDashArray,\n            x = t.radius,\n            b = t.borderColor,\n            m = t.paddingLeft,\n            v = void 0 === m ? 4 : m,\n            y = t.paddingRight,\n            w = void 0 === y ? 4 : y,\n            k = t.paddingBottom,\n            A = void 0 === k ? 2 : k,\n            S = t.paddingTop,\n            C = void 0 === S ? 2 : S,\n            L = i,\n            z = L.w,\n            P = z.globals.dom.baseEl.querySelector(l),\n            M = this.graphics.drawText({\n          x: s,\n          y: a,\n          text: n,\n          textAnchor: r || \"start\",\n          fontSize: c || \"12px\",\n          fontFamily: d || z.config.chart.fontFamily,\n          foreColor: h || z.config.chart.foreColor,\n          cssClass: u\n        });\n        P.appendChild(M.node);\n        var E = M.bbox();\n\n        if (n) {\n          var T = this.graphics.drawRect(E.x - v, E.y - C, E.width + v + w, E.height + A + C, x, g, 1, f, b, p);\n          M.before(T);\n        }\n\n        return e && z.globals.memory.methodsToExec.push({\n          context: L,\n          method: L.addText,\n          params: {\n            x: s,\n            y: a,\n            text: n,\n            textAnchor: r,\n            appendTo: l,\n            foreColor: h,\n            fontSize: c,\n            cssClass: u,\n            backgroundColor: g,\n            borderWidth: f,\n            strokeDashArray: p,\n            radius: x,\n            borderColor: b,\n            paddingLeft: v,\n            paddingRight: w,\n            paddingBottom: A,\n            paddingTop: C\n          }\n        }), i;\n      }\n    }, {\n      key: \"addPointAnnotationExternal\",\n      value: function value(t, e, i) {\n        return void 0 === this.invertAxis && (this.invertAxis = i.w.globals.isBarHorizontal), this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"point\",\n          contextMethod: i.addPointAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addYaxisAnnotationExternal\",\n      value: function value(t, e, i) {\n        return this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"yaxis\",\n          contextMethod: i.addYaxisAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addXaxisAnnotationExternal\",\n      value: function value(t, e, i) {\n        return this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"xaxis\",\n          contextMethod: i.addXaxisAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addAnnotationExternal\",\n      value: function value(t) {\n        var e = t.params,\n            i = t.pushToMemory,\n            s = t.context,\n            a = t.type,\n            n = t.contextMethod,\n            r = s,\n            o = r.w,\n            l = o.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(a, \"-annotations\")),\n            h = l.childNodes.length + 1,\n            c = new x(),\n            u = Object.assign({}, \"xaxis\" === a ? c.xAxisAnnotation : \"yaxis\" === a ? c.yAxisAnnotation : c.pointAnnotation),\n            g = d.extend(u, e);\n\n        switch (a) {\n          case \"xaxis\":\n            this.addXaxisAnnotation(g, l, h);\n            break;\n\n          case \"yaxis\":\n            this.addYaxisAnnotation(g, l, h);\n            break;\n\n          case \"point\":\n            this.addPointAnnotation(g, l, h);\n        }\n\n        var f = o.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(a, \"-annotations .apexcharts-\").concat(a, \"-annotation-label[rel='\").concat(h, \"']\")),\n            p = this.addBackgroundToAnno(f, g);\n        return p && l.insertBefore(p.node, f), i && o.globals.memory.methodsToExec.push({\n          context: r,\n          method: n,\n          params: e\n        }), s;\n      }\n    }]), t;\n  }(),\n      m = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n    }\n\n    return s(t, [{\n      key: \"isValidDate\",\n      value: function value(t) {\n        return !isNaN(this.parseDate(t));\n      }\n    }, {\n      key: \"getUTCTimeStamp\",\n      value: function value(t) {\n        return Date.parse(t) ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : t;\n      }\n    }, {\n      key: \"parseDate\",\n      value: function value(t) {\n        var e = Date.parse(t);\n        if (!isNaN(e)) return this.getUTCTimeStamp(t);\n        var i = Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n        return i = this.getUTCTimeStamp(i);\n      }\n    }, {\n      key: \"treatAsUtc\",\n      value: function value(t) {\n        var e = new Date(t);\n        return e.setMinutes(e.getMinutes() - e.getTimezoneOffset()), e;\n      }\n    }, {\n      key: \"formatDate\",\n      value: function value(t, e) {\n        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],\n            a = this.w.globals.locale,\n            n = [\"\\0\"].concat(c(a.months)),\n            r = [\"\\x01\"].concat(c(a.shortMonths)),\n            o = [\"\\x02\"].concat(c(a.days)),\n            l = [\"\\x03\"].concat(c(a.shortDays));\n\n        function h(t, e) {\n          var i = t + \"\";\n\n          for (e = e || 2; i.length < e;) {\n            i = \"0\" + i;\n          }\n\n          return i;\n        }\n\n        s && (t = this.treatAsUtc(t));\n        var d = i ? t.getUTCFullYear() : t.getFullYear();\n        e = (e = (e = e.replace(/(^|[^\\\\])yyyy+/g, \"$1\" + d)).replace(/(^|[^\\\\])yy/g, \"$1\" + d.toString().substr(2, 2))).replace(/(^|[^\\\\])y/g, \"$1\" + d);\n        var u = (i ? t.getUTCMonth() : t.getMonth()) + 1;\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])MMMM+/g, \"$1\" + n[0])).replace(/(^|[^\\\\])MMM/g, \"$1\" + r[0])).replace(/(^|[^\\\\])MM/g, \"$1\" + h(u))).replace(/(^|[^\\\\])M/g, \"$1\" + u);\n        var g = i ? t.getUTCDate() : t.getDate();\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])dddd+/g, \"$1\" + o[0])).replace(/(^|[^\\\\])ddd/g, \"$1\" + l[0])).replace(/(^|[^\\\\])dd/g, \"$1\" + h(g))).replace(/(^|[^\\\\])d/g, \"$1\" + g);\n        var f = i ? t.getUTCHours() : t.getHours(),\n            p = f > 12 ? f - 12 : 0 === f ? 12 : f;\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])HH+/g, \"$1\" + h(f))).replace(/(^|[^\\\\])H/g, \"$1\" + f)).replace(/(^|[^\\\\])hh+/g, \"$1\" + h(p))).replace(/(^|[^\\\\])h/g, \"$1\" + p);\n        var x = i ? t.getUTCMinutes() : t.getMinutes();\n        e = (e = e.replace(/(^|[^\\\\])mm+/g, \"$1\" + h(x))).replace(/(^|[^\\\\])m/g, \"$1\" + x);\n        var b = i ? t.getUTCSeconds() : t.getSeconds();\n        e = (e = e.replace(/(^|[^\\\\])ss+/g, \"$1\" + h(b))).replace(/(^|[^\\\\])s/g, \"$1\" + b);\n        var m = i ? t.getUTCMilliseconds() : t.getMilliseconds();\n        e = e.replace(/(^|[^\\\\])fff+/g, \"$1\" + h(m, 3)), m = Math.round(m / 10), e = e.replace(/(^|[^\\\\])ff/g, \"$1\" + h(m)), m = Math.round(m / 10);\n        var v = f < 12 ? \"AM\" : \"PM\";\n        e = (e = (e = e.replace(/(^|[^\\\\])f/g, \"$1\" + m)).replace(/(^|[^\\\\])TT+/g, \"$1\" + v)).replace(/(^|[^\\\\])T/g, \"$1\" + v.charAt(0));\n        var y = v.toLowerCase();\n        e = (e = e.replace(/(^|[^\\\\])tt+/g, \"$1\" + y)).replace(/(^|[^\\\\])t/g, \"$1\" + y.charAt(0));\n        var w = -t.getTimezoneOffset(),\n            k = i || !w ? \"Z\" : w > 0 ? \"+\" : \"-\";\n\n        if (!i) {\n          var A = (w = Math.abs(w)) % 60;\n          k += h(Math.floor(w / 60)) + \":\" + h(A);\n        }\n\n        e = e.replace(/(^|[^\\\\])K/g, \"$1\" + k);\n        var S = (i ? t.getUTCDay() : t.getDay()) + 1;\n        return e = (e = (e = (e = (e = e.replace(new RegExp(o[0], \"g\"), o[S])).replace(new RegExp(l[0], \"g\"), l[S])).replace(new RegExp(n[0], \"g\"), n[u])).replace(new RegExp(r[0], \"g\"), r[u])).replace(/\\\\(.)/g, \"$1\");\n      }\n    }, {\n      key: \"getTimeUnitsfromTimestamp\",\n      value: function value(t, e) {\n        var i = this.w;\n        void 0 !== i.config.xaxis.min && (t = i.config.xaxis.min), void 0 !== i.config.xaxis.max && (e = i.config.xaxis.max);\n        var s = new Date(t).getFullYear(),\n            a = new Date(e).getFullYear(),\n            n = new Date(t).getMonth(),\n            r = new Date(e).getMonth(),\n            o = new Date(t).getDate(),\n            l = new Date(e).getDate(),\n            h = new Date(t).getHours(),\n            c = new Date(e).getHours();\n        return {\n          minMinute: new Date(t).getMinutes(),\n          maxMinute: new Date(e).getMinutes(),\n          minHour: h,\n          maxHour: c,\n          minDate: o,\n          maxDate: l,\n          minMonth: n,\n          maxMonth: r,\n          minYear: s,\n          maxYear: a\n        };\n      }\n    }, {\n      key: \"isLeapYear\",\n      value: function value(t) {\n        return t % 4 == 0 && t % 100 != 0 || t % 400 == 0;\n      }\n    }, {\n      key: \"calculcateLastDaysOfMonth\",\n      value: function value(t, e, i) {\n        return this.determineDaysOfMonths(t, e) - i;\n      }\n    }, {\n      key: \"determineDaysOfYear\",\n      value: function value(t) {\n        var e = 365;\n        return this.isLeapYear(t) && (e = 366), e;\n      }\n    }, {\n      key: \"determineRemainingDaysOfYear\",\n      value: function value(t, e, i) {\n        var s = this.daysCntOfYear[e] + i;\n        return e > 1 && this.isLeapYear() && s++, s;\n      }\n    }, {\n      key: \"determineDaysOfMonths\",\n      value: function value(t, e) {\n        var i = 30;\n\n        switch (t = d.monthMod(t), !0) {\n          case this.months30.indexOf(t) > -1:\n            2 === t && (i = this.isLeapYear(e) ? 29 : 28);\n            break;\n\n          case this.months31.indexOf(t) > -1:\n          default:\n            i = 31;\n        }\n\n        return i;\n      }\n    }]), t;\n  }(),\n      v = function () {\n    function t(i) {\n      e(this, t), this.opts = i;\n    }\n\n    return s(t, [{\n      key: \"line\",\n      value: function value() {\n        return {\n          chart: {\n            animations: {\n              easing: \"swing\"\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          stroke: {\n            width: 5,\n            curve: \"straight\"\n          },\n          markers: {\n            size: 0,\n            hover: {\n              sizeOffset: 6\n            }\n          },\n          xaxis: {\n            crosshairs: {\n              width: 1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"sparkline\",\n      value: function value(t) {\n        this.opts.yaxis[0].labels.show = !1, this.opts.yaxis[0].floating = !0;\n        return d.extend(t, {\n          grid: {\n            show: !1,\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          },\n          legend: {\n            show: !1\n          },\n          xaxis: {\n            labels: {\n              show: !1\n            },\n            tooltip: {\n              enabled: !1\n            },\n            axisBorder: {\n              show: !1\n            }\n          },\n          chart: {\n            toolbar: {\n              show: !1\n            },\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          }\n        });\n      }\n    }, {\n      key: \"bar\",\n      value: function value() {\n        return {\n          chart: {\n            stacked: !1,\n            animations: {\n              easing: \"swing\"\n            }\n          },\n          plotOptions: {\n            bar: {\n              dataLabels: {\n                position: \"center\"\n              }\n            }\n          },\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          stroke: {\n            width: 0\n          },\n          fill: {\n            opacity: .85\n          },\n          legend: {\n            markers: {\n              shape: \"square\",\n              radius: 2,\n              size: 8\n            }\n          },\n          tooltip: {\n            shared: !1\n          },\n          xaxis: {\n            tooltip: {\n              enabled: !1\n            },\n            crosshairs: {\n              width: \"barWidth\",\n              position: \"back\",\n              fill: {\n                type: \"gradient\"\n              },\n              dropShadow: {\n                enabled: !1\n              },\n              stroke: {\n                width: 0\n              }\n            }\n          }\n        };\n      }\n    }, {\n      key: \"candlestick\",\n      value: function value() {\n        return {\n          stroke: {\n            width: 1,\n            colors: [\"#0e1726\"]\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          tooltip: {\n            shared: !0,\n            custom: function custom(t) {\n              var e = t.seriesIndex,\n                  i = t.dataPointIndex,\n                  s = t.w;\n              return '<div class=\"apexcharts-tooltip-candlestick\"><div>Open: <span class=\"value\">' + s.globals.seriesCandleO[e][i] + '</span></div><div>High: <span class=\"value\">' + s.globals.seriesCandleH[e][i] + '</span></div><div>Low: <span class=\"value\">' + s.globals.seriesCandleL[e][i] + '</span></div><div>Close: <span class=\"value\">' + s.globals.seriesCandleC[e][i] + \"</span></div></div>\";\n            }\n          },\n          states: {\n            active: {\n              filter: {\n                type: \"none\"\n              }\n            }\n          },\n          xaxis: {\n            crosshairs: {\n              width: 1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"rangeBar\",\n      value: function value() {\n        return {\n          stroke: {\n            width: 0\n          },\n          plotOptions: {\n            bar: {\n              dataLabels: {\n                position: \"center\"\n              }\n            }\n          },\n          dataLabels: {\n            enabled: !1,\n            formatter: function formatter(t, e) {\n              e.ctx;\n              var i = e.seriesIndex,\n                  s = e.dataPointIndex,\n                  a = e.w,\n                  n = a.globals.seriesRangeStart[i][s];\n              return a.globals.seriesRangeEnd[i][s] - n;\n            },\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          tooltip: {\n            shared: !1,\n            followCursor: !0,\n            custom: function custom(t) {\n              var e = t.ctx,\n                  i = t.seriesIndex,\n                  s = t.dataPointIndex,\n                  a = t.w,\n                  n = a.globals.seriesRangeStart[i][s],\n                  r = a.globals.seriesRangeEnd[i][s],\n                  o = \"\",\n                  l = \"\",\n                  h = a.globals.colors[i];\n              if (void 0 === a.config.tooltip.x.formatter) {\n                if (\"datetime\" === a.config.xaxis.type) {\n                  var c = new m(e);\n                  o = c.formatDate(new Date(n), a.config.tooltip.x.format, !0, !0), l = c.formatDate(new Date(r), a.config.tooltip.x.format, !0, !0);\n                } else o = n, l = r;\n              } else o = a.config.tooltip.x.formatter(n), l = a.config.tooltip.x.formatter(r);\n              var d = a.globals.labels[s];\n              return '<div class=\"apexcharts-tooltip-rangebar\"><div> <span class=\"series-name\" style=\"color: ' + h + '\">' + (a.config.series[i].name ? a.config.series[i].name : \"\") + '</span></div><div> <span class=\"category\">' + d + ': </span> <span class=\"value start-value\">' + o + '</span> <span class=\"separator\">-</span> <span class=\"value end-value\">' + l + \"</span></div></div>\";\n            }\n          },\n          xaxis: {\n            tooltip: {\n              enabled: !1\n            },\n            crosshairs: {\n              stroke: {\n                width: 0\n              }\n            }\n          }\n        };\n      }\n    }, {\n      key: \"area\",\n      value: function value() {\n        return {\n          stroke: {\n            width: 4\n          },\n          fill: {\n            type: \"gradient\",\n            gradient: {\n              inverseColors: !1,\n              shade: \"light\",\n              type: \"vertical\",\n              opacityFrom: .65,\n              opacityTo: .5,\n              stops: [0, 100, 100]\n            }\n          },\n          markers: {\n            size: 0,\n            hover: {\n              sizeOffset: 6\n            }\n          },\n          tooltip: {\n            followCursor: !1\n          }\n        };\n      }\n    }, {\n      key: \"brush\",\n      value: function value(t) {\n        return d.extend(t, {\n          chart: {\n            toolbar: {\n              autoSelected: \"selection\",\n              show: !1\n            },\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          stroke: {\n            width: 1\n          },\n          tooltip: {\n            enabled: !1\n          },\n          xaxis: {\n            tooltip: {\n              enabled: !1\n            }\n          }\n        });\n      }\n    }, {\n      key: \"stacked100\",\n      value: function value() {\n        var t = this;\n        this.opts.dataLabels = this.opts.dataLabels || {}, this.opts.dataLabels.formatter = this.opts.dataLabels.formatter || void 0;\n        var e = this.opts.dataLabels.formatter;\n        this.opts.yaxis.forEach(function (e, i) {\n          t.opts.yaxis[i].min = 0, t.opts.yaxis[i].max = 100;\n        }), \"bar\" === this.opts.chart.type && (this.opts.dataLabels.formatter = e || function (t) {\n          return \"number\" == typeof t && t ? t.toFixed(0) + \"%\" : t;\n        });\n      }\n    }, {\n      key: \"bubble\",\n      value: function value() {\n        return {\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0\n          },\n          xaxis: {\n            crosshairs: {\n              width: 0\n            }\n          },\n          fill: {\n            type: \"solid\",\n            gradient: {\n              shade: \"light\",\n              inverse: !0,\n              shadeIntensity: .55,\n              opacityFrom: .4,\n              opacityTo: .8\n            }\n          }\n        };\n      }\n    }, {\n      key: \"scatter\",\n      value: function value() {\n        return {\n          dataLabels: {\n            enabled: !1\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0\n          },\n          markers: {\n            size: 6,\n            strokeWidth: 2,\n            hover: {\n              sizeOffset: 2\n            }\n          }\n        };\n      }\n    }, {\n      key: \"heatmap\",\n      value: function value() {\n        return {\n          chart: {\n            stacked: !1,\n            zoom: {\n              enabled: !1\n            }\n          },\n          fill: {\n            opacity: 1\n          },\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          tooltip: {\n            followCursor: !0,\n            marker: {\n              show: !1\n            },\n            x: {\n              show: !1\n            }\n          },\n          legend: {\n            position: \"top\",\n            markers: {\n              shape: \"square\",\n              size: 10,\n              offsetY: 2\n            }\n          },\n          grid: {\n            padding: {\n              right: 20\n            }\n          }\n        };\n      }\n    }, {\n      key: \"pie\",\n      value: function value() {\n        return {\n          chart: {\n            toolbar: {\n              show: !1\n            }\n          },\n          plotOptions: {\n            pie: {\n              donut: {\n                labels: {\n                  show: !1\n                }\n              }\n            }\n          },\n          dataLabels: {\n            formatter: function formatter(t) {\n              return t.toFixed(1) + \"%\";\n            },\n            style: {\n              colors: [\"#fff\"]\n            },\n            dropShadow: {\n              enabled: !0\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          fill: {\n            opacity: 1,\n            gradient: {\n              shade: \"dark\",\n              shadeIntensity: .35,\n              inverseColors: !1,\n              stops: [0, 100, 100]\n            }\n          },\n          padding: {\n            right: 0,\n            left: 0\n          },\n          tooltip: {\n            theme: \"dark\",\n            fillSeriesColor: !0\n          },\n          legend: {\n            position: \"right\"\n          }\n        };\n      }\n    }, {\n      key: \"donut\",\n      value: function value() {\n        return {\n          chart: {\n            toolbar: {\n              show: !1\n            }\n          },\n          dataLabels: {\n            formatter: function formatter(t) {\n              return t.toFixed(1) + \"%\";\n            },\n            style: {\n              colors: [\"#fff\"]\n            },\n            dropShadow: {\n              enabled: !0\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          fill: {\n            opacity: 1,\n            gradient: {\n              shade: \"dark\",\n              shadeIntensity: .4,\n              inverseColors: !1,\n              type: \"vertical\",\n              opacityFrom: 1,\n              opacityTo: 1,\n              stops: [70, 98, 100]\n            }\n          },\n          padding: {\n            right: 0,\n            left: 0\n          },\n          tooltip: {\n            theme: \"dark\",\n            fillSeriesColor: !0\n          },\n          legend: {\n            position: \"right\"\n          }\n        };\n      }\n    }, {\n      key: \"radar\",\n      value: function value() {\n        return this.opts.yaxis[0].labels.style.fontSize = \"13px\", this.opts.yaxis[0].labels.offsetY = 6, {\n          dataLabels: {\n            enabled: !0,\n            style: {\n              colors: [\"#a8a8a8\"],\n              fontSize: \"11px\"\n            }\n          },\n          stroke: {\n            width: 2\n          },\n          markers: {\n            size: 3,\n            strokeWidth: 1,\n            strokeOpacity: 1\n          },\n          fill: {\n            opacity: .2\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0,\n            followCursor: !0\n          },\n          grid: {\n            show: !1\n          },\n          xaxis: {\n            tooltip: {\n              enabled: !1\n            },\n            crosshairs: {\n              show: !1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"radialBar\",\n      value: function value() {\n        return {\n          chart: {\n            animations: {\n              dynamicAnimation: {\n                enabled: !0,\n                speed: 800\n              }\n            },\n            toolbar: {\n              show: !1\n            }\n          },\n          fill: {\n            gradient: {\n              shade: \"dark\",\n              shadeIntensity: .4,\n              inverseColors: !1,\n              type: \"diagonal2\",\n              opacityFrom: 1,\n              opacityTo: 1,\n              stops: [70, 98, 100]\n            }\n          },\n          padding: {\n            right: 0,\n            left: 0\n          },\n          legend: {\n            show: !1,\n            position: \"right\"\n          },\n          tooltip: {\n            enabled: !1,\n            fillSeriesColor: !0\n          }\n        };\n      }\n    }], [{\n      key: \"convertCatToNumeric\",\n      value: function value(t) {\n        t.xaxis.type = \"numeric\", t.xaxis.convertedCatToNumeric = !0, t.xaxis.labels = t.xaxis.labels || {}, t.xaxis.labels.formatter = t.xaxis.labels.formatter || function (t) {\n          return t;\n        }, t.chart = t.chart || {}, t.chart.zoom = t.chart.zoom || window.Apex.chart && window.Apex.chart.zoom || {};\n        var e = t.xaxis.labels.formatter,\n            i = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;\n        return i && i.length && (t.xaxis.labels.formatter = function (t) {\n          return e(i[t - 1]);\n        }), t.xaxis.categories = [], t.labels = [], t.chart.zoom.enabled = t.chart.zoom.enabled || !1, t;\n      }\n    }]), t;\n  }(),\n      y = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"getStackedSeriesTotals\",\n      value: function value() {\n        for (var t = this.w, e = [], i = 0; i < t.globals.series[t.globals.maxValsInArrayIndex].length; i++) {\n          for (var s = 0, a = 0; a < t.globals.series.length; a++) {\n            s += t.globals.series[a][i];\n          }\n\n          e.push(s);\n        }\n\n        return t.globals.stackedSeriesTotals = e, e;\n      }\n    }, {\n      key: \"getSeriesTotalByIndex\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n        return null === t ? this.w.config.series.reduce(function (t, e) {\n          return t + e;\n        }, 0) : this.w.globals.series[t].reduce(function (t, e) {\n          return t + e;\n        }, 0);\n      }\n    }, {\n      key: \"isSeriesNull\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n        return 0 === (null === t ? this.w.config.series.filter(function (t) {\n          return null !== t;\n        }) : this.w.globals.series[t].filter(function (t) {\n          return null !== t;\n        })).length;\n      }\n    }, {\n      key: \"seriesHaveSameValues\",\n      value: function value(t) {\n        return this.w.globals.series[t].every(function (t, e, i) {\n          return t === i[0];\n        });\n      }\n    }, {\n      key: \"getLargestSeries\",\n      value: function value() {\n        var t = this.w;\n        t.globals.maxValsInArrayIndex = t.globals.series.map(function (t) {\n          return t.length;\n        }).indexOf(Math.max.apply(Math, t.globals.series.map(function (t) {\n          return t.length;\n        })));\n      }\n    }, {\n      key: \"getLargestMarkerSize\",\n      value: function value() {\n        var t = this.w,\n            e = 0;\n        return t.globals.markers.size.forEach(function (t) {\n          e = Math.max(e, t);\n        }), t.globals.markers.largestSize = e, e;\n      }\n    }, {\n      key: \"getSeriesTotals\",\n      value: function value() {\n        var t = this.w;\n        t.globals.seriesTotals = t.globals.series.map(function (t, e) {\n          var i = 0;\n          if (Array.isArray(t)) for (var s = 0; s < t.length; s++) {\n            i += t[s];\n          } else i += t;\n          return i;\n        });\n      }\n    }, {\n      key: \"getSeriesTotalsXRange\",\n      value: function value(t, e) {\n        var i = this.w;\n        return i.globals.series.map(function (s, a) {\n          for (var n = 0, r = 0; r < s.length; r++) {\n            i.globals.seriesX[a][r] > t && i.globals.seriesX[a][r] < e && (n += s[r]);\n          }\n\n          return n;\n        });\n      }\n    }, {\n      key: \"getPercentSeries\",\n      value: function value() {\n        var t = this.w;\n        t.globals.seriesPercent = t.globals.series.map(function (e, i) {\n          var s = [];\n          if (Array.isArray(e)) for (var a = 0; a < e.length; a++) {\n            var n = t.globals.stackedSeriesTotals[a],\n                r = 100 * e[a] / n;\n            s.push(r);\n          } else {\n            var o = 100 * e / t.globals.seriesTotals.reduce(function (t, e) {\n              return t + e;\n            }, 0);\n            s.push(o);\n          }\n          return s;\n        });\n      }\n    }, {\n      key: \"getCalculatedRatios\",\n      value: function value() {\n        var t,\n            e,\n            i,\n            s,\n            a,\n            n = this.w.globals,\n            r = [],\n            o = [],\n            l = .1,\n            h = 0;\n        if (n.yRange = [], n.isMultipleYAxis) for (var c = 0; c < n.minYArr.length; c++) {\n          n.yRange.push(Math.abs(n.minYArr[c] - n.maxYArr[c])), o.push(0);\n        } else n.yRange.push(Math.abs(n.minY - n.maxY));\n        n.xRange = Math.abs(n.maxX - n.minX), n.zRange = Math.abs(n.maxZ - n.minZ);\n\n        for (var d = 0; d < n.yRange.length; d++) {\n          r.push(n.yRange[d] / n.gridHeight);\n        }\n\n        if (e = n.xRange / n.gridWidth, i = Math.abs(n.initialmaxX - n.initialminX) / n.gridWidth, t = n.yRange / n.gridWidth, s = n.xRange / n.gridHeight, a = n.zRange / n.gridHeight * 16, n.minY !== Number.MIN_VALUE && 0 !== Math.abs(n.minY) && (n.hasNegs = !0), n.isMultipleYAxis) {\n          o = [];\n\n          for (var u = 0; u < r.length; u++) {\n            o.push(-n.minYArr[u] / r[u]);\n          }\n        } else o.push(-n.minY / r[0]), n.minY !== Number.MIN_VALUE && 0 !== Math.abs(n.minY) && (l = -n.minY / t, h = n.minX / e);\n\n        return {\n          yRatio: r,\n          invertedYRatio: t,\n          zRatio: a,\n          xRatio: e,\n          initialXRatio: i,\n          invertedXRatio: s,\n          baseLineInvertedY: l,\n          baseLineY: o,\n          baseLineX: h\n        };\n      }\n    }, {\n      key: \"getLogSeries\",\n      value: function value(t) {\n        var e = this.w;\n        return e.globals.seriesLog = t.map(function (t, i) {\n          return e.config.yaxis[i] && e.config.yaxis[i].logarithmic ? t.map(function (t) {\n            return null === t ? null : (Math.log(t) - Math.log(e.globals.minYArr[i])) / (Math.log(e.globals.maxYArr[i]) - Math.log(e.globals.minYArr[i]));\n          }) : t;\n        }), e.globals.seriesLog;\n      }\n    }, {\n      key: \"getLogYRatios\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            s = this.w.globals;\n        return s.yLogRatio = t.slice(), s.logYRange = s.yRange.map(function (t, a) {\n          if (i.config.yaxis[a] && e.w.config.yaxis[a].logarithmic) {\n            var n,\n                r = -Number.MAX_VALUE,\n                o = Number.MIN_VALUE;\n            return s.seriesLog.forEach(function (t, e) {\n              t.forEach(function (t) {\n                i.config.yaxis[e] && i.config.yaxis[e].logarithmic && (r = Math.max(t, r), o = Math.min(t, o));\n              });\n            }), n = Math.pow(s.yRange[a], Math.abs(o - r) / s.yRange[a]), s.yLogRatio[a] = n / s.gridHeight, n;\n          }\n        }), s.yLogRatio;\n      }\n    }], [{\n      key: \"checkComboSeries\",\n      value: function value(t) {\n        var e = !1,\n            i = !1;\n        return t.length && void 0 !== t[0].type && (e = !0, t.forEach(function (t) {\n          \"bar\" !== t.type && \"column\" !== t.type || (i = !0);\n        })), {\n          comboCharts: e,\n          comboChartsHasBars: i\n        };\n      }\n    }, {\n      key: \"extendArrayProps\",\n      value: function value(t, e) {\n        return e.yaxis && (e = t.extendYAxis(e)), e.annotations && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), e.annotations.xaxis && (e = t.extendXAxisAnnotations(e)), e.annotations.points && (e = t.extendPointAnnotations(e))), e;\n      }\n    }]), t;\n  }(),\n      w = function () {\n    function i(t) {\n      e(this, i), this.opts = t;\n    }\n\n    return s(i, [{\n      key: \"init\",\n      value: function value() {\n        var e = this.opts,\n            i = new x(),\n            s = new v(e);\n        this.chartType = e.chart.type, \"histogram\" === this.chartType && (e.chart.type = \"bar\", e = d.extend({\n          plotOptions: {\n            bar: {\n              columnWidth: \"99.99%\"\n            }\n          }\n        }, e)), e.series = this.checkEmptySeries(e.series), e = this.extendYAxis(e), e = this.extendAnnotations(e);\n        var a = i.init(),\n            n = {};\n\n        if (e && \"object\" === t(e)) {\n          var r = {};\n\n          switch (this.chartType) {\n            case \"line\":\n              r = s.line();\n              break;\n\n            case \"area\":\n              r = s.area();\n              break;\n\n            case \"bar\":\n              r = s.bar();\n              break;\n\n            case \"candlestick\":\n              r = s.candlestick();\n              break;\n\n            case \"rangeBar\":\n              r = s.rangeBar();\n              break;\n\n            case \"histogram\":\n              r = s.bar();\n              break;\n\n            case \"bubble\":\n              r = s.bubble();\n              break;\n\n            case \"scatter\":\n              r = s.scatter();\n              break;\n\n            case \"heatmap\":\n              r = s.heatmap();\n              break;\n\n            case \"pie\":\n              r = s.pie();\n              break;\n\n            case \"donut\":\n              r = s.donut();\n              break;\n\n            case \"radar\":\n              r = s.radar();\n              break;\n\n            case \"radialBar\":\n              r = s.radialBar();\n              break;\n\n            default:\n              r = s.line();\n          }\n\n          e.chart.brush && e.chart.brush.enabled && (r = s.brush(r)), e.chart.stacked && \"100%\" === e.chart.stackType && s.stacked100(), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(e), e.xaxis = e.xaxis || window.Apex.xaxis || {};\n          var o = y.checkComboSeries(e.series);\n          \"line\" !== e.chart.type && \"area\" !== e.chart.type && \"scatter\" !== e.chart.type || o.comboChartsHasBars || \"datetime\" === e.xaxis.type || \"numeric\" === e.xaxis.type || \"between\" === e.xaxis.tickPlacement || (e = v.convertCatToNumeric(e)), (e.chart.sparkline && e.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (r = s.sparkline(r)), n = d.extend(a, r);\n        }\n\n        var l = d.extend(n, window.Apex);\n        return a = d.extend(l, e), a = this.handleUserInputErrors(a);\n      }\n    }, {\n      key: \"extendYAxis\",\n      value: function value(t) {\n        var e = new x();\n        return void 0 === t.yaxis && (t.yaxis = {}), t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = d.extend(t.yaxis, window.Apex.yaxis)), t.yaxis.constructor !== Array ? t.yaxis = [d.extend(e.yAxis, t.yaxis)] : t.yaxis = d.extendArray(t.yaxis, e.yAxis), t;\n      }\n    }, {\n      key: \"extendAnnotations\",\n      value: function value(t) {\n        return void 0 === t.annotations && (t.annotations = {}, t.annotations.yaxis = [], t.annotations.xaxis = [], t.annotations.points = []), t = this.extendYAxisAnnotations(t), t = this.extendXAxisAnnotations(t), t = this.extendPointAnnotations(t);\n      }\n    }, {\n      key: \"extendYAxisAnnotations\",\n      value: function value(t) {\n        var e = new x();\n        return t.annotations.yaxis = d.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation), t;\n      }\n    }, {\n      key: \"extendXAxisAnnotations\",\n      value: function value(t) {\n        var e = new x();\n        return t.annotations.xaxis = d.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation), t;\n      }\n    }, {\n      key: \"extendPointAnnotations\",\n      value: function value(t) {\n        var e = new x();\n        return t.annotations.points = d.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation), t;\n      }\n    }, {\n      key: \"checkForDarkTheme\",\n      value: function value(t) {\n        t.theme && \"dark\" === t.theme.mode && (t.tooltip || (t.tooltip = {}), \"light\" !== t.tooltip.theme && (t.tooltip.theme = \"dark\"), t.chart.foreColor || (t.chart.foreColor = \"#f6f7f8\"), t.theme.palette || (t.theme.palette = \"palette4\"));\n      }\n    }, {\n      key: \"checkEmptySeries\",\n      value: function value(t) {\n        return 0 === t.length ? [{\n          data: []\n        }] : t;\n      }\n    }, {\n      key: \"handleUserInputErrors\",\n      value: function value(t) {\n        var e = t;\n        if (e.tooltip.shared && e.tooltip.intersect) throw new Error(\"tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.\");\n\n        if (e.chart.scroller && console.warn(\"Scroller has been deprecated since v2.0.0. Please remove the configuration for chart.scroller\"), (\"bar\" === e.chart.type || \"rangeBar\" === e.chart.type) && e.plotOptions.bar.horizontal) {\n          if (e.yaxis.length > 1) throw new Error(\"Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false\");\n          e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), e.xaxis.tooltip.enabled = !1, e.yaxis[0].tooltip.enabled = !1, e.chart.zoom.enabled = !1;\n        }\n\n        return \"bar\" !== e.chart.type && \"rangeBar\" !== e.chart.type || e.tooltip.shared && (\"barWidth\" === e.xaxis.crosshairs.width && e.series.length > 1 && (console.warn('crosshairs.width = \"barWidth\" is only supported in single series, not in a multi-series barChart.'), e.xaxis.crosshairs.width = \"tickWidth\"), e.plotOptions.bar.horizontal && (e.states.hover.type = \"none\", e.tooltip.shared = !1), e.tooltip.followCursor || (console.warn(\"followCursor option in shared columns cannot be turned off. Please set %ctooltip.followCursor: true\", \"color: blue;\"), e.tooltip.followCursor = !0)), \"candlestick\" === e.chart.type && e.yaxis[0].reversed && (console.warn(\"Reversed y-axis in candlestick chart is not supported.\"), e.yaxis[0].reversed = !1), e.chart.group && 0 === e.yaxis[0].labels.minWidth && console.warn(\"It looks like you have multiple charts in synchronization. You must provide yaxis.labels.minWidth which must be EQUAL for all grouped charts to prevent incorrect behaviour.\"), Array.isArray(e.stroke.width) && \"line\" !== e.chart.type && \"area\" !== e.chart.type && (console.warn(\"stroke.width option accepts array only for line and area charts. Reverted back to Number\"), e.stroke.width = e.stroke.width[0]), e;\n      }\n    }]), i;\n  }(),\n      k = function () {\n    function t() {\n      e(this, t);\n    }\n\n    return s(t, [{\n      key: \"globalVars\",\n      value: function value(t) {\n        return {\n          chartID: null,\n          cuid: null,\n          events: {\n            beforeMount: [],\n            mounted: [],\n            updated: [],\n            clicked: [],\n            selection: [],\n            dataPointSelection: [],\n            zoomed: [],\n            scrolled: []\n          },\n          colors: [],\n          clientX: null,\n          clientY: null,\n          fill: {\n            colors: []\n          },\n          stroke: {\n            colors: []\n          },\n          dataLabels: {\n            style: {\n              colors: []\n            }\n          },\n          radarPolygons: {\n            fill: {\n              colors: []\n            }\n          },\n          markers: {\n            colors: [],\n            size: t.markers.size,\n            largestSize: 0\n          },\n          animationEnded: !1,\n          isTouchDevice: \"ontouchstart\" in window || navigator.msMaxTouchPoints,\n          isDirty: !1,\n          initialConfig: null,\n          lastXAxis: [],\n          lastYAxis: [],\n          series: [],\n          seriesRangeStart: [],\n          seriesRangeEnd: [],\n          seriesPercent: [],\n          seriesTotals: [],\n          stackedSeriesTotals: [],\n          seriesX: [],\n          seriesZ: [],\n          labels: [],\n          timelineLabels: [],\n          invertedTimelineLabels: [],\n          seriesNames: [],\n          noLabelsProvided: !1,\n          allSeriesCollapsed: !1,\n          collapsedSeries: [],\n          collapsedSeriesIndices: [],\n          ancillaryCollapsedSeries: [],\n          ancillaryCollapsedSeriesIndices: [],\n          risingSeries: [],\n          dataFormatXNumeric: !1,\n          selectedDataPoints: [],\n          ignoreYAxisIndexes: [],\n          padHorizontal: 0,\n          maxValsInArrayIndex: 0,\n          zoomEnabled: \"zoom\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,\n          panEnabled: \"pan\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,\n          selectionEnabled: \"selection\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,\n          yaxis: null,\n          minY: Number.MIN_VALUE,\n          maxY: -Number.MAX_VALUE,\n          minYArr: [],\n          maxYArr: [],\n          maxX: -Number.MAX_VALUE,\n          initialmaxX: -Number.MAX_VALUE,\n          minX: Number.MIN_VALUE,\n          initialminX: Number.MIN_VALUE,\n          minZ: Number.MIN_VALUE,\n          maxZ: -Number.MAX_VALUE,\n          minXDiff: Number.MAX_VALUE,\n          mousedown: !1,\n          lastClientPosition: {},\n          visibleXRange: void 0,\n          yRange: [],\n          zRange: 0,\n          xRange: 0,\n          yValueDecimal: 0,\n          total: 0,\n          SVGNS: \"http://www.w3.org/2000/svg\",\n          svgWidth: 0,\n          svgHeight: 0,\n          noData: !1,\n          locale: {},\n          dom: {},\n          memory: {\n            methodsToExec: []\n          },\n          shouldAnimate: !0,\n          skipLastTimelinelabel: !1,\n          delayedElements: [],\n          axisCharts: !0,\n          isXNumeric: !1,\n          isDataXYZ: !1,\n          resized: !1,\n          resizeTimer: null,\n          comboCharts: !1,\n          comboChartsHasBars: !1,\n          dataChanged: !1,\n          previousPaths: [],\n          seriesXvalues: [],\n          seriesYvalues: [],\n          seriesCandleO: [],\n          seriesCandleH: [],\n          seriesCandleL: [],\n          seriesCandleC: [],\n          allSeriesHasEqualX: !0,\n          dataPoints: 0,\n          pointsArray: [],\n          dataLabelsRects: [],\n          lastDrawnDataLabelsIndexes: [],\n          hasNullValues: !1,\n          easing: null,\n          zoomed: !1,\n          gridWidth: 0,\n          gridHeight: 0,\n          yAxisScale: [],\n          xAxisScale: null,\n          xAxisTicksPositions: [],\n          timescaleTicks: [],\n          rotateXLabels: !1,\n          defaultLabels: !1,\n          xLabelFormatter: void 0,\n          yLabelFormatters: [],\n          xaxisTooltipFormatter: void 0,\n          ttKeyFormatter: void 0,\n          ttVal: void 0,\n          ttZFormatter: void 0,\n          LINE_HEIGHT_RATIO: 1.618,\n          xAxisLabelsHeight: 0,\n          yAxisLabelsWidth: 0,\n          scaleX: 1,\n          scaleY: 1,\n          translateX: 0,\n          translateY: 0,\n          translateYAxisX: [],\n          yLabelsCoords: [],\n          yTitleCoords: [],\n          yAxisWidths: [],\n          translateXAxisY: 0,\n          translateXAxisX: 0,\n          tooltip: null,\n          tooltipOpts: null\n        };\n      }\n    }, {\n      key: \"init\",\n      value: function value(t) {\n        var e = this.globalVars(t);\n        return e.initialConfig = d.extend({}, t), e.initialSeries = JSON.parse(JSON.stringify(e.initialConfig.series)), e.lastXAxis = JSON.parse(JSON.stringify(e.initialConfig.xaxis)), e.lastYAxis = JSON.parse(JSON.stringify(e.initialConfig.yaxis)), e;\n      }\n    }]), t;\n  }(),\n      A = function () {\n    function t(i) {\n      e(this, t), this.opts = i;\n    }\n\n    return s(t, [{\n      key: \"init\",\n      value: function value() {\n        var t = new w(this.opts).init();\n        return {\n          config: t,\n          globals: new k().init(t)\n        };\n      }\n    }]), t;\n  }(),\n      S = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.opts = null, this.seriesIndex = 0;\n    }\n\n    return s(t, [{\n      key: \"clippedImgArea\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.config,\n            s = parseInt(e.globals.gridWidth),\n            a = parseInt(e.globals.gridHeight),\n            n = s > a ? s : a,\n            r = t.image,\n            o = 0,\n            l = 0;\n        void 0 === t.width && void 0 === t.height ? void 0 !== i.fill.image.width && void 0 !== i.fill.image.height ? (o = i.fill.image.width + 1, l = i.fill.image.height) : (o = n + 1, l = n) : (o = t.width, l = t.height);\n        var h = document.createElementNS(e.globals.SVGNS, \"pattern\");\n        f.setAttrs(h, {\n          id: t.patternID,\n          patternUnits: t.patternUnits ? t.patternUnits : \"userSpaceOnUse\",\n          width: o + \"px\",\n          height: l + \"px\"\n        });\n        var c = document.createElementNS(e.globals.SVGNS, \"image\");\n        h.appendChild(c), c.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", r), f.setAttrs(c, {\n          x: 0,\n          y: 0,\n          preserveAspectRatio: \"none\",\n          width: o + \"px\",\n          height: l + \"px\"\n        }), c.style.opacity = t.opacity, e.globals.dom.elDefs.node.appendChild(h);\n      }\n    }, {\n      key: \"getSeriesIndex\",\n      value: function value(t) {\n        var e = this.w;\n        return \"bar\" === e.config.chart.type && e.config.plotOptions.bar.distributed || \"heatmap\" === e.config.chart.type ? this.seriesIndex = t.seriesNumber : this.seriesIndex = t.seriesNumber % e.globals.series.length, this.seriesIndex;\n      }\n    }, {\n      key: \"fillPath\",\n      value: function value(t) {\n        var e = this.w;\n        this.opts = t;\n        var i,\n            s,\n            a,\n            n = this.w.config;\n        this.seriesIndex = this.getSeriesIndex(t);\n        var r = this.getFillColors(),\n            o = r[this.seriesIndex];\n        \"function\" == typeof o && (o = o({\n          seriesIndex: this.seriesIndex,\n          value: t.value,\n          w: e\n        }));\n        var l = this.getFillType(this.seriesIndex),\n            h = Array.isArray(n.fill.opacity) ? n.fill.opacity[this.seriesIndex] : n.fill.opacity,\n            c = o;\n        return t.color && (o = t.color), -1 === o.indexOf(\"rgb\") ? c = d.hexToRgba(o, h) : o.indexOf(\"rgba\") > -1 && (h = \"0.\" + d.getOpacityFromRGBA(r[this.seriesIndex])), \"pattern\" === l && (s = this.handlePatternFill(s, o, h, c)), \"gradient\" === l && (a = this.handleGradientFill(a, o, h, this.seriesIndex)), n.fill.image.src.length > 0 && \"image\" === l ? t.seriesNumber < n.fill.image.src.length ? (this.clippedImgArea({\n          opacity: h,\n          image: n.fill.image.src[t.seriesNumber],\n          patternUnits: t.patternUnits,\n          patternID: \"pattern\".concat(e.globals.cuid).concat(t.seriesNumber + 1)\n        }), i = \"url(#pattern\".concat(e.globals.cuid).concat(t.seriesNumber + 1, \")\")) : i = c : i = \"gradient\" === l ? a : \"pattern\" === l ? s : c, t.solid && (i = c), i;\n      }\n    }, {\n      key: \"getFillType\",\n      value: function value(t) {\n        var e = this.w;\n        return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type;\n      }\n    }, {\n      key: \"getFillColors\",\n      value: function value() {\n        var t = this.w,\n            e = t.config,\n            i = this.opts,\n            s = [];\n        return t.globals.comboCharts ? \"line\" === t.config.series[this.seriesIndex].type ? t.globals.stroke.colors instanceof Array ? s = t.globals.stroke.colors : s.push(t.globals.stroke.colors) : t.globals.fill.colors instanceof Array ? s = t.globals.fill.colors : s.push(t.globals.fill.colors) : \"line\" === e.chart.type ? t.globals.stroke.colors instanceof Array ? s = t.globals.stroke.colors : s.push(t.globals.stroke.colors) : t.globals.fill.colors instanceof Array ? s = t.globals.fill.colors : s.push(t.globals.fill.colors), void 0 !== i.fillColors && (s = [], i.fillColors instanceof Array ? s = i.fillColors.slice() : s.push(i.fillColors)), s;\n      }\n    }, {\n      key: \"handlePatternFill\",\n      value: function value(t, e, i, s) {\n        var a = this.w.config,\n            n = this.opts,\n            r = new f(this.ctx),\n            o = void 0 === a.fill.pattern.strokeWidth ? Array.isArray(a.stroke.width) ? a.stroke.width[this.seriesIndex] : a.stroke.width : Array.isArray(a.fill.pattern.strokeWidth) ? a.fill.pattern.strokeWidth[this.seriesIndex] : a.fill.pattern.strokeWidth,\n            l = e;\n        a.fill.pattern.style instanceof Array ? t = void 0 !== a.fill.pattern.style[n.seriesNumber] ? r.drawPattern(a.fill.pattern.style[n.seriesNumber], a.fill.pattern.width, a.fill.pattern.height, l, o, i) : s : t = r.drawPattern(a.fill.pattern.style, a.fill.pattern.width, a.fill.pattern.height, l, o, i);\n        return t;\n      }\n    }, {\n      key: \"handleGradientFill\",\n      value: function value(t, e, i, s) {\n        var a,\n            n,\n            r = this.w.config,\n            o = this.opts,\n            l = new f(this.ctx),\n            h = new d(),\n            c = r.fill.gradient.type,\n            u = void 0 === r.fill.gradient.opacityFrom ? i : Array.isArray(r.fill.gradient.opacityFrom) ? r.fill.gradient.opacityFrom[s] : r.fill.gradient.opacityFrom,\n            g = void 0 === r.fill.gradient.opacityTo ? i : Array.isArray(r.fill.gradient.opacityTo) ? r.fill.gradient.opacityTo[s] : r.fill.gradient.opacityTo;\n\n        if (a = e, n = void 0 === r.fill.gradient.gradientToColors || 0 === r.fill.gradient.gradientToColors.length ? \"dark\" === r.fill.gradient.shade ? h.shadeColor(-1 * parseFloat(r.fill.gradient.shadeIntensity), e) : h.shadeColor(parseFloat(r.fill.gradient.shadeIntensity), e) : r.fill.gradient.gradientToColors[o.seriesNumber], r.fill.gradient.inverseColors) {\n          var p = a;\n          a = n, n = p;\n        }\n\n        return l.drawGradient(c, a, n, u, g, o.size, r.fill.gradient.stops, r.fill.gradient.colorStops, s);\n      }\n    }]), t;\n  }(),\n      C = function () {\n    function t(i, s) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"setGlobalMarkerSize\",\n      value: function value() {\n        var t = this.w;\n\n        if (t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [t.config.markers.size], t.globals.markers.size.length > 0) {\n          if (t.globals.markers.size.length < t.globals.series.length + 1) for (var e = 0; e <= t.globals.series.length; e++) {\n            void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0]);\n          }\n        } else t.globals.markers.size = t.config.series.map(function (e) {\n          return t.config.markers.size;\n        });\n      }\n    }, {\n      key: \"plotChartMarkers\",\n      value: function value(t, e, i) {\n        var s,\n            a = this,\n            n = this.w,\n            r = e,\n            o = t,\n            l = null,\n            h = new f(this.ctx);\n        if (n.globals.markers.size[e] > 0 && (l = h.group({\n          \"class\": \"apexcharts-series-markers\"\n        })).attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(n.globals.cuid, \")\")), o.x instanceof Array) for (var c = function c(t) {\n          var c = i;\n          1 === i && 0 === t && (c = 0), 1 === i && 1 === t && (c = 1);\n          var g = \"apexcharts-marker\";\n\n          if (\"line\" !== n.config.chart.type && \"area\" !== n.config.chart.type || n.globals.comboCharts || n.config.tooltip.intersect || (g += \" no-pointer-events\"), Array.isArray(n.config.markers.size) ? n.globals.markers.size[e] > 0 : n.config.markers.size > 0) {\n            d.isNumber(o.y[t]) ? g += \" w\".concat((Math.random() + 1).toString(36).substring(4)) : g = \"apexcharts-nullpoint\";\n            var f = a.getMarkerConfig(g, e);\n            n.config.markers.discrete.map(function (t) {\n              t.seriesIndex === e && t.dataPointIndex === c && (f.pointStrokeColor = t.strokeColor, f.pointFillColor = t.fillColor, f.pSize = t.size);\n            }), n.config.series[r].data[i] && (n.config.series[r].data[i].fillColor && (f.pointFillColor = n.config.series[r].data[i].fillColor), n.config.series[r].data[i].strokeColor && (f.pointStrokeColor = n.config.series[r].data[i].strokeColor)), (s = h.drawMarker(o.x[t], o.y[t], f)).attr(\"rel\", c), s.attr(\"j\", c), s.attr(\"index\", e), s.node.setAttribute(\"default-marker-size\", f.pSize), new u(a.ctx).setSelectionFilter(s, e, c), a.addEvents(s), l && l.add(s);\n          } else void 0 === n.globals.pointsArray[e] && (n.globals.pointsArray[e] = []), n.globals.pointsArray[e].push([o.x[t], o.y[t]]);\n        }, g = 0; g < o.x.length; g++) {\n          c(g);\n        }\n        return l;\n      }\n    }, {\n      key: \"getMarkerConfig\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = this.getMarkerStyle(e);\n        return {\n          pSize: i.globals.markers.size[e],\n          pRadius: i.config.markers.radius,\n          pWidth: i.config.markers.strokeWidth,\n          pointStrokeColor: s.pointStrokeColor,\n          pointFillColor: s.pointFillColor,\n          shape: i.config.markers.shape instanceof Array ? i.config.markers.shape[e] : i.config.markers.shape,\n          \"class\": t,\n          pointStrokeOpacity: i.config.markers.strokeOpacity,\n          pointFillOpacity: i.config.markers.fillOpacity,\n          seriesIndex: e\n        };\n      }\n    }, {\n      key: \"addEvents\",\n      value: function value(t) {\n        var e = new f(this.ctx);\n        t.node.addEventListener(\"mouseenter\", e.pathMouseEnter.bind(this.ctx, t)), t.node.addEventListener(\"mouseleave\", e.pathMouseLeave.bind(this.ctx, t)), t.node.addEventListener(\"mousedown\", e.pathMouseDown.bind(this.ctx, t)), t.node.addEventListener(\"touchstart\", e.pathMouseDown.bind(this.ctx, t), {\n          passive: !0\n        });\n      }\n    }, {\n      key: \"getMarkerStyle\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.globals.markers.colors,\n            s = e.config.markers.strokeColor || e.config.markers.strokeColors;\n        return {\n          pointStrokeColor: s instanceof Array ? s[t] : s,\n          pointFillColor: i instanceof Array ? i[t] : i\n        };\n      }\n    }]), t;\n  }(),\n      L = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.radiusSizes = [];\n    }\n\n    return s(t, [{\n      key: \"draw\",\n      value: function value(t, e, i) {\n        var s = this.w,\n            a = new f(this.ctx),\n            n = i.realIndex,\n            r = i.pointsPos,\n            o = i.zRatio,\n            l = i.elParent,\n            h = a.group({\n          \"class\": \"apexcharts-series-markers apexcharts-series-\".concat(s.config.chart.type)\n        });\n        if (h.attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(s.globals.cuid, \")\")), r.x instanceof Array) for (var c = 0; c < r.x.length; c++) {\n          var d = e + 1,\n              u = !0;\n          0 === e && 0 === c && (d = 0), 0 === e && 1 === c && (d = 1);\n          var g = 0,\n              p = s.globals.markers.size[n];\n          o !== 1 / 0 && (p = s.globals.seriesZ[n][d] / o, void 0 === this.radiusSizes[n] && this.radiusSizes.push([]), this.radiusSizes[n].push(p)), s.config.chart.animations.enabled || (g = p);\n          var x = r.x[c],\n              b = r.y[c];\n\n          if (g = g || 0, (0 === x && 0 === b || null === b || void 0 === s.globals.series[n][d]) && (u = !1), u) {\n            var m = this.drawPoint(x, b, g, p, n, d, e);\n            h.add(m);\n          }\n\n          l.add(h);\n        }\n      }\n    }, {\n      key: \"drawPoint\",\n      value: function value(t, e, i, s, a, n, r) {\n        var o = this.w,\n            l = a,\n            h = new g(this.ctx),\n            c = new u(this.ctx),\n            d = new S(this.ctx),\n            p = new C(this.ctx),\n            x = new f(this.ctx),\n            b = p.getMarkerConfig(\"apexcharts-marker\", l),\n            m = d.fillPath({\n          seriesNumber: a,\n          patternUnits: \"objectBoundingBox\",\n          value: o.globals.series[a][r]\n        }),\n            v = x.drawCircle(i);\n\n        if (o.config.series[l].data[n] && o.config.series[l].data[n].fillColor && (m = o.config.series[l].data[n].fillColor), v.attr({\n          cx: t,\n          cy: e,\n          fill: m,\n          stroke: b.pointStrokeColor,\n          strokeWidth: b.pWidth\n        }), o.config.chart.dropShadow.enabled) {\n          var y = o.config.chart.dropShadow;\n          c.dropShadow(v, y, a);\n        }\n\n        if (this.initialAnim && !o.globals.dataChanged) {\n          var w = 1;\n          o.globals.resized || (w = o.config.chart.animations.speed), h.animateCircleRadius(v, 0, s, w, o.globals.easing);\n        }\n\n        if (o.globals.dataChanged) if (this.dynamicAnim) {\n          var k,\n              A,\n              L,\n              z,\n              P = o.config.chart.animations.dynamicAnimation.speed;\n          null != (z = o.globals.previousPaths[a] && o.globals.previousPaths[a][r]) && (k = z.x, A = z.y, L = void 0 !== z.r ? z.r : s);\n\n          for (var M = 0; M < o.globals.collapsedSeries.length; M++) {\n            o.globals.collapsedSeries[M].index === a && (P = 1, s = 0);\n          }\n\n          0 === t && 0 === e && (s = 0), h.animateCircle(v, {\n            cx: k,\n            cy: A,\n            r: L\n          }, {\n            cx: t,\n            cy: e,\n            r: s\n          }, P, o.globals.easing);\n        } else v.attr({\n          r: s\n        });\n        return v.attr({\n          rel: n,\n          j: n,\n          index: a,\n          \"default-marker-size\": s\n        }), c.setSelectionFilter(v, a, n), p.addEvents(v), v.node.classList.add(\"apexcharts-marker\"), v;\n      }\n    }, {\n      key: \"centerTextInBubble\",\n      value: function value(t) {\n        var e = this.w;\n        return {\n          y: t += parseInt(e.config.dataLabels.style.fontSize) / 4\n        };\n      }\n    }]), t;\n  }(),\n      z = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"dataLabelsCorrection\",\n      value: function value(t, e, i, s, a, n, r) {\n        var o = this.w,\n            l = !1,\n            h = new f(this.ctx).getTextRects(i, r),\n            c = h.width,\n            d = h.height;\n        void 0 === o.globals.dataLabelsRects[s] && (o.globals.dataLabelsRects[s] = []), o.globals.dataLabelsRects[s].push({\n          x: t,\n          y: e,\n          width: c,\n          height: d\n        });\n        var u = o.globals.dataLabelsRects[s].length - 2,\n            g = void 0 !== o.globals.lastDrawnDataLabelsIndexes[s] ? o.globals.lastDrawnDataLabelsIndexes[s][o.globals.lastDrawnDataLabelsIndexes[s].length - 1] : 0;\n\n        if (void 0 !== o.globals.dataLabelsRects[s][u]) {\n          var p = o.globals.dataLabelsRects[s][g];\n          (t > p.x + p.width + 2 || e > p.y + p.height + 2 || t + c < p.x) && (l = !0);\n        }\n\n        return (0 === a || n) && (l = !0), {\n          x: t,\n          y: e,\n          drawnextLabel: l\n        };\n      }\n    }, {\n      key: \"drawDataLabel\",\n      value: function value(t, e, i) {\n        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : \"top\",\n            a = this.w,\n            n = new f(this.ctx),\n            r = a.config.dataLabels,\n            o = 0,\n            l = 0,\n            h = i,\n            c = null;\n        if (!r.enabled || t.x instanceof Array != !0) return c;\n        (c = n.group({\n          \"class\": \"apexcharts-data-labels\"\n        })).attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(a.globals.cuid, \")\"));\n\n        for (var d = 0; d < t.x.length; d++) {\n          if (o = t.x[d] + r.offsetX, l = t.y[d] + r.offsetY - a.globals.markers.size[e] - 5, \"bottom\" === s && (l = l + 2 * a.globals.markers.size[e] + 1.4 * parseInt(r.style.fontSize)), !isNaN(o)) {\n            1 === i && 0 === d && (h = 0), 1 === i && 1 === d && (h = 1);\n            var u = a.globals.series[e][h],\n                g = \"\";\n            if (\"bubble\" === a.config.chart.type) g = a.globals.seriesZ[e][h], l = t.y[d] + a.config.dataLabels.offsetY, l = new L(this.ctx).centerTextInBubble(l, e, h).y;else null != u && (g = a.config.dataLabels.formatter(u, {\n              ctx: this.ctx,\n              seriesIndex: e,\n              dataPointIndex: h,\n              w: a\n            }));\n            this.plotDataLabelsText({\n              x: o,\n              y: l,\n              text: g,\n              i: e,\n              j: h,\n              parent: c,\n              offsetCorrection: !0,\n              dataLabelsConfig: a.config.dataLabels\n            });\n          }\n        }\n\n        return c;\n      }\n    }, {\n      key: \"plotDataLabelsText\",\n      value: function value(t) {\n        var e = this.w,\n            i = new f(this.ctx),\n            s = t.x,\n            a = t.y,\n            n = t.i,\n            r = t.j,\n            o = t.text,\n            l = t.textAnchor,\n            h = t.parent,\n            c = t.dataLabelsConfig,\n            d = t.alwaysDrawDataLabel,\n            g = t.offsetCorrection;\n\n        if (!(Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(n) > -1)) {\n          var p = {\n            x: s,\n            y: a,\n            drawnextLabel: !0\n          };\n\n          if (g && (p = this.dataLabelsCorrection(s, a, o, n, r, d, parseInt(c.style.fontSize))), e.globals.zoomed || (s = p.x, a = p.y), p.drawnextLabel) {\n            var x = i.drawText({\n              width: 100,\n              height: parseInt(c.style.fontSize),\n              x: s,\n              y: a,\n              foreColor: e.globals.dataLabels.style.colors[n],\n              textAnchor: l || c.textAnchor,\n              text: o,\n              fontSize: c.style.fontSize,\n              fontFamily: c.style.fontFamily\n            });\n\n            if (x.attr({\n              \"class\": \"apexcharts-datalabel\",\n              cx: s,\n              cy: a\n            }), c.dropShadow.enabled) {\n              var b = c.dropShadow;\n              new u(this.ctx).dropShadow(x, b);\n            }\n\n            h.add(x), void 0 === e.globals.lastDrawnDataLabelsIndexes[n] && (e.globals.lastDrawnDataLabelsIndexes[n] = []), e.globals.lastDrawnDataLabelsIndexes[n].push(r);\n          }\n        }\n      }\n    }]), t;\n  }(),\n      P = function () {\n    function t(i, s) {\n      e(this, t), this.ctx = i, this.w = i.w;\n      var a = this.w;\n      this.barOptions = a.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = a.config.stroke.width, this.isNullValue = !1, this.xyRatios = s, null !== this.xyRatios && (this.xRatio = s.xRatio, this.yRatio = s.yRatio, this.invertedXRatio = s.invertedXRatio, this.invertedYRatio = s.invertedYRatio, this.baseLineY = s.baseLineY, this.baseLineInvertedY = s.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0;\n    }\n\n    return s(t, [{\n      key: \"draw\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new f(this.ctx),\n            a = new y(this.ctx, i);\n        t = a.getLogSeries(t), this.series = t, this.yRatio = a.getLogYRatios(this.yRatio), this.initVariables(t);\n        var n = s.group({\n          \"class\": \"apexcharts-bar-series apexcharts-plot-series\"\n        });\n        i.config.dataLabels.enabled && this.totalItems > i.config.plotOptions.bar.dataLabels.maxItems && console.warn(\"WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.\");\n\n        for (var r = 0, o = 0; r < t.length; r++, o++) {\n          var l,\n              h,\n              c,\n              u,\n              g = void 0,\n              p = void 0,\n              x = void 0,\n              b = void 0,\n              m = [],\n              v = [],\n              w = i.globals.comboCharts ? e[r] : r,\n              k = s.group({\n            \"class\": \"apexcharts-series\",\n            rel: r + 1,\n            seriesName: d.escapeString(i.globals.seriesNames[w]),\n            \"data:realIndex\": w\n          });\n          this.ctx.series.addCollapsedClassToSeries(k, w), t[r].length > 0 && (this.visibleI = this.visibleI + 1);\n          var A = 0,\n              S = 0,\n              C = 0;\n          this.yRatio.length > 1 && (this.yaxisIndex = w), this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed;\n          var L = this.initialPositions();\n          b = L.y, S = L.barHeight, h = L.yDivision, u = L.zeroW, x = L.x, C = L.barWidth, l = L.xDivision, c = L.zeroH, this.horizontal || v.push(x + C / 2);\n\n          for (var z = s.group({\n            \"class\": \"apexcharts-datalabels\"\n          }), P = 0, M = i.globals.dataPoints; P < i.globals.dataPoints; P++, M--) {\n            void 0 === this.series[r][P] || null === t[r][P] ? this.isNullValue = !0 : this.isNullValue = !1, i.config.stroke.show && (A = this.isNullValue ? 0 : Array.isArray(this.strokeWidth) ? this.strokeWidth[w] : this.strokeWidth);\n            var E = null;\n            this.isHorizontal ? (E = this.drawBarPaths({\n              indexes: {\n                i: r,\n                j: P,\n                realIndex: w,\n                bc: o\n              },\n              barHeight: S,\n              strokeWidth: A,\n              pathTo: g,\n              pathFrom: p,\n              zeroW: u,\n              x: x,\n              y: b,\n              yDivision: h,\n              elSeries: k\n            }), C = this.series[r][P] / this.invertedYRatio) : (E = this.drawColumnPaths({\n              indexes: {\n                i: r,\n                j: P,\n                realIndex: w,\n                bc: o\n              },\n              x: x,\n              y: b,\n              xDivision: l,\n              pathTo: g,\n              pathFrom: p,\n              barWidth: C,\n              zeroH: c,\n              strokeWidth: A,\n              elSeries: k\n            }), S = this.series[r][P] / this.yRatio[this.yaxisIndex]), g = E.pathTo, p = E.pathFrom, b = E.y, x = E.x, P > 0 && v.push(x + C / 2), m.push(b);\n            var T = this.getPathFillColor(t, r, P, w);\n            k = this.renderSeries({\n              realIndex: w,\n              pathFill: T,\n              j: P,\n              i: r,\n              pathFrom: p,\n              pathTo: g,\n              strokeWidth: A,\n              elSeries: k,\n              x: x,\n              y: b,\n              series: t,\n              barHeight: S,\n              barWidth: C,\n              elDataLabelsWrap: z,\n              visibleSeries: this.visibleI,\n              type: \"bar\"\n            });\n          }\n\n          i.globals.seriesXvalues[w] = v, i.globals.seriesYvalues[w] = m, n.add(k);\n        }\n\n        return n;\n      }\n    }, {\n      key: \"getPathFillColor\",\n      value: function value(t, e, i, s) {\n        var a = this.w,\n            n = new S(this.ctx),\n            r = null,\n            o = this.barOptions.distributed ? i : e;\n        this.barOptions.colors.ranges.length > 0 && this.barOptions.colors.ranges.map(function (s) {\n          t[e][i] >= s.from && t[e][i] <= s.to && (r = s.color);\n        });\n        return a.config.series[e].data[i] && a.config.series[e].data[i].fillColor && (r = a.config.series[e].data[i].fillColor), n.fillPath({\n          seriesNumber: this.barOptions.distributed ? o : s,\n          color: r,\n          value: t[e][i]\n        });\n      }\n    }, {\n      key: \"renderSeries\",\n      value: function value(t) {\n        var e = t.realIndex,\n            i = t.pathFill,\n            s = t.lineFill,\n            a = t.j,\n            n = t.i,\n            r = t.pathFrom,\n            o = t.pathTo,\n            l = t.strokeWidth,\n            h = t.elSeries,\n            c = t.x,\n            d = t.y,\n            g = t.series,\n            p = t.barHeight,\n            x = t.barWidth,\n            b = t.elDataLabelsWrap,\n            m = t.visibleSeries,\n            v = t.type,\n            y = this.w,\n            w = new f(this.ctx);\n        s || (s = this.barOptions.distributed ? y.globals.stroke.colors[a] : y.globals.stroke.colors[e]), y.config.series[n].data[a] && y.config.series[n].data[a].strokeColor && (s = y.config.series[n].data[a].strokeColor), this.isNullValue && (i = \"none\");\n        var k = a / y.config.chart.animations.animateGradually.delay * (y.config.chart.animations.speed / y.globals.dataPoints) / 2.4,\n            A = w.renderPaths({\n          i: n,\n          j: a,\n          realIndex: e,\n          pathFrom: r,\n          pathTo: o,\n          stroke: s,\n          strokeWidth: l,\n          strokeLineCap: y.config.stroke.lineCap,\n          fill: i,\n          animationDelay: k,\n          initialSpeed: y.config.chart.animations.speed,\n          dataChangeSpeed: y.config.chart.animations.dynamicAnimation.speed,\n          className: \"apexcharts-\".concat(v, \"-area\"),\n          id: \"apexcharts-\".concat(v, \"-area\")\n        });\n        A.attr(\"clip-path\", \"url(#gridRectMask\".concat(y.globals.cuid, \")\")), new u(this.ctx).setSelectionFilter(A, e, a), h.add(A);\n        var S = this.calculateDataLabelsPos({\n          x: c,\n          y: d,\n          i: n,\n          j: a,\n          series: g,\n          realIndex: e,\n          barHeight: p,\n          barWidth: x,\n          renderedPath: A,\n          visibleSeries: m\n        });\n        return null !== S && b.add(S), h.add(b), h;\n      }\n    }, {\n      key: \"initVariables\",\n      value: function value(t) {\n        var e = this.w;\n        this.series = t, this.totalItems = 0, this.seriesLen = 0, this.visibleI = -1, this.visibleItems = 1;\n\n        for (var i = 0; i < t.length; i++) {\n          if (t[i].length > 0 && (this.seriesLen = this.seriesLen + 1, this.totalItems += t[i].length), e.globals.isXNumeric) for (var s = 0; s < t[i].length; s++) {\n            e.globals.seriesX[i][s] > e.globals.minX && e.globals.seriesX[i][s] < e.globals.maxX && this.visibleItems++;\n          } else this.visibleItems = e.globals.dataPoints;\n        }\n\n        0 === this.seriesLen && (this.seriesLen = 1);\n      }\n    }, {\n      key: \"initialPositions\",\n      value: function value() {\n        var t,\n            e,\n            i,\n            s,\n            a,\n            n,\n            r,\n            o,\n            l = this.w;\n        return this.isHorizontal ? (a = (i = l.globals.gridHeight / l.globals.dataPoints) / this.seriesLen, l.globals.isXNumeric && (a = (i = l.globals.gridHeight / this.totalItems) / this.seriesLen), a = a * parseInt(this.barOptions.barHeight) / 100, o = this.baseLineInvertedY + l.globals.padHorizontal + (this.isReversed ? l.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e = (i - a * this.seriesLen) / 2) : (n = (s = l.globals.gridWidth / this.visibleItems) / this.seriesLen * parseInt(this.barOptions.columnWidth) / 100, l.globals.isXNumeric && (n = (s = l.globals.minXDiff / this.xRatio) / this.seriesLen * parseInt(this.barOptions.columnWidth) / 100), r = l.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? l.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t = l.globals.padHorizontal + (s - n * this.seriesLen) / 2), {\n          x: t,\n          y: e,\n          yDivision: i,\n          xDivision: s,\n          barHeight: a,\n          barWidth: n,\n          zeroH: r,\n          zeroW: o\n        };\n      }\n    }, {\n      key: \"drawBarPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.barHeight,\n            s = t.strokeWidth,\n            a = t.pathTo,\n            n = t.pathFrom,\n            r = t.zeroW,\n            o = t.x,\n            l = t.y,\n            h = t.yDivision,\n            c = t.elSeries,\n            d = this.w,\n            u = new f(this.ctx),\n            g = e.i,\n            p = e.j,\n            x = e.realIndex,\n            b = e.bc;\n        d.globals.isXNumeric && (l = (d.globals.seriesX[g][p] - d.globals.minX) / this.invertedXRatio - i);\n        var m = l + i * this.visibleI;\n        a = u.move(r, m), n = u.move(r, m), d.globals.previousPaths.length > 0 && (n = this.getPathFrom(x, p));\n        var v = {\n          barHeight: i,\n          strokeWidth: s,\n          barYPosition: m,\n          x: o = void 0 === this.series[g][p] || null === this.series[g][p] ? r : r + this.series[g][p] / this.invertedYRatio - 2 * (this.isReversed ? this.series[g][p] / this.invertedYRatio : 0),\n          zeroW: r\n        },\n            y = this.barEndingShape(d, v, this.series, g, p);\n\n        if (a = a + u.line(y.newX, m) + y.path + u.line(r, m + i - s) + u.line(r, m), n = n + u.line(r, m) + y.ending_p_from + u.line(r, m + i - s) + u.line(r, m + i - s) + u.line(r, m), d.globals.isXNumeric || (l += h), this.barOptions.colors.backgroundBarColors.length > 0 && 0 === g) {\n          b >= this.barOptions.colors.backgroundBarColors.length && (b = 0);\n          var w = this.barOptions.colors.backgroundBarColors[b],\n              k = u.drawRect(0, m - i * this.visibleI, d.globals.gridWidth, i * this.seriesLen, 0, w, this.barOptions.colors.backgroundBarOpacity);\n          c.add(k), k.node.classList.add(\"apexcharts-backgroundBar\");\n        }\n\n        return {\n          pathTo: a,\n          pathFrom: n,\n          x: o,\n          y: l,\n          barYPosition: m\n        };\n      }\n    }, {\n      key: \"drawColumnPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.x,\n            s = t.y,\n            a = t.xDivision,\n            n = t.pathTo,\n            r = t.pathFrom,\n            o = t.barWidth,\n            l = t.zeroH,\n            h = t.strokeWidth,\n            c = t.elSeries,\n            d = this.w,\n            u = new f(this.ctx),\n            g = e.i,\n            p = e.j,\n            x = e.realIndex,\n            b = e.bc;\n        d.globals.isXNumeric && (i = (d.globals.seriesX[g][p] - d.globals.minX) / this.xRatio - o / 2);\n        var m = i + o * this.visibleI;\n        n = u.move(m, l), r = u.move(m, l), d.globals.previousPaths.length > 0 && (r = this.getPathFrom(x, p));\n        var v = {\n          barWidth: o,\n          strokeWidth: h,\n          barXPosition: m,\n          y: s = void 0 === this.series[g][p] || null === this.series[g][p] ? l : l - this.series[g][p] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[g][p] / this.yRatio[this.yaxisIndex] : 0),\n          zeroH: l\n        },\n            y = this.barEndingShape(d, v, this.series, g, p);\n\n        if (n = n + u.line(m, y.newY) + y.path + u.line(m + o - h, l) + u.line(m - h / 2, l), r = r + u.line(m, l) + y.ending_p_from + u.line(m + o - h, l) + u.line(m + o - h, l) + u.line(m - h / 2, l), d.globals.isXNumeric || (i += a), this.barOptions.colors.backgroundBarColors.length > 0 && 0 === g) {\n          b >= this.barOptions.colors.backgroundBarColors.length && (b = 0);\n          var w = this.barOptions.colors.backgroundBarColors[b],\n              k = u.drawRect(m - o * this.visibleI, 0, o * this.seriesLen, d.globals.gridHeight, 0, w, this.barOptions.colors.backgroundBarOpacity);\n          c.add(k), k.node.classList.add(\"apexcharts-backgroundBar\");\n        }\n\n        return {\n          pathTo: n,\n          pathFrom: r,\n          x: i,\n          y: s,\n          barXPosition: m\n        };\n      }\n    }, {\n      key: \"getPathFrom\",\n      value: function value(t, e) {\n        for (var i, s = this.w, a = 0; a < s.globals.previousPaths.length; a++) {\n          var n = s.globals.previousPaths[a];\n          n.paths.length > 0 && parseInt(n.realIndex) === parseInt(t) && void 0 !== s.globals.previousPaths[a].paths[e] && (i = s.globals.previousPaths[a].paths[e].d);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"calculateDataLabelsPos\",\n      value: function value(t) {\n        var e = t.x,\n            i = t.y,\n            s = t.i,\n            a = t.j,\n            n = t.realIndex,\n            r = t.series,\n            o = t.barHeight,\n            l = t.barWidth,\n            h = t.visibleSeries,\n            c = t.renderedPath,\n            d = this.w,\n            u = new f(this.ctx),\n            g = Array.isArray(this.strokeWidth) ? this.strokeWidth[n] : this.strokeWidth,\n            p = e + parseFloat(l * h),\n            x = i + parseFloat(o * h);\n        d.globals.isXNumeric && !d.globals.isBarHorizontal && (p = e + parseFloat(l * (h + 1)) - g, x = i + parseFloat(o * (h + 1)) - g);\n        var b = e,\n            m = i,\n            v = {},\n            y = d.config.dataLabels,\n            w = this.barOptions.dataLabels,\n            k = y.offsetX,\n            A = y.offsetY,\n            S = {\n          width: 0,\n          height: 0\n        };\n        return d.config.dataLabels.enabled && (S = u.getTextRects(d.globals.yLabelFormatters[0](d.globals.maxY), parseInt(y.style.fontSize))), v = this.isHorizontal ? this.calculateBarsDataLabelsPosition({\n          x: e,\n          y: i,\n          i: s,\n          j: a,\n          renderedPath: c,\n          bcy: x,\n          barHeight: o,\n          barWidth: l,\n          textRects: S,\n          strokeWidth: g,\n          dataLabelsX: b,\n          dataLabelsY: m,\n          barDataLabelsConfig: w,\n          offX: k,\n          offY: A\n        }) : this.calculateColumnsDataLabelsPosition({\n          x: e,\n          y: i,\n          i: s,\n          j: a,\n          renderedPath: c,\n          realIndex: n,\n          bcx: p,\n          bcy: x,\n          barHeight: o,\n          barWidth: l,\n          textRects: S,\n          strokeWidth: g,\n          dataLabelsY: m,\n          barDataLabelsConfig: w,\n          offX: k,\n          offY: A\n        }), c.attr({\n          cy: v.bcy,\n          cx: v.bcx,\n          j: a,\n          val: r[s][a],\n          barHeight: o,\n          barWidth: l\n        }), this.drawCalculatedDataLabels({\n          x: v.dataLabelsX,\n          y: v.dataLabelsY,\n          val: r[s][a],\n          i: n,\n          j: a,\n          barWidth: l,\n          barHeight: o,\n          textRects: S,\n          dataLabelsConfig: y\n        });\n      }\n    }, {\n      key: \"calculateColumnsDataLabelsPosition\",\n      value: function value(t) {\n        var e,\n            i = this.w,\n            s = t.i,\n            a = t.j,\n            n = t.y,\n            r = t.bcx,\n            o = t.barWidth,\n            l = t.barHeight,\n            h = t.textRects,\n            c = t.dataLabelsY,\n            d = t.barDataLabelsConfig,\n            u = t.strokeWidth,\n            g = t.offX,\n            f = t.offY,\n            p = i.globals.gridWidth / i.globals.dataPoints;\n        r -= u / 2, e = i.globals.isXNumeric ? r - o / 2 + g : r - p + o / 2 + g;\n        var x = this.series[s][a] <= 0;\n\n        switch (this.isReversed && (n -= l), d.position) {\n          case \"center\":\n            c = x ? n + l / 2 + h.height / 2 + f : n + l / 2 + h.height / 2 - f;\n            break;\n\n          case \"bottom\":\n            c = x ? n + l + h.height + u + f : n + l - h.height / 2 + u - f;\n            break;\n\n          case \"top\":\n            c = x ? n - h.height / 2 - f : n + h.height + f;\n        }\n\n        return i.config.chart.stacked || (c < 0 ? c = 0 + u : c + h.height / 3 > i.globals.gridHeight && (c = i.globals.gridHeight - u)), {\n          bcx: r,\n          bcy: n,\n          dataLabelsX: e,\n          dataLabelsY: c\n        };\n      }\n    }, {\n      key: \"calculateBarsDataLabelsPosition\",\n      value: function value(t) {\n        var e = this.w,\n            i = t.x,\n            s = t.i,\n            a = t.j,\n            n = t.bcy,\n            r = t.barHeight,\n            o = t.barWidth,\n            l = t.textRects,\n            h = t.dataLabelsX,\n            c = t.strokeWidth,\n            d = t.barDataLabelsConfig,\n            u = t.offX,\n            g = t.offY,\n            f = n - e.globals.gridHeight / e.globals.dataPoints + r / 2 + l.height / 2 + g - 3,\n            p = this.series[s][a] <= 0;\n\n        switch (this.isReversed && (i += o), d.position) {\n          case \"center\":\n            h = p ? i - o / 2 - u : i - o / 2 + u;\n            break;\n\n          case \"bottom\":\n            h = p ? i - o - c - Math.round(l.width / 2) - u : i - o + c + Math.round(l.width / 2) + u;\n            break;\n\n          case \"top\":\n            h = p ? i - c + Math.round(l.width / 2) - u : i - c - Math.round(l.width / 2) + u;\n        }\n\n        return e.config.chart.stacked || (h < 0 ? h = h + l.width + c : h + l.width / 2 > e.globals.gridWidth && (h = e.globals.gridWidth - l.width - c)), {\n          bcx: i,\n          bcy: n,\n          dataLabelsX: h,\n          dataLabelsY: f\n        };\n      }\n    }, {\n      key: \"drawCalculatedDataLabels\",\n      value: function value(t) {\n        var e = t.x,\n            i = t.y,\n            s = t.val,\n            a = t.i,\n            n = t.j,\n            r = t.textRects,\n            o = t.barHeight,\n            l = t.barWidth,\n            h = t.dataLabelsConfig,\n            c = this.w,\n            d = new z(this.ctx),\n            u = new f(this.ctx),\n            g = h.formatter,\n            p = null,\n            x = c.globals.collapsedSeriesIndices.indexOf(a) > -1;\n\n        if (h.enabled && !x) {\n          p = u.group({\n            \"class\": \"apexcharts-data-labels\"\n          });\n          var b = \"\";\n          null != s && (b = g(s, {\n            seriesIndex: a,\n            dataPointIndex: n,\n            w: c\n          })), 0 === s && c.config.chart.stacked && (b = \"\"), c.config.chart.stacked && this.barOptions.dataLabels.hideOverflowingLabels && (this.isHorizontal ? (l = this.series[a][n] / this.yRatio[this.yaxisIndex], r.width / 1.6 > l && (b = \"\")) : (o = this.series[a][n] / this.yRatio[this.yaxisIndex], r.height / 1.6 > o && (b = \"\"))), d.plotDataLabelsText({\n            x: e,\n            y: i,\n            text: b,\n            i: a,\n            j: n,\n            parent: p,\n            dataLabelsConfig: h,\n            alwaysDrawDataLabel: !0,\n            offsetCorrection: !0\n          });\n        }\n\n        return p;\n      }\n    }, {\n      key: \"barEndingShape\",\n      value: function value(t, e, i, s, a) {\n        var n = new f(this.ctx);\n\n        if (this.isHorizontal) {\n          var r = null,\n              o = e.x;\n\n          if (void 0 !== i[s][a] || null !== i[s][a]) {\n            var l = i[s][a] < 0,\n                h = e.barHeight / 2 - e.strokeWidth;\n\n            switch (l && (h = -e.barHeight / 2 - e.strokeWidth), t.config.chart.stacked || \"rounded\" === this.barOptions.endingShape && (o = e.x - h / 2), this.barOptions.endingShape) {\n              case \"flat\":\n                r = n.line(o, e.barYPosition + e.barHeight - e.strokeWidth);\n                break;\n\n              case \"rounded\":\n                r = n.quadraticCurve(o + h, e.barYPosition + (e.barHeight - e.strokeWidth) / 2, o, e.barYPosition + e.barHeight - e.strokeWidth);\n            }\n          }\n\n          return {\n            path: r,\n            ending_p_from: \"\",\n            newX: o\n          };\n        }\n\n        var c = null,\n            d = e.y;\n\n        if (void 0 !== i[s][a] || null !== i[s][a]) {\n          var u = i[s][a] < 0,\n              g = e.barWidth / 2 - e.strokeWidth;\n\n          switch (u && (g = -e.barWidth / 2 - e.strokeWidth), t.config.chart.stacked || \"rounded\" === this.barOptions.endingShape && (d += g / 2), this.barOptions.endingShape) {\n            case \"flat\":\n              c = n.line(e.barXPosition + e.barWidth - e.strokeWidth, d);\n              break;\n\n            case \"rounded\":\n              c = n.quadraticCurve(e.barXPosition + (e.barWidth - e.strokeWidth) / 2, d - g, e.barXPosition + e.barWidth - e.strokeWidth, d);\n          }\n        }\n\n        return {\n          path: c,\n          ending_p_from: \"\",\n          newY: d\n        };\n      }\n    }]), t;\n  }(),\n      M = function (t) {\n    function i() {\n      return e(this, i), h(this, o(i).apply(this, arguments));\n    }\n\n    return r(i, P), s(i, [{\n      key: \"draw\",\n      value: function value(t, e) {\n        var i = this.w;\n        this.graphics = new f(this.ctx), this.fill = new S(this.ctx), this.bar = new P(this.ctx, this.xyRatios);\n        var s = new y(this.ctx, i);\n        t = s.getLogSeries(t), this.yRatio = s.getLogYRatios(this.yRatio), this.initVariables(t), \"100%\" === i.config.chart.stackType && (t = i.globals.seriesPercent.slice()), this.series = t, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];\n\n        for (var a = 0; a < t.length; a++) {\n          t[a].length > 0 && (this.totalItems += t[a].length);\n        }\n\n        for (var n = this.graphics.group({\n          \"class\": \"apexcharts-bar-series apexcharts-plot-series\"\n        }), r = 0, o = 0, l = 0, h = 0; l < t.length; l++, h++) {\n          var c = void 0,\n              u = void 0,\n              g = void 0,\n              p = void 0,\n              x = void 0,\n              b = void 0,\n              m = [],\n              v = [],\n              w = i.globals.comboCharts ? e[l] : l;\n          this.yRatio.length > 1 && (this.yaxisIndex = w), this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed;\n          var k = this.graphics.group({\n            \"class\": \"apexcharts-series\",\n            seriesName: d.escapeString(i.globals.seriesNames[w]),\n            rel: l + 1,\n            \"data:realIndex\": w\n          }),\n              A = this.graphics.group({\n            \"class\": \"apexcharts-datalabels\"\n          }),\n              C = 0,\n              L = 0,\n              z = 0,\n              M = this.initialPositions(r, o, g, p, x, b);\n          o = M.y, L = M.barHeight, p = M.yDivision, b = M.zeroW, r = M.x, z = M.barWidth, g = M.xDivision, x = M.zeroH, this.yArrj = [], this.yArrjF = [], this.yArrjVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [];\n\n          for (var E = 0; E < i.globals.dataPoints; E++) {\n            i.config.stroke.show && (C = this.isNullValue ? 0 : Array.isArray(this.strokeWidth) ? this.strokeWidth[w] : this.strokeWidth);\n            var T = null;\n            this.isHorizontal ? (T = this.drawBarPaths({\n              indexes: {\n                i: l,\n                j: E,\n                realIndex: w,\n                bc: h\n              },\n              barHeight: L,\n              strokeWidth: C,\n              pathTo: c,\n              pathFrom: u,\n              zeroW: b,\n              x: r,\n              y: o,\n              yDivision: p,\n              elSeries: k\n            }), z = this.series[l][E] / this.invertedYRatio) : (T = this.drawColumnPaths({\n              indexes: {\n                i: l,\n                j: E,\n                realIndex: w,\n                bc: h\n              },\n              x: r,\n              y: o,\n              xDivision: g,\n              pathTo: c,\n              pathFrom: u,\n              barWidth: z,\n              zeroH: x,\n              strokeWidth: C,\n              elSeries: k\n            }), L = this.series[l][E] / this.yRatio[this.yaxisIndex]), c = T.pathTo, u = T.pathFrom, o = T.y, r = T.x, m.push(r), v.push(o);\n            var X = this.bar.getPathFillColor(t, l, E, w);\n            k = this.renderSeries({\n              realIndex: w,\n              pathFill: X,\n              j: E,\n              i: l,\n              pathFrom: u,\n              pathTo: c,\n              strokeWidth: C,\n              elSeries: k,\n              x: r,\n              y: o,\n              series: t,\n              barHeight: L,\n              barWidth: z,\n              elDataLabelsWrap: A,\n              type: \"bar\",\n              visibleSeries: 0\n            });\n          }\n\n          i.globals.seriesXvalues[w] = m, i.globals.seriesYvalues[w] = v, this.prevY.push(this.yArrj), this.prevYF.push(this.yArrjF), this.prevYVal.push(this.yArrjVal), this.prevX.push(this.xArrj), this.prevXF.push(this.xArrjF), this.prevXVal.push(this.xArrjVal), n.add(k);\n        }\n\n        return n;\n      }\n    }, {\n      key: \"initialPositions\",\n      value: function value(t, e, i, s, a, n) {\n        var r,\n            o,\n            l = this.w;\n        return this.isHorizontal ? (r = (r = s = l.globals.gridHeight / l.globals.dataPoints) * parseInt(l.config.plotOptions.bar.barHeight) / 100, n = this.baseLineInvertedY + l.globals.padHorizontal + (this.isReversed ? l.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e = (s - r) / 2) : (o = i = l.globals.gridWidth / l.globals.dataPoints, o = l.globals.isXNumeric ? (i = l.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth) / 100 : o * parseInt(l.config.plotOptions.bar.columnWidth) / 100, a = this.baseLineY[this.yaxisIndex] + (this.isReversed ? l.globals.gridHeight : 0) - (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t = l.globals.padHorizontal + (i - o) / 2), {\n          x: t,\n          y: e,\n          yDivision: s,\n          xDivision: i,\n          barHeight: r,\n          barWidth: o,\n          zeroH: a,\n          zeroW: n\n        };\n      }\n    }, {\n      key: \"drawBarPaths\",\n      value: function value(t) {\n        for (var e, i = t.indexes, s = t.barHeight, a = t.strokeWidth, n = t.pathTo, r = t.pathFrom, o = t.zeroW, l = t.x, h = t.y, c = t.yDivision, d = t.elSeries, u = this.w, g = h, f = i.i, p = i.j, x = i.realIndex, b = i.bc, m = 0, v = 0; v < this.prevXF.length; v++) {\n          m += this.prevXF[v][p];\n        }\n\n        if (f > 0) {\n          var y = o;\n          this.prevXVal[f - 1][p] < 0 ? y = this.series[f][p] >= 0 ? this.prevX[f - 1][p] + m - 2 * (this.isReversed ? m : 0) : this.prevX[f - 1][p] : this.prevXVal[f - 1][p] >= 0 && (y = this.series[f][p] >= 0 ? this.prevX[f - 1][p] : this.prevX[f - 1][p] - m + 2 * (this.isReversed ? m : 0)), e = y;\n        } else e = o;\n\n        l = null === this.series[f][p] ? e : e + this.series[f][p] / this.invertedYRatio - 2 * (this.isReversed ? this.series[f][p] / this.invertedYRatio : 0);\n        var w = {\n          barHeight: s,\n          strokeWidth: a,\n          invertedYRatio: this.invertedYRatio,\n          barYPosition: g,\n          x: l\n        },\n            k = this.bar.barEndingShape(u, w, this.series, f, p);\n\n        if (this.series.length > 1 && f !== this.endingShapeOnSeriesNumber && (k.path = this.graphics.line(k.newX, g + s - a)), this.xArrj.push(k.newX), this.xArrjF.push(Math.abs(e - k.newX)), this.xArrjVal.push(this.series[f][p]), n = this.graphics.move(e, g), r = this.graphics.move(e, g), u.globals.previousPaths.length > 0 && (r = this.bar.getPathFrom(x, p, !1)), n = n + this.graphics.line(k.newX, g) + k.path + this.graphics.line(e, g + s - a) + this.graphics.line(e, g), r = r + this.graphics.line(e, g) + this.graphics.line(e, g + s - a) + this.graphics.line(e, g + s - a) + this.graphics.line(e, g + s - a) + this.graphics.line(e, g), u.config.plotOptions.bar.colors.backgroundBarColors.length > 0 && 0 === f) {\n          b >= u.config.plotOptions.bar.colors.backgroundBarColors.length && (b = 0);\n          var A = u.config.plotOptions.bar.colors.backgroundBarColors[b],\n              S = this.graphics.drawRect(0, g, u.globals.gridWidth, s, 0, A, u.config.plotOptions.bar.colors.backgroundBarOpacity);\n          d.add(S), S.node.classList.add(\"apexcharts-backgroundBar\");\n        }\n\n        return {\n          pathTo: n,\n          pathFrom: r,\n          x: l,\n          y: h += c\n        };\n      }\n    }, {\n      key: \"drawColumnPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.x,\n            s = t.y,\n            a = t.xDivision,\n            n = t.pathTo,\n            r = t.pathFrom,\n            o = t.barWidth,\n            l = t.zeroH,\n            h = t.strokeWidth,\n            c = t.elSeries,\n            d = this.w,\n            u = e.i,\n            g = e.j,\n            f = e.realIndex,\n            p = e.bc;\n\n        if (d.globals.isXNumeric) {\n          var x = d.globals.seriesX[u][g];\n          x || (x = 0), i = (x - d.globals.minX) / this.xRatio - o / 2;\n        }\n\n        for (var b, m = i, v = 0, y = 0; y < this.prevYF.length; y++) {\n          v += this.prevYF[y][g];\n        }\n\n        if (u > 0 && !d.globals.isXNumeric || u > 0 && d.globals.isXNumeric && d.globals.seriesX[u - 1][g] === d.globals.seriesX[u][g]) {\n          var w = this.prevY[u - 1][g];\n          b = this.prevYVal[u - 1][g] < 0 ? this.series[u][g] >= 0 ? w - v + 2 * (this.isReversed ? v : 0) : w : this.series[u][g] >= 0 ? w : w + v - 2 * (this.isReversed ? v : 0);\n        } else b = d.globals.gridHeight - l;\n\n        s = b - this.series[u][g] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[u][g] / this.yRatio[this.yaxisIndex] : 0);\n        var k = {\n          barWidth: o,\n          strokeWidth: h,\n          yRatio: this.yRatio[this.yaxisIndex],\n          barXPosition: m,\n          y: s\n        },\n            A = this.bar.barEndingShape(d, k, this.series, u, g);\n\n        if (this.yArrj.push(A.newY), this.yArrjF.push(Math.abs(b - A.newY)), this.yArrjVal.push(this.series[u][g]), n = this.graphics.move(m, b), r = this.graphics.move(m, b), d.globals.previousPaths.length > 0 && (r = this.bar.getPathFrom(f, g, !1)), n = n + this.graphics.line(m, A.newY) + A.path + this.graphics.line(m + o - h, b) + this.graphics.line(m - h / 2, b), r = r + this.graphics.line(m, b) + this.graphics.line(m + o - h, b) + this.graphics.line(m + o - h, b) + this.graphics.line(m + o - h, b) + this.graphics.line(m - h / 2, b), d.config.plotOptions.bar.colors.backgroundBarColors.length > 0 && 0 === u) {\n          p >= d.config.plotOptions.bar.colors.backgroundBarColors.length && (p = 0);\n          var S = d.config.plotOptions.bar.colors.backgroundBarColors[p],\n              C = this.graphics.drawRect(m, 0, o, d.globals.gridHeight, 0, S, d.config.plotOptions.bar.colors.backgroundBarOpacity);\n          c.add(C), C.node.classList.add(\"apexcharts-backgroundBar\");\n        }\n\n        return i += a, {\n          pathTo: n,\n          pathFrom: r,\n          x: d.globals.isXNumeric ? i - a : i,\n          y: s\n        };\n      }\n    }, {\n      key: \"checkZeroSeries\",\n      value: function value(t) {\n        for (var e = t.series, i = this.w, s = 0; s < e.length; s++) {\n          for (var a = 0, n = 0; n < e[i.globals.maxValsInArrayIndex].length; n++) {\n            a += e[s][n];\n          }\n\n          0 === a && this.zeroSerieses.push(s);\n        }\n\n        for (var r = e.length - 1; r >= 0; r--) {\n          this.zeroSerieses.indexOf(r) > -1 && r === this.endingShapeOnSeriesNumber && (this.endingShapeOnSeriesNumber -= 1);\n        }\n      }\n    }]), i;\n  }(),\n      E = function (t) {\n    function i() {\n      return e(this, i), h(this, o(i).apply(this, arguments));\n    }\n\n    return r(i, P), s(i, [{\n      key: \"draw\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new f(this.ctx),\n            a = new S(this.ctx);\n        this.candlestickOptions = this.w.config.plotOptions.candlestick;\n        var n = new y(this.ctx, i);\n        t = n.getLogSeries(t), this.series = t, this.yRatio = n.getLogYRatios(this.yRatio), this.initVariables(t);\n\n        for (var r = s.group({\n          \"class\": \"apexcharts-candlestick-series apexcharts-plot-series\"\n        }), o = 0, l = 0; o < t.length; o++, l++) {\n          var h,\n              c,\n              u = void 0,\n              g = void 0,\n              p = void 0,\n              x = void 0,\n              b = [],\n              m = [],\n              v = i.globals.comboCharts ? e[o] : o,\n              w = s.group({\n            \"class\": \"apexcharts-series\",\n            seriesName: d.escapeString(i.globals.seriesNames[v]),\n            rel: o + 1,\n            \"data:realIndex\": v\n          });\n          t[o].length > 0 && (this.visibleI = this.visibleI + 1);\n          var k,\n              A,\n              C = 0;\n          this.yRatio.length > 1 && (this.yaxisIndex = v);\n          var L = this.initialPositions();\n          x = L.y, k = L.barHeight, p = L.x, A = L.barWidth, h = L.xDivision, c = L.zeroH, m.push(p + A / 2);\n\n          for (var z = s.group({\n            \"class\": \"apexcharts-datalabels\"\n          }), P = 0, M = i.globals.dataPoints; P < i.globals.dataPoints; P++, M--) {\n            void 0 === this.series[o][P] || null === t[o][P] ? this.isNullValue = !0 : this.isNullValue = !1, i.config.stroke.show && (C = this.isNullValue ? 0 : Array.isArray(this.strokeWidth) ? this.strokeWidth[v] : this.strokeWidth);\n            var E,\n                T = this.drawCandleStickPaths({\n              indexes: {\n                i: o,\n                j: P,\n                realIndex: v,\n                bc: l\n              },\n              x: p,\n              y: x,\n              xDivision: h,\n              pathTo: u,\n              pathFrom: g,\n              barWidth: A,\n              zeroH: c,\n              strokeWidth: C,\n              elSeries: w\n            });\n            u = T.pathTo, g = T.pathFrom, x = T.y, p = T.x, E = T.color, P > 0 && m.push(p + A / 2), b.push(x);\n            var X = a.fillPath({\n              seriesNumber: v,\n              color: E,\n              value: t[o][P]\n            }),\n                I = this.candlestickOptions.wick.useFillColor ? E : void 0;\n            w = this.renderSeries({\n              realIndex: v,\n              pathFill: X,\n              lineFill: I,\n              j: P,\n              i: o,\n              pathFrom: g,\n              pathTo: u,\n              strokeWidth: C,\n              elSeries: w,\n              x: p,\n              y: x,\n              series: t,\n              barHeight: k,\n              barWidth: A,\n              elDataLabelsWrap: z,\n              visibleSeries: this.visibleI,\n              type: \"candlestick\"\n            });\n          }\n\n          i.globals.seriesXvalues[v] = m, i.globals.seriesYvalues[v] = b, r.add(w);\n        }\n\n        return r;\n      }\n    }, {\n      key: \"drawCandleStickPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.x,\n            s = (t.y, t.xDivision),\n            a = t.pathTo,\n            n = t.pathFrom,\n            r = t.barWidth,\n            o = t.zeroH,\n            l = t.strokeWidth,\n            h = this.w,\n            c = new f(this.ctx),\n            d = e.i,\n            u = e.j,\n            g = !0,\n            p = h.config.plotOptions.candlestick.colors.upward,\n            x = h.config.plotOptions.candlestick.colors.downward,\n            b = this.yRatio[this.yaxisIndex],\n            m = e.realIndex,\n            v = this.getOHLCValue(m, u),\n            y = o,\n            w = o;\n        v.o > v.c && (g = !1);\n        var k = Math.min(v.o, v.c),\n            A = Math.max(v.o, v.c);\n        h.globals.isXNumeric && (i = (h.globals.seriesX[d][u] - h.globals.minX) / this.xRatio - r / 2);\n        var S = i + r * this.visibleI;\n        return void 0 === this.series[d][u] || null === this.series[d][u] ? k = o : (k = o - k / b, A = o - A / b, y = o - v.h / b, w = o - v.l / b), c.move(S, o), n = c.move(S, k), h.globals.previousPaths.length > 0 && (n = this.getPathFrom(m, u, !0)), a = c.move(S, A) + c.line(S + r / 2, A) + c.line(S + r / 2, y) + c.line(S + r / 2, A) + c.line(S + r, A) + c.line(S + r, k) + c.line(S + r / 2, k) + c.line(S + r / 2, w) + c.line(S + r / 2, k) + c.line(S, k) + c.line(S, A - l / 2), n += c.move(S, k), h.globals.isXNumeric || (i += s), {\n          pathTo: a,\n          pathFrom: n,\n          x: i,\n          y: A,\n          barXPosition: S,\n          color: g ? p : x\n        };\n      }\n    }, {\n      key: \"getOHLCValue\",\n      value: function value(t, e) {\n        var i = this.w;\n        return {\n          o: i.globals.seriesCandleO[t][e],\n          h: i.globals.seriesCandleH[t][e],\n          l: i.globals.seriesCandleL[t][e],\n          c: i.globals.seriesCandleC[t][e]\n        };\n      }\n    }]), i;\n  }(),\n      T = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"drawXCrosshairs\",\n      value: function value() {\n        var t = this.w,\n            e = new f(this.ctx),\n            i = new u(this.ctx),\n            s = t.config.xaxis.crosshairs.fill.gradient,\n            a = t.config.xaxis.crosshairs.dropShadow,\n            n = t.config.xaxis.crosshairs.fill.type,\n            r = s.colorFrom,\n            o = s.colorTo,\n            l = s.opacityFrom,\n            h = s.opacityTo,\n            c = s.stops,\n            g = a.enabled,\n            p = a.left,\n            x = a.top,\n            b = a.blur,\n            m = a.color,\n            v = a.opacity,\n            y = t.config.xaxis.crosshairs.fill.color;\n\n        if (t.config.xaxis.crosshairs.show) {\n          \"gradient\" === n && (y = e.drawGradient(\"vertical\", r, o, l, h, null, c, null));\n          var w = e.drawRect();\n          1 === t.config.xaxis.crosshairs.width && (w = e.drawLine()), w.attr({\n            \"class\": \"apexcharts-xcrosshairs\",\n            x: 0,\n            y: 0,\n            y2: t.globals.gridHeight,\n            width: d.isNumber(t.config.xaxis.crosshairs.width) ? t.config.xaxis.crosshairs.width : 0,\n            height: t.globals.gridHeight,\n            fill: y,\n            filter: \"none\",\n            \"fill-opacity\": t.config.xaxis.crosshairs.opacity,\n            stroke: t.config.xaxis.crosshairs.stroke.color,\n            \"stroke-width\": t.config.xaxis.crosshairs.stroke.width,\n            \"stroke-dasharray\": t.config.xaxis.crosshairs.stroke.dashArray\n          }), g && (w = i.dropShadow(w, {\n            left: p,\n            top: x,\n            blur: b,\n            color: m,\n            opacity: v\n          })), t.globals.dom.elGraphical.add(w);\n        }\n      }\n    }, {\n      key: \"drawYCrosshairs\",\n      value: function value() {\n        var t = this.w,\n            e = new f(this.ctx),\n            i = t.config.yaxis[0].crosshairs;\n\n        if (t.config.yaxis[0].crosshairs.show) {\n          var s = e.drawLine(0, 0, t.globals.gridWidth, 0, i.stroke.color, i.stroke.dashArray, i.stroke.width);\n          s.attr({\n            \"class\": \"apexcharts-ycrosshairs\"\n          }), t.globals.dom.elGraphical.add(s);\n        }\n\n        var a = e.drawLine(0, 0, t.globals.gridWidth, 0, i.stroke.color, 0, 0);\n        a.attr({\n          \"class\": \"apexcharts-ycrosshairs-hidden\"\n        }), t.globals.dom.elGraphical.add(a);\n      }\n    }]), t;\n  }(),\n      X = function () {\n    function t(i, s) {\n      e(this, t), this.ctx = i, this.w = i.w, this.xRatio = s.xRatio, this.yRatio = s.yRatio, this.negRange = !1, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.width;\n    }\n\n    return s(t, [{\n      key: \"draw\",\n      value: function value(t) {\n        var e = this.w,\n            i = new f(this.ctx),\n            s = i.group({\n          \"class\": \"apexcharts-heatmap\"\n        });\n        s.attr(\"clip-path\", \"url(#gridRectMask\".concat(e.globals.cuid, \")\"));\n        var a = e.globals.gridWidth / e.globals.dataPoints,\n            n = e.globals.gridHeight / e.globals.series.length,\n            r = 0,\n            o = !1;\n        this.checkColorRange();\n        var l = t.slice();\n        e.config.yaxis[0].reversed && (o = !0, l.reverse());\n\n        for (var h = o ? 0 : l.length - 1; o ? h < l.length : h >= 0; o ? h++ : h--) {\n          var c = i.group({\n            \"class\": \"apexcharts-series apexcharts-heatmap-series\",\n            seriesName: d.escapeString(e.globals.seriesNames[h]),\n            rel: h + 1,\n            \"data:realIndex\": h\n          });\n\n          if (e.config.chart.dropShadow.enabled) {\n            var g = e.config.chart.dropShadow;\n            new u(this.ctx).dropShadow(c, g, h);\n          }\n\n          for (var p = 0, x = 0; x < l[h].length; x++) {\n            var b = 1,\n                m = this.determineHeatColor(h, x);\n\n            if (e.globals.hasNegs || this.negRange) {\n              var v = e.config.plotOptions.heatmap.shadeIntensity;\n              b = e.config.plotOptions.heatmap.reverseNegativeShade ? m.percent < 0 ? m.percent / 100 * (1.25 * v) : (1 - m.percent / 100) * (1.25 * v) : m.percent < 0 ? 1 - (1 + m.percent / 100) * v : (1 - m.percent / 100) * v;\n            } else b = 1 - m.percent / 100;\n\n            var y = m.color;\n\n            if (e.config.plotOptions.heatmap.enableShades) {\n              var w = new d();\n              y = d.hexToRgba(w.shadeColor(b, m.color), e.config.fill.opacity);\n            }\n\n            var k = this.rectRadius,\n                A = i.drawRect(p, r, a, n, k);\n\n            if (A.attr({\n              cx: p,\n              cy: r\n            }), A.node.classList.add(\"apexcharts-heatmap-rect\"), c.add(A), A.attr({\n              fill: y,\n              i: h,\n              index: h,\n              j: x,\n              val: l[h][x],\n              \"stroke-width\": this.strokeWidth,\n              stroke: e.globals.stroke.colors[0],\n              color: y\n            }), A.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this, A)), A.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this, A)), A.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this, A)), e.config.chart.animations.enabled && !e.globals.dataChanged) {\n              var S = 1;\n              e.globals.resized || (S = e.config.chart.animations.speed), this.animateHeatMap(A, p, r, a, n, S);\n            }\n\n            if (e.globals.dataChanged) {\n              var C = 1;\n\n              if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {\n                C = this.dynamicAnim.speed;\n                var L = e.globals.previousPaths[h] && e.globals.previousPaths[h][x] && e.globals.previousPaths[h][x].color;\n                L || (L = \"rgba(255, 255, 255, 0)\"), this.animateHeatColor(A, d.isColorHex(L) ? L : d.rgb2hex(L), d.isColorHex(y) ? y : d.rgb2hex(y), C);\n              }\n            }\n\n            var z = this.calculateHeatmapDataLabels({\n              x: p,\n              y: r,\n              i: h,\n              j: x,\n              series: l,\n              rectHeight: n,\n              rectWidth: a\n            });\n            null !== z && c.add(z), p += a;\n          }\n\n          r += n, s.add(c);\n        }\n\n        var P = e.globals.yAxisScale[0].result.slice();\n        e.config.yaxis[0].reversed ? P.unshift(\"\") : P.push(\"\"), e.globals.yAxisScale[0].result = P;\n        var M = e.globals.gridHeight / e.globals.series.length;\n        return e.config.yaxis[0].labels.offsetY = -M / 2, s;\n      }\n    }, {\n      key: \"checkColorRange\",\n      value: function value() {\n        var t = this,\n            e = this.w.config.plotOptions.heatmap;\n        e.colorScale.ranges.length > 0 && e.colorScale.ranges.map(function (e, i) {\n          e.from < 0 && (t.negRange = !0);\n        });\n      }\n    }, {\n      key: \"determineHeatColor\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = i.globals.series[t][e],\n            a = i.config.plotOptions.heatmap,\n            n = a.colorScale.inverse ? e : t,\n            r = i.globals.colors[n],\n            o = Math.min.apply(Math, c(i.globals.series[t])),\n            l = Math.max.apply(Math, c(i.globals.series[t]));\n        a.distributed || (o = i.globals.minY, l = i.globals.maxY), void 0 !== a.colorScale.min && (o = a.colorScale.min < i.globals.minY ? a.colorScale.min : i.globals.minY, l = a.colorScale.max > i.globals.maxY ? a.colorScale.max : i.globals.maxY);\n        var h = Math.abs(l) + Math.abs(o),\n            d = 100 * s / (0 === h ? h - 1e-6 : h);\n        a.colorScale.ranges.length > 0 && a.colorScale.ranges.map(function (t, e) {\n          if (s >= t.from && s <= t.to) {\n            r = t.color, o = t.from, l = t.to;\n            var i = Math.abs(l) + Math.abs(o);\n            d = 100 * s / (0 === i ? i - 1e-6 : i);\n          }\n        });\n        return {\n          color: r,\n          percent: d\n        };\n      }\n    }, {\n      key: \"calculateHeatmapDataLabels\",\n      value: function value(t) {\n        var e = t.x,\n            i = t.y,\n            s = t.i,\n            a = t.j,\n            n = (t.series, t.rectHeight),\n            r = t.rectWidth,\n            o = this.w,\n            l = o.config.dataLabels,\n            h = new f(this.ctx),\n            c = new z(this.ctx),\n            d = l.formatter,\n            u = null;\n\n        if (l.enabled) {\n          u = h.group({\n            \"class\": \"apexcharts-data-labels\"\n          });\n          var g = l.offsetX,\n              p = l.offsetY,\n              x = e + r / 2 + g,\n              b = i + n / 2 + parseInt(l.style.fontSize) / 3 + p,\n              m = d(o.globals.series[s][a], {\n            seriesIndex: s,\n            dataPointIndex: a,\n            w: o\n          });\n          c.plotDataLabelsText({\n            x: x,\n            y: b,\n            text: m,\n            i: s,\n            j: a,\n            parent: u,\n            dataLabelsConfig: l\n          });\n        }\n\n        return u;\n      }\n    }, {\n      key: \"animateHeatMap\",\n      value: function value(t, e, i, s, a, n) {\n        var r = this;\n        new g(this.ctx).animateRect(t, {\n          x: e + s / 2,\n          y: i + a / 2,\n          width: 0,\n          height: 0\n        }, {\n          x: e,\n          y: i,\n          width: s,\n          height: a\n        }, n, function () {\n          r.w.globals.animationEnded = !0;\n        });\n      }\n    }, {\n      key: \"animateHeatColor\",\n      value: function value(t, e, i, s) {\n        t.attr({\n          fill: e\n        }).animate(s).attr({\n          fill: i\n        });\n      }\n    }]), t;\n  }(),\n      I = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels;\n      var s = this.w;\n      this.lineColorArr = void 0 !== s.globals.stroke.colors ? s.globals.stroke.colors : s.globals.colors, this.defaultSize = s.globals.svgHeight < s.globals.svgWidth ? s.globals.svgHeight - 35 : s.globals.gridWidth, this.centerY = this.defaultSize / 2, this.centerX = s.globals.gridWidth / 2, this.fullAngle = 360, this.size = 0, this.donutSize = 0, this.sliceLabels = [], this.prevSectorAngleArr = [];\n    }\n\n    return s(t, [{\n      key: \"draw\",\n      value: function value(t) {\n        for (var e = this.w, i = new f(this.ctx), s = i.group({\n          \"class\": \"apexcharts-pie\"\n        }), a = 0, n = 0; n < t.length; n++) {\n          a += d.negToZero(t[n]);\n        }\n\n        var r = [],\n            o = i.group();\n        0 === a && (a = 1e-5);\n\n        for (var l = 0; l < t.length; l++) {\n          var h = this.fullAngle * d.negToZero(t[l]) / a;\n          r.push(h);\n        }\n\n        if (e.globals.dataChanged) {\n          for (var c, u = 0, g = 0; g < e.globals.previousPaths.length; g++) {\n            u += d.negToZero(e.globals.previousPaths[g]);\n          }\n\n          for (var p = 0; p < e.globals.previousPaths.length; p++) {\n            c = this.fullAngle * d.negToZero(e.globals.previousPaths[p]) / u, this.prevSectorAngleArr.push(c);\n          }\n        }\n\n        this.size = this.defaultSize / 2.05 - e.config.stroke.width - e.config.chart.dropShadow.blur, void 0 !== e.config.plotOptions.pie.size && (this.size = e.config.plotOptions.pie.size), this.donutSize = this.size * parseInt(e.config.plotOptions.pie.donut.size) / 100;\n        var x = e.config.plotOptions.pie.customScale,\n            b = e.globals.gridWidth / 2,\n            m = e.globals.gridHeight / 2,\n            v = b - e.globals.gridWidth / 2 * x,\n            y = m - e.globals.gridHeight / 2 * x;\n\n        if (this.donutDataLabels.show) {\n          var w = this.renderInnerDataLabels(this.donutDataLabels, {\n            hollowSize: this.donutSize,\n            centerX: this.centerX,\n            centerY: this.centerY,\n            opacity: this.donutDataLabels.show,\n            translateX: v,\n            translateY: y\n          });\n          s.add(w);\n        }\n\n        if (\"donut\" === e.config.chart.type) {\n          var k = i.drawCircle(this.donutSize);\n          k.attr({\n            cx: this.centerX,\n            cy: this.centerY,\n            fill: e.config.plotOptions.pie.donut.background\n          }), o.add(k);\n        }\n\n        var A = this.drawArcs(r, t);\n        return this.sliceLabels.forEach(function (t) {\n          A.add(t);\n        }), o.attr({\n          transform: \"translate(\".concat(v, \", \").concat(y - 5, \") scale(\").concat(x, \")\")\n        }), s.attr({\n          \"data:innerTranslateX\": v,\n          \"data:innerTranslateY\": y - 25\n        }), o.add(A), s.add(o), s;\n      }\n    }, {\n      key: \"drawArcs\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new u(this.ctx),\n            a = new f(this.ctx),\n            n = new S(this.ctx),\n            r = a.group(),\n            o = 0,\n            l = 0,\n            h = 0,\n            c = 0;\n        this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0;\n\n        for (var g = 0; g < t.length; g++) {\n          var p = a.group({\n            \"class\": \"apexcharts-series apexcharts-pie-series\",\n            seriesName: d.escapeString(i.globals.seriesNames[g]),\n            id: \"apexcharts-series-\" + g,\n            rel: g + 1\n          });\n          r.add(p), l = c, h = (o = h) + t[g], c = l + this.prevSectorAngleArr[g];\n          var x = h - o,\n              b = n.fillPath({\n            seriesNumber: g,\n            size: this.size,\n            value: e[g]\n          }),\n              m = this.getChangedPath(l, c),\n              v = a.drawPath({\n            d: m,\n            stroke: this.lineColorArr instanceof Array ? this.lineColorArr[g] : this.lineColorArr,\n            strokeWidth: this.strokeWidth,\n            fill: b,\n            fillOpacity: i.config.fill.opacity,\n            classes: \"apexcharts-pie-area\"\n          });\n\n          if (v.attr({\n            id: \"apexcharts-\".concat(i.config.chart.type, \"-slice-\").concat(g),\n            index: 0,\n            j: g\n          }), i.config.chart.dropShadow.enabled) {\n            var y = i.config.chart.dropShadow;\n            s.dropShadow(v, y, g);\n          }\n\n          this.addListeners(v, this.donutDataLabels), f.setAttrs(v.node, {\n            \"data:angle\": x,\n            \"data:startAngle\": o,\n            \"data:strokeWidth\": this.strokeWidth,\n            \"data:value\": e[g]\n          });\n          var w = {\n            x: 0,\n            y: 0\n          };\n          \"pie\" === i.config.chart.type ? w = d.polarToCartesian(this.centerX, this.centerY, this.size / 1.25 + i.config.plotOptions.pie.dataLabels.offset, o + (h - o) / 2) : \"donut\" === i.config.chart.type && (w = d.polarToCartesian(this.centerX, this.centerY, (this.size + this.donutSize) / 2 + i.config.plotOptions.pie.dataLabels.offset, o + (h - o) / 2)), p.add(v);\n          var k = 0;\n\n          if (!this.initialAnim || i.globals.resized || i.globals.dataChanged ? this.animBeginArr.push(0) : (k = (h - o) / this.fullAngle * i.config.chart.animations.speed, this.animDur = k + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i.globals.dataChanged ? this.animatePaths(v, {\n            endAngle: h,\n            startAngle: o,\n            prevStartAngle: l,\n            prevEndAngle: c,\n            animateStartingPos: !0,\n            i: g,\n            animBeginArr: this.animBeginArr,\n            dur: i.config.chart.animations.dynamicAnimation.speed\n          }) : this.animatePaths(v, {\n            endAngle: h,\n            startAngle: o,\n            i: g,\n            totalItems: t.length - 1,\n            animBeginArr: this.animBeginArr,\n            dur: k\n          }), i.config.plotOptions.pie.expandOnClick && v.click(this.pieClicked.bind(this, g)), i.config.dataLabels.enabled) {\n            var A = w.x,\n                C = w.y,\n                L = 100 * (h - o) / 360 + \"%\";\n\n            if (0 !== x && i.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[g]) {\n              var z = i.config.dataLabels.formatter;\n              void 0 !== z && (L = z(i.globals.seriesPercent[g][0], {\n                seriesIndex: g,\n                w: i\n              }));\n              var P = i.globals.dataLabels.style.colors[g],\n                  M = a.drawText({\n                x: A,\n                y: C,\n                text: L,\n                textAnchor: \"middle\",\n                fontSize: i.config.dataLabels.style.fontSize,\n                fontFamily: i.config.dataLabels.style.fontFamily,\n                foreColor: P\n              });\n\n              if (i.config.dataLabels.dropShadow.enabled) {\n                var E = i.config.dataLabels.dropShadow;\n                new u(this.ctx).dropShadow(M, E);\n              }\n\n              M.node.classList.add(\"apexcharts-pie-label\"), i.config.chart.animations.animate && !1 === i.globals.resized && (M.node.classList.add(\"apexcharts-pie-label-delay\"), M.node.style.animationDelay = i.config.chart.animations.speed / 940 + \"s\"), this.sliceLabels.push(M);\n            }\n          }\n        }\n\n        return r;\n      }\n    }, {\n      key: \"addListeners\",\n      value: function value(t, e) {\n        var i = new f(this.ctx);\n        t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseenter\", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mouseleave\", this.revertDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this, t)), t.node.addEventListener(\"mousedown\", this.printDataLabelsInner.bind(this, t.node, e));\n      }\n    }, {\n      key: \"animatePaths\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = e.endAngle - e.startAngle,\n            a = s,\n            n = e.startAngle,\n            r = e.startAngle;\n        void 0 !== e.prevStartAngle && void 0 !== e.prevEndAngle && (n = e.prevEndAngle, a = e.prevEndAngle - e.prevStartAngle), e.i === i.config.series.length - 1 && (s + r > this.fullAngle ? e.endAngle = e.endAngle - (s + r) : s + r < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (s + r)))), s === this.fullAngle && (s = this.fullAngle - .01), this.animateArc(t, n, r, s, a, e);\n      }\n    }, {\n      key: \"animateArc\",\n      value: function value(t, e, i, s, a, n) {\n        var r,\n            o = this,\n            l = this.w,\n            h = o.size;\n        h || (h = n.size), (isNaN(e) || isNaN(a)) && (e = i, a = s, n.dur = 0);\n        var c = s,\n            d = i,\n            u = e - i;\n        l.globals.dataChanged && n.shouldSetPrevPaths && (r = o.getPiePath({\n          me: o,\n          startAngle: d,\n          angle: a,\n          size: h\n        }), t.attr({\n          d: r\n        })), 0 !== n.dur ? t.animate(n.dur, l.globals.easing, n.animBeginArr[n.i]).afterAll(function () {\n          \"pie\" !== l.config.chart.type && \"donut\" !== l.config.chart.type || this.animate(300).attr({\n            \"stroke-width\": l.config.stroke.width\n          }), l.globals.animationEnded = !0;\n        }).during(function (l) {\n          c = u + (s - u) * l, n.animateStartingPos && (c = a + (s - a) * l, d = e - a + (i - (e - a)) * l), r = o.getPiePath({\n            me: o,\n            startAngle: d,\n            angle: c,\n            size: h\n          }), t.node.setAttribute(\"data:pathOrig\", r), t.attr({\n            d: r\n          });\n        }) : (r = o.getPiePath({\n          me: o,\n          startAngle: d,\n          angle: s,\n          size: h\n        }), n.isTrack || (l.globals.animationEnded = !0), t.node.setAttribute(\"data:pathOrig\", r), t.attr({\n          d: r\n        }));\n      }\n    }, {\n      key: \"pieClicked\",\n      value: function value(t) {\n        var e,\n            i = this.w,\n            s = this.size + 4,\n            a = i.globals.dom.Paper.select(\"#apexcharts-\".concat(i.config.chart.type.toLowerCase(), \"-slice-\").concat(t)).members[0],\n            n = a.attr(\"d\");\n\n        if (\"true\" !== a.attr(\"data:pieClicked\")) {\n          var r = i.globals.dom.baseEl.querySelectorAll(\".apexcharts-pie-area\");\n          Array.prototype.forEach.call(r, function (t) {\n            t.setAttribute(\"data:pieClicked\", \"false\");\n            var e = t.getAttribute(\"data:pathOrig\");\n            t.setAttribute(\"d\", e);\n          }), a.attr(\"data:pieClicked\", \"true\");\n          var o = parseInt(a.attr(\"data:startAngle\")),\n              l = parseInt(a.attr(\"data:angle\"));\n          e = this.getPiePath({\n            me: this,\n            startAngle: o,\n            angle: l,\n            size: s\n          }), 360 !== l && a.plot(e).animate(1).plot(n).animate(100).plot(e);\n        } else {\n          a.attr({\n            \"data:pieClicked\": \"false\"\n          }), this.revertDataLabelsInner(a.node, this.donutDataLabels);\n          var h = a.attr(\"data:pathOrig\");\n          a.attr({\n            d: h\n          });\n        }\n      }\n    }, {\n      key: \"getChangedPath\",\n      value: function value(t, e) {\n        var i = \"\";\n        return this.dynamicAnim && this.w.globals.dataChanged && (i = this.getPiePath({\n          me: this,\n          startAngle: t,\n          angle: e - t,\n          size: this.size\n        })), i;\n      }\n    }, {\n      key: \"getPiePath\",\n      value: function value(t) {\n        var e = t.me,\n            i = t.startAngle,\n            s = t.angle,\n            a = t.size,\n            n = this.w,\n            r = i,\n            o = Math.PI * (r - 90) / 180,\n            l = s + i;\n        Math.ceil(l) >= 360 && (l = 359.99);\n        var h = Math.PI * (l - 90) / 180,\n            c = e.centerX + a * Math.cos(o),\n            u = e.centerY + a * Math.sin(o),\n            g = e.centerX + a * Math.cos(h),\n            f = e.centerY + a * Math.sin(h),\n            p = d.polarToCartesian(e.centerX, e.centerY, e.donutSize, l),\n            x = d.polarToCartesian(e.centerX, e.centerY, e.donutSize, r),\n            b = s > 180 ? 1 : 0;\n        return \"donut\" === n.config.chart.type ? [\"M\", c, u, \"A\", a, a, 0, b, 1, g, f, \"L\", p.x, p.y, \"A\", e.donutSize, e.donutSize, 0, b, 0, x.x, x.y, \"L\", c, u, \"z\"].join(\" \") : \"pie\" === n.config.chart.type ? [\"M\", c, u, \"A\", a, a, 0, b, 1, g, f, \"L\", e.centerX, e.centerY, \"L\", c, u].join(\" \") : [\"M\", c, u, \"A\", a, a, 0, b, 1, g, f].join(\" \");\n      }\n    }, {\n      key: \"renderInnerDataLabels\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new f(this.ctx),\n            a = s.group({\n          \"class\": \"apexcharts-datalabels-group\",\n          transform: \"translate(\".concat(e.translateX ? e.translateX : 0, \", \").concat(e.translateY ? e.translateY : 0, \")\")\n        }),\n            n = t.total.show;\n        a.node.style.opacity = e.opacity;\n        var r,\n            o,\n            l = e.centerX,\n            h = e.centerY;\n        r = void 0 === t.name.color ? i.globals.colors[0] : t.name.color, o = void 0 === t.value.color ? i.config.chart.foreColor : t.value.color;\n        var c = t.value.formatter,\n            d = \"\",\n            u = \"\";\n\n        if (n ? (r = t.total.color, u = t.total.label, d = t.total.formatter(i)) : 1 === i.globals.series.length && (d = c(i.globals.series[0], i), u = i.globals.seriesNames[0]), t.name.show) {\n          var g = s.drawText({\n            x: l,\n            y: h + parseInt(t.name.offsetY),\n            text: u,\n            textAnchor: \"middle\",\n            foreColor: r,\n            fontSize: t.name.fontSize,\n            fontFamily: t.name.fontFamily\n          });\n          g.node.classList.add(\"apexcharts-datalabel-label\"), a.add(g);\n        }\n\n        if (t.value.show) {\n          var p = t.name.show ? parseInt(t.value.offsetY) + 16 : t.value.offsetY,\n              x = s.drawText({\n            x: l,\n            y: h + p,\n            text: d,\n            textAnchor: \"middle\",\n            foreColor: o,\n            fontSize: t.value.fontSize,\n            fontFamily: t.value.fontFamily\n          });\n          x.node.classList.add(\"apexcharts-datalabel-value\"), a.add(x);\n        }\n\n        return a;\n      }\n    }, {\n      key: \"printInnerLabels\",\n      value: function value(t, e, i, s) {\n        var a,\n            n = this.w;\n        s ? a = void 0 === t.name.color ? n.globals.colors[parseInt(s.parentNode.getAttribute(\"rel\")) - 1] : t.name.color : n.globals.series.length > 1 && t.total.show && (a = t.total.color);\n        var r = n.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-label\"),\n            o = n.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-value\");\n        i = (0, t.value.formatter)(i, n), s || \"function\" != typeof t.total.formatter || (i = t.total.formatter(n)), null !== r && (r.textContent = e), null !== o && (o.textContent = i), null !== r && (r.style.fill = a);\n      }\n    }, {\n      key: \"printDataLabelsInner\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = t.getAttribute(\"data:value\"),\n            a = i.globals.seriesNames[parseInt(t.parentNode.getAttribute(\"rel\")) - 1];\n        i.globals.series.length > 1 && this.printInnerLabels(e, a, s, t);\n        var n = i.globals.dom.baseEl.querySelector(\".apexcharts-datalabels-group\");\n        null !== n && (n.style.opacity = 1);\n      }\n    }, {\n      key: \"revertDataLabelsInner\",\n      value: function value(e, i, s) {\n        var a = this,\n            n = this.w,\n            r = n.globals.dom.baseEl.querySelector(\".apexcharts-datalabels-group\");\n\n        if (i.total.show && n.globals.series.length > 1) {\n          new t(this.ctx).printInnerLabels(i, i.total.label, i.total.formatter(n));\n        } else {\n          var o = document.querySelectorAll(\".apexcharts-pie-area\"),\n              l = !1;\n          if (o.forEach(function (t) {\n            \"true\" === t.getAttribute(\"data:pieClicked\") && (l = !0, a.printDataLabelsInner(t, i));\n          }), !l) if (n.globals.selectedDataPoints.length && n.globals.series.length > 1) {\n            if (n.globals.selectedDataPoints[0].length > 0) {\n              var h = n.globals.selectedDataPoints[0],\n                  c = n.globals.dom.baseEl.querySelector(\"#apexcharts-\".concat(n.config.chart.type.toLowerCase(), \"-slice-\").concat(h));\n              this.printDataLabelsInner(c, i);\n            } else r && n.globals.selectedDataPoints.length && 0 === n.globals.selectedDataPoints[0].length && (r.style.opacity = 0);\n          } else r && n.globals.series.length > 1 && (r.style.opacity = 0);\n        }\n      }\n    }]), t;\n  }(),\n      Y = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;\n      var s = this.w;\n      this.graphics = new f(this.ctx), this.lineColorArr = void 0 !== s.globals.stroke.colors ? s.globals.stroke.colors : s.globals.colors, this.defaultSize = s.globals.svgHeight < s.globals.svgWidth ? s.globals.svgHeight - 35 : s.globals.gridWidth, this.maxValue = this.w.globals.maxY, this.polygons = s.config.plotOptions.radar.polygons, this.maxLabelWidth = 20;\n      var a = s.globals.labels.slice().sort(function (t, e) {\n        return e.length - t.length;\n      })[0],\n          n = this.graphics.getTextRects(a, s.config.dataLabels.style.fontSize);\n      this.size = this.defaultSize / 2.1 - s.config.stroke.width - s.config.chart.dropShadow.blur - n.width / 1.75, void 0 !== s.config.plotOptions.radar.size && (this.size = s.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];\n    }\n\n    return s(t, [{\n      key: \"draw\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            s = new S(this.ctx),\n            a = [];\n        this.dataPointsLen = t[i.globals.maxValsInArrayIndex].length, this.disAngle = 2 * Math.PI / this.dataPointsLen;\n        var r = i.globals.gridWidth / 2,\n            o = i.globals.gridHeight / 2,\n            l = this.graphics.group({\n          \"class\": \"apexcharts-radar-series\",\n          \"data:innerTranslateX\": r,\n          \"data:innerTranslateY\": o - 25,\n          transform: \"translate(\".concat(r || 0, \", \").concat(o || 0, \")\")\n        }),\n            h = [],\n            c = null;\n\n        if (this.yaxisLabels = this.graphics.group({\n          \"class\": \"apexcharts-yaxis\"\n        }), t.forEach(function (t, r) {\n          var o = e.graphics.group().attr({\n            \"class\": \"apexcharts-series\",\n            seriesName: d.escapeString(i.globals.seriesNames[r]),\n            rel: r + 1,\n            \"data:realIndex\": r\n          });\n          e.dataRadiusOfPercent[r] = [], e.dataRadius[r] = [], e.angleArr[r] = [], t.forEach(function (t, i) {\n            e.dataRadiusOfPercent[r][i] = t / e.maxValue, e.dataRadius[r][i] = e.dataRadiusOfPercent[r][i] * e.size, e.angleArr[r][i] = i * e.disAngle;\n          }), h = e.getDataPointsPos(e.dataRadius[r], e.angleArr[r]);\n          var l = e.createPaths(h, {\n            x: 0,\n            y: 0\n          });\n          c = e.graphics.group({\n            \"class\": \"apexcharts-series-markers-wrap hidden\"\n          }), i.globals.delayedElements.push({\n            el: c.node,\n            index: r\n          });\n          var g = {\n            i: r,\n            realIndex: r,\n            animationDelay: r,\n            initialSpeed: i.config.chart.animations.speed,\n            dataChangeSpeed: i.config.chart.animations.dynamicAnimation.speed,\n            className: \"apexcharts-radar\",\n            id: \"apexcharts-radar\",\n            shouldClipToGrid: !1,\n            bindEventsOnPaths: !1,\n            stroke: i.globals.stroke.colors[r],\n            strokeLineCap: i.config.stroke.lineCap\n          },\n              f = null;\n          i.globals.previousPaths.length > 0 && (f = e.getPathFrom(r));\n\n          for (var p = 0; p < l.linePathsTo.length; p++) {\n            var x = e.graphics.renderPaths(n({}, g, {\n              pathFrom: null === f ? l.linePathsFrom[p] : f,\n              pathTo: l.linePathsTo[p],\n              strokeWidth: Array.isArray(i.config.stroke.width) ? i.config.stroke.width[r] : i.config.stroke.width,\n              fill: \"none\",\n              drawShadow: !1\n            }));\n            o.add(x);\n            var b = s.fillPath({\n              seriesNumber: r\n            }),\n                m = e.graphics.renderPaths(n({}, g, {\n              pathFrom: null === f ? l.areaPathsFrom[p] : f,\n              pathTo: l.areaPathsTo[p],\n              strokeWidth: 0,\n              fill: b,\n              drawShadow: !1\n            }));\n\n            if (i.config.chart.dropShadow.enabled) {\n              var v = new u(e.ctx),\n                  y = i.config.chart.dropShadow;\n              v.dropShadow(m, Object.assign({}, y, {\n                noUserSpaceOnUse: !0\n              }), r);\n            }\n\n            o.add(m);\n          }\n\n          t.forEach(function (t, i) {\n            var s = new C(e.ctx).getMarkerConfig(\"apexcharts-marker\", r),\n                a = e.graphics.drawMarker(h[i].x, h[i].y, s);\n            a.attr(\"rel\", i), a.attr(\"j\", i), a.attr(\"index\", r), a.node.setAttribute(\"default-marker-size\", s.pSize);\n            var n = e.graphics.group({\n              \"class\": \"apexcharts-series-markers\"\n            });\n            n && n.add(a), c.add(n), o.add(c);\n          }), a.push(o);\n        }), this.drawPolygons({\n          parent: l\n        }), i.config.dataLabels.enabled) {\n          var g = this.drawLabels();\n          l.add(g);\n        }\n\n        return l.add(this.yaxisLabels), a.forEach(function (t) {\n          l.add(t);\n        }), l;\n      }\n    }, {\n      key: \"drawPolygons\",\n      value: function value(t) {\n        for (var e = this, i = this.w, s = t.parent, a = i.globals.yAxisScale[0].result.reverse(), n = a.length, r = [], o = this.size / (n - 1), l = 0; l < n; l++) {\n          r[l] = o * l;\n        }\n\n        r.reverse();\n        var h = [],\n            c = [];\n        r.forEach(function (t, i) {\n          var s = e.getPolygonPos(t),\n              a = \"\";\n          s.forEach(function (t, s) {\n            if (0 === i) {\n              var n = e.graphics.drawLine(t.x, t.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[s] : e.polygons.connectorColors);\n              c.push(n);\n            }\n\n            0 === s && e.yaxisLabelsTextsPos.push({\n              x: t.x,\n              y: t.y\n            }), a += t.x + \",\" + t.y + \" \";\n          }), h.push(a);\n        }), h.forEach(function (t, a) {\n          var n = e.polygons.strokeColors,\n              r = e.graphics.drawPolygon(t, Array.isArray(n) ? n[a] : n, i.globals.radarPolygons.fill.colors[a]);\n          s.add(r);\n        }), c.forEach(function (t) {\n          s.add(t);\n        }), i.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function (t, i) {\n          var s = e.drawYAxisText(t.x, t.y, i, a[i]);\n          e.yaxisLabels.add(s);\n        });\n      }\n    }, {\n      key: \"drawYAxisText\",\n      value: function value(t, e, i, s) {\n        var a = this.w,\n            n = a.config.yaxis[0],\n            r = a.globals.yLabelFormatters[0];\n        return this.graphics.drawText({\n          x: t + n.labels.offsetX,\n          y: e + n.labels.offsetY,\n          text: r(s, i),\n          textAnchor: \"middle\",\n          fontSize: n.labels.style.fontSize,\n          fontFamily: n.labels.style.fontFamily,\n          foreColor: n.labels.style.color\n        });\n      }\n    }, {\n      key: \"drawLabels\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = \"middle\",\n            s = e.config.dataLabels,\n            a = this.graphics.group({\n          \"class\": \"apexcharts-datalabels\"\n        }),\n            n = this.getPolygonPos(this.size),\n            r = 0,\n            o = 0;\n        return e.globals.labels.forEach(function (l, h) {\n          var c = s.formatter,\n              d = new z(t.ctx);\n\n          if (n[h]) {\n            r = n[h].x, o = n[h].y, Math.abs(n[h].x) >= 10 ? n[h].x > 0 ? (i = \"start\", r += 10) : n[h].x < 0 && (i = \"end\", r -= 10) : i = \"middle\", Math.abs(n[h].y) >= t.size - 10 && (n[h].y < 0 ? o -= 10 : n[h].y > 0 && (o += 10));\n            var u = c(l, {\n              seriesIndex: -1,\n              dataPointIndex: h,\n              w: e\n            });\n            d.plotDataLabelsText({\n              x: r,\n              y: o,\n              text: u,\n              textAnchor: i,\n              i: h,\n              j: h,\n              parent: a,\n              dataLabelsConfig: s,\n              offsetCorrection: !1\n            });\n          }\n        }), a;\n      }\n    }, {\n      key: \"createPaths\",\n      value: function value(t, e) {\n        var i = this,\n            s = [],\n            a = [],\n            n = [],\n            r = [];\n\n        if (t.length) {\n          a = [this.graphics.move(e.x, e.y)], r = [this.graphics.move(e.x, e.y)];\n          var o = this.graphics.move(t[0].x, t[0].y),\n              l = this.graphics.move(t[0].x, t[0].y);\n          t.forEach(function (e, s) {\n            o += i.graphics.line(e.x, e.y), l += i.graphics.line(e.x, e.y), s === t.length - 1 && (o += \"Z\", l += \"Z\");\n          }), s.push(o), n.push(l);\n        }\n\n        return {\n          linePathsFrom: a,\n          linePathsTo: s,\n          areaPathsFrom: r,\n          areaPathsTo: n\n        };\n      }\n    }, {\n      key: \"getPathFrom\",\n      value: function value(t) {\n        for (var e = this.w, i = null, s = 0; s < e.globals.previousPaths.length; s++) {\n          var a = e.globals.previousPaths[s];\n          a.paths.length > 0 && parseInt(a.realIndex) === parseInt(t) && void 0 !== e.globals.previousPaths[s].paths[0] && (i = e.globals.previousPaths[s].paths[0].d);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getDataPointsPos\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;\n        t = t || [], e = e || [];\n\n        for (var s = [], a = 0; a < i; a++) {\n          var n = {};\n          n.x = t[a] * Math.sin(e[a]), n.y = -t[a] * Math.cos(e[a]), s.push(n);\n        }\n\n        return s;\n      }\n    }, {\n      key: \"getPolygonPos\",\n      value: function value(t) {\n        for (var e = [], i = 2 * Math.PI / this.dataPointsLen, s = 0; s < this.dataPointsLen; s++) {\n          var a = {};\n          a.x = t * Math.sin(s * i), a.y = -t * Math.cos(s * i), e.push(a);\n        }\n\n        return e;\n      }\n    }]), t;\n  }(),\n      F = function (t) {\n    function i(t) {\n      var s;\n      e(this, i), (s = h(this, o(i).call(this, t))).ctx = t, s.w = t.w, s.animBeginArr = [0], s.animDur = 0;\n      var a = s.w;\n      return s.startAngle = a.config.plotOptions.radialBar.startAngle, s.endAngle = a.config.plotOptions.radialBar.endAngle, s.trackStartAngle = a.config.plotOptions.radialBar.track.startAngle, s.trackEndAngle = a.config.plotOptions.radialBar.track.endAngle, s.radialDataLabels = a.config.plotOptions.radialBar.dataLabels, s.trackStartAngle || (s.trackStartAngle = s.startAngle), s.trackEndAngle || (s.trackEndAngle = s.endAngle), 360 === s.endAngle && (s.endAngle = 359.99), s.fullAngle = 360 - a.config.plotOptions.radialBar.endAngle - a.config.plotOptions.radialBar.startAngle, s.margin = parseInt(a.config.plotOptions.radialBar.track.margin), s;\n    }\n\n    return r(i, I), s(i, [{\n      key: \"draw\",\n      value: function value(t) {\n        var e = this.w,\n            i = new f(this.ctx),\n            s = i.group({\n          \"class\": \"apexcharts-radialbar\"\n        }),\n            a = i.group(),\n            n = this.defaultSize / 2,\n            r = e.globals.gridWidth / 2,\n            o = this.defaultSize / 2.05 - e.config.stroke.width - e.config.chart.dropShadow.blur;\n        void 0 !== e.config.plotOptions.radialBar.size && (o = e.config.plotOptions.radialBar.size);\n        var l = e.globals.fill.colors;\n\n        if (e.config.plotOptions.radialBar.track.show) {\n          var h = this.drawTracks({\n            size: o,\n            centerX: r,\n            centerY: n,\n            colorArr: l,\n            series: t\n          });\n          a.add(h);\n        }\n\n        var c = this.drawArcs({\n          size: o,\n          centerX: r,\n          centerY: n,\n          colorArr: l,\n          series: t\n        });\n        return a.add(c.g), \"front\" === e.config.plotOptions.radialBar.hollow.position && (c.g.add(c.elHollow), c.dataLabels && c.g.add(c.dataLabels)), s.add(a), s;\n      }\n    }, {\n      key: \"drawTracks\",\n      value: function value(t) {\n        var e = this.w,\n            i = new f(this.ctx),\n            s = i.group(),\n            a = new u(this.ctx),\n            n = new S(this.ctx),\n            r = this.getStrokeWidth(t);\n        t.size = t.size - r / 2;\n\n        for (var o = 0; o < t.series.length; o++) {\n          var l = i.group({\n            \"class\": \"apexcharts-radialbar-track apexcharts-track\"\n          });\n          s.add(l), l.attr({\n            id: \"apexcharts-track-\" + o,\n            rel: o + 1\n          }), t.size = t.size - r - this.margin;\n          var h = e.config.plotOptions.radialBar.track,\n              c = n.fillPath({\n            seriesNumber: 0,\n            size: t.size,\n            fillColors: Array.isArray(h.background) ? h.background[o] : h.background,\n            solid: !0\n          }),\n              d = this.trackStartAngle,\n              g = this.trackEndAngle;\n          Math.abs(g) + Math.abs(d) >= 360 && (g = 360 - Math.abs(this.startAngle) - .1);\n          var p = i.drawPath({\n            d: \"\",\n            stroke: c,\n            strokeWidth: r * parseInt(h.strokeWidth) / 100,\n            fill: \"none\",\n            strokeOpacity: h.opacity,\n            classes: \"apexcharts-radialbar-area\"\n          });\n\n          if (h.dropShadow.enabled) {\n            var x = h.dropShadow;\n            a.dropShadow(p, x);\n          }\n\n          l.add(p), p.attr(\"id\", \"apexcharts-radialbarTrack-\" + o), new I(this.ctx).animatePaths(p, {\n            centerX: t.centerX,\n            centerY: t.centerY,\n            endAngle: g,\n            startAngle: d,\n            size: t.size,\n            i: o,\n            totalItems: 2,\n            animBeginArr: 0,\n            dur: 0,\n            isTrack: !0,\n            easing: e.globals.easing\n          });\n        }\n\n        return s;\n      }\n    }, {\n      key: \"drawArcs\",\n      value: function value(t) {\n        var e = this.w,\n            i = new f(this.ctx),\n            s = new S(this.ctx),\n            a = new u(this.ctx),\n            n = i.group(),\n            r = this.getStrokeWidth(t);\n        t.size = t.size - r / 2;\n        var o = e.config.plotOptions.radialBar.hollow.background,\n            l = t.size - r * t.series.length - this.margin * t.series.length - r * parseInt(e.config.plotOptions.radialBar.track.strokeWidth) / 100 / 2,\n            h = l - e.config.plotOptions.radialBar.hollow.margin;\n        void 0 !== e.config.plotOptions.radialBar.hollow.image && (o = this.drawHollowImage(t, n, l, o));\n        var c = this.drawHollow({\n          size: h,\n          centerX: t.centerX,\n          centerY: t.centerY,\n          fill: o\n        });\n\n        if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {\n          var g = e.config.plotOptions.radialBar.hollow.dropShadow;\n          a.dropShadow(c, g);\n        }\n\n        var p = 1;\n        !this.radialDataLabels.total.show && e.globals.series.length > 1 && (p = 0);\n        var x = new I(this.ctx),\n            b = null;\n        this.radialDataLabels.show && (b = x.renderInnerDataLabels(this.radialDataLabels, {\n          hollowSize: l,\n          centerX: t.centerX,\n          centerY: t.centerY,\n          opacity: p\n        })), \"back\" === e.config.plotOptions.radialBar.hollow.position && (n.add(c), b && n.add(b));\n        var m = !1;\n        e.config.plotOptions.radialBar.inverseOrder && (m = !0);\n\n        for (var v = m ? t.series.length - 1 : 0; m ? v >= 0 : v < t.series.length; m ? v-- : v++) {\n          var y = i.group({\n            \"class\": \"apexcharts-series apexcharts-radial-series\",\n            seriesName: d.escapeString(e.globals.seriesNames[v])\n          });\n          n.add(y), y.attr({\n            id: \"apexcharts-series-\" + v,\n            rel: v + 1\n          }), this.ctx.series.addCollapsedClassToSeries(y, v), t.size = t.size - r - this.margin;\n          var w = s.fillPath({\n            seriesNumber: v,\n            size: t.size,\n            value: t.series[v]\n          }),\n              k = this.startAngle,\n              A = void 0,\n              C = Math.abs(e.config.plotOptions.radialBar.endAngle - e.config.plotOptions.radialBar.startAngle),\n              L = d.negToZero(t.series[v] > 100 ? 100 : t.series[v]) / 100,\n              z = Math.round(C * L) + this.startAngle,\n              P = void 0;\n          e.globals.dataChanged && (A = this.startAngle, P = Math.round(C * d.negToZero(e.globals.previousPaths[v]) / 100) + A), Math.abs(z) + Math.abs(k) >= 360 && (z -= .01), Math.abs(P) + Math.abs(A) >= 360 && (P -= .01);\n          var M = z - k,\n              E = Array.isArray(e.config.stroke.dashArray) ? e.config.stroke.dashArray[v] : e.config.stroke.dashArray,\n              T = i.drawPath({\n            d: \"\",\n            stroke: w,\n            strokeWidth: r,\n            fill: \"none\",\n            fillOpacity: e.config.fill.opacity,\n            classes: \"apexcharts-radialbar-area\",\n            strokeDashArray: E\n          });\n\n          if (f.setAttrs(T.node, {\n            \"data:angle\": M,\n            \"data:value\": t.series[v]\n          }), e.config.chart.dropShadow.enabled) {\n            var X = e.config.chart.dropShadow;\n            a.dropShadow(T, X, v);\n          }\n\n          this.addListeners(T, this.radialDataLabels);\n          var Y = new I(this.ctx);\n          y.add(T), T.attr({\n            id: \"apexcharts-radialbar-slice-\" + v,\n            index: 0,\n            j: v\n          });\n          var F = 0;\n          !Y.initialAnim || e.globals.resized || e.globals.dataChanged || (F = (z - k) / 360 * e.config.chart.animations.speed, this.animDur = F / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), e.globals.dataChanged && (F = (z - k) / 360 * e.config.chart.animations.dynamicAnimation.speed, this.animDur = F / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), Y.animatePaths(T, {\n            centerX: t.centerX,\n            centerY: t.centerY,\n            endAngle: z,\n            startAngle: k,\n            prevEndAngle: P,\n            prevStartAngle: A,\n            size: t.size,\n            i: v,\n            totalItems: 2,\n            animBeginArr: this.animBeginArr,\n            dur: F,\n            shouldSetPrevPaths: !0,\n            easing: e.globals.easing\n          });\n        }\n\n        return {\n          g: n,\n          elHollow: c,\n          dataLabels: b\n        };\n      }\n    }, {\n      key: \"drawHollow\",\n      value: function value(t) {\n        var e = new f(this.ctx).drawCircle(2 * t.size);\n        return e.attr({\n          \"class\": \"apexcharts-radialbar-hollow\",\n          cx: t.centerX,\n          cy: t.centerY,\n          r: t.size,\n          fill: t.fill\n        }), e;\n      }\n    }, {\n      key: \"drawHollowImage\",\n      value: function value(t, e, i, s) {\n        var a = this.w,\n            n = new S(this.ctx),\n            r = (Math.random() + 1).toString(36).substring(4),\n            o = a.config.plotOptions.radialBar.hollow.image;\n        if (a.config.plotOptions.radialBar.hollow.imageClipped) n.clippedImgArea({\n          width: i,\n          height: i,\n          image: o,\n          patternID: \"pattern\".concat(a.globals.cuid).concat(r)\n        }), s = \"url(#pattern\".concat(a.globals.cuid).concat(r, \")\");else {\n          var l = a.config.plotOptions.radialBar.hollow.imageWidth,\n              h = a.config.plotOptions.radialBar.hollow.imageHeight;\n\n          if (void 0 === l && void 0 === h) {\n            var c = a.globals.dom.Paper.image(o).loaded(function (e) {\n              this.move(t.centerX - e.width / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - e.height / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetY);\n            });\n            e.add(c);\n          } else {\n            var d = a.globals.dom.Paper.image(o).loaded(function (e) {\n              this.move(t.centerX - l / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - h / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l, h);\n            });\n            e.add(d);\n          }\n        }\n        return s;\n      }\n    }, {\n      key: \"getStrokeWidth\",\n      value: function value(t) {\n        var e = this.w;\n        return t.size * (100 - parseInt(e.config.plotOptions.radialBar.hollow.size)) / 100 / (t.series.length + 1) - this.margin;\n      }\n    }]), i;\n  }(),\n      R = function (t) {\n    function i() {\n      return e(this, i), h(this, o(i).apply(this, arguments));\n    }\n\n    return r(i, P), s(i, [{\n      key: \"draw\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new f(this.ctx),\n            a = new S(this.ctx);\n        this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t, this.seriesRangeStart = i.globals.seriesRangeStart, this.seriesRangeEnd = i.globals.seriesRangeEnd, this.initVariables(t);\n\n        for (var n = s.group({\n          \"class\": \"apexcharts-rangebar-series apexcharts-plot-series\"\n        }), r = 0, o = 0; r < t.length; r++, o++) {\n          var l,\n              h,\n              c,\n              u,\n              g = void 0,\n              p = void 0,\n              x = void 0,\n              b = void 0,\n              m = [],\n              v = [],\n              y = i.globals.comboCharts ? e[r] : r,\n              w = s.group({\n            \"class\": \"apexcharts-series\",\n            seriesName: d.escapeString(i.globals.seriesNames[y]),\n            rel: r + 1,\n            \"data:realIndex\": y\n          });\n          t[r].length > 0 && (this.visibleI = this.visibleI + 1);\n          var k = 0,\n              A = 0,\n              C = 0;\n          this.yRatio.length > 1 && (this.yaxisIndex = y);\n          var L = this.initialPositions();\n          b = L.y, h = L.yDivision, A = L.barHeight, u = L.zeroW, x = L.x, C = L.barWidth, l = L.xDivision, c = L.zeroH, v.push(x + C / 2);\n\n          for (var z = s.group({\n            \"class\": \"apexcharts-datalabels\"\n          }), P = 0, M = i.globals.dataPoints; P < i.globals.dataPoints; P++, M--) {\n            void 0 === this.series[r][P] || null === t[r][P] ? this.isNullValue = !0 : this.isNullValue = !1, i.config.stroke.show && (k = this.isNullValue ? 0 : Array.isArray(this.strokeWidth) ? this.strokeWidth[y] : this.strokeWidth);\n            var E = null;\n            this.isHorizontal ? C = (E = this.drawRangeBarPaths({\n              indexes: {\n                i: r,\n                j: P,\n                realIndex: y,\n                bc: o\n              },\n              barHeight: A,\n              strokeWidth: k,\n              pathTo: g,\n              pathFrom: p,\n              zeroW: u,\n              x: x,\n              y: b,\n              yDivision: h,\n              elSeries: w\n            })).barWidth : A = (E = this.drawRangeColumnPaths({\n              indexes: {\n                i: r,\n                j: P,\n                realIndex: y,\n                bc: o\n              },\n              x: x,\n              y: b,\n              xDivision: l,\n              pathTo: g,\n              pathFrom: p,\n              barWidth: C,\n              zeroH: c,\n              strokeWidth: k,\n              elSeries: w\n            })).barHeight, g = E.pathTo, p = E.pathFrom, b = E.y, x = E.x, P > 0 && v.push(x + C / 2), m.push(b);\n            var T = a.fillPath({\n              seriesNumber: y\n            }),\n                X = i.globals.stroke.colors[y];\n            w = this.renderSeries({\n              realIndex: y,\n              pathFill: T,\n              lineFill: X,\n              j: P,\n              i: r,\n              pathFrom: p,\n              pathTo: g,\n              strokeWidth: k,\n              elSeries: w,\n              x: x,\n              y: b,\n              series: t,\n              barHeight: A,\n              barWidth: C,\n              elDataLabelsWrap: z,\n              visibleSeries: this.visibleI,\n              type: \"rangebar\"\n            });\n          }\n\n          i.globals.seriesXvalues[y] = v, i.globals.seriesYvalues[y] = m, n.add(w);\n        }\n\n        return n;\n      }\n    }, {\n      key: \"drawRangeColumnPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.x,\n            s = (t.y, t.strokeWidth),\n            a = t.xDivision,\n            n = t.pathTo,\n            r = t.pathFrom,\n            o = t.barWidth,\n            l = t.zeroH,\n            h = this.w,\n            c = new f(this.ctx),\n            d = e.i,\n            u = e.j,\n            g = this.yRatio[this.yaxisIndex],\n            p = e.realIndex,\n            x = this.getRangeValue(p, u),\n            b = Math.min(x.start, x.end),\n            m = Math.max(x.start, x.end);\n        h.globals.isXNumeric && (i = (h.globals.seriesX[d][u] - h.globals.minX) / this.xRatio - o / 2);\n        var v = i + o * this.visibleI;\n        void 0 === this.series[d][u] || null === this.series[d][u] ? b = l : (b = l - b / g, m = l - m / g);\n        var y = Math.abs(m - b);\n        return c.move(v, l), r = c.move(v, b), h.globals.previousPaths.length > 0 && (r = this.getPathFrom(p, u, !0)), n = c.move(v, m) + c.line(v + o, m) + c.line(v + o, b) + c.line(v, b) + c.line(v, m - s / 2), r = r + c.move(v, b) + c.line(v + o, b) + c.line(v + o, b) + c.line(v, b), h.globals.isXNumeric || (i += a), {\n          pathTo: n,\n          pathFrom: r,\n          barHeight: y,\n          x: i,\n          y: m,\n          barXPosition: v\n        };\n      }\n    }, {\n      key: \"drawRangeBarPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = (t.x, t.y),\n            s = t.yDivision,\n            a = t.pathTo,\n            n = t.pathFrom,\n            r = t.barHeight,\n            o = t.zeroW,\n            l = this.w,\n            h = new f(this.ctx),\n            c = e.i,\n            d = e.j,\n            u = e.realIndex,\n            g = o,\n            p = o;\n        l.globals.isXNumeric && (i = (l.globals.seriesX[c][d] - l.globals.minX) / this.invertedXRatio - r);\n        var x = i + r * this.visibleI;\n        void 0 !== this.series[c][d] && null !== this.series[c][d] && (g = o + this.seriesRangeStart[c][d] / this.invertedYRatio, p = o + this.seriesRangeEnd[c][d] / this.invertedYRatio), h.move(o, x), n = h.move(o, x), l.globals.previousPaths.length > 0 && (n = this.getPathFrom(u, d));\n        var b = Math.abs(p - g);\n        return a = h.move(g, x) + h.line(p, x) + h.line(p, x + r) + h.line(g, x + r) + h.line(g, x), n = n + h.line(g, x) + h.line(g, x + r) + h.line(g, x + r) + h.line(g, x), l.globals.isXNumeric || (i += s), {\n          pathTo: a,\n          pathFrom: n,\n          barWidth: b,\n          x: p,\n          y: i,\n          barYPosition: x\n        };\n      }\n    }, {\n      key: \"getRangeValue\",\n      value: function value(t, e) {\n        var i = this.w;\n        return {\n          start: i.globals.seriesRangeStart[t][e],\n          end: i.globals.seriesRangeEnd[t][e]\n        };\n      }\n    }]), i;\n  }(),\n      D = function () {\n    function t(i, s, a) {\n      e(this, t), this.ctx = i, this.w = i.w, this.xyRatios = s, this.pointsChart = !(\"bubble\" !== this.w.config.chart.type && \"scatter\" !== this.w.config.chart.type) || a, this.scatter = new L(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.yaxisIndex = 0;\n    }\n\n    return s(t, [{\n      key: \"draw\",\n      value: function value(t, e, i) {\n        var s = this.w,\n            a = new f(this.ctx),\n            r = new S(this.ctx),\n            o = s.globals.comboCharts ? e : s.config.chart.type,\n            l = a.group({\n          \"class\": \"apexcharts-\".concat(o, \"-series apexcharts-plot-series\")\n        }),\n            h = new y(this.ctx, s);\n        t = h.getLogSeries(t);\n        var c = this.xyRatios.yRatio;\n        c = h.getLogYRatios(c);\n\n        for (var u = this.xyRatios.zRatio, g = this.xyRatios.xRatio, p = this.xyRatios.baseLineY, x = [], b = [], m = 0, v = 0; v < t.length; v++) {\n          if (\"line\" === o && (\"gradient\" === s.config.fill.type || \"gradient\" === s.config.fill.type[v]) && h.seriesHaveSameValues(v)) {\n            var w = t[v].slice();\n            w[w.length - 1] = w[w.length - 1] + 1e-6, t[v] = w;\n          }\n\n          var k = s.globals.gridWidth / s.globals.dataPoints,\n              A = s.globals.comboCharts ? i[v] : v;\n          c.length > 1 && (this.yaxisIndex = A), this.isReversed = s.config.yaxis[this.yaxisIndex] && s.config.yaxis[this.yaxisIndex].reversed;\n          var L = [],\n              P = [],\n              M = s.globals.gridHeight - p[this.yaxisIndex] - (this.isReversed ? s.globals.gridHeight : 0) + (this.isReversed ? 2 * p[this.yaxisIndex] : 0),\n              E = M;\n          M > s.globals.gridHeight && (E = s.globals.gridHeight), m = k / 2;\n          var T = s.globals.padHorizontal + m,\n              X = 1;\n          s.globals.isXNumeric && s.globals.seriesX.length > 0 && (T = (s.globals.seriesX[A][0] - s.globals.minX) / g), P.push(T);\n          var I = void 0,\n              Y = void 0,\n              F = void 0,\n              R = void 0,\n              D = [],\n              N = [],\n              O = a.group({\n            \"class\": \"apexcharts-series\",\n            seriesName: d.escapeString(s.globals.seriesNames[A])\n          }),\n              H = a.group({\n            \"class\": \"apexcharts-series-markers-wrap\"\n          }),\n              W = a.group({\n            \"class\": \"apexcharts-datalabels\"\n          });\n          this.ctx.series.addCollapsedClassToSeries(O, A);\n          var B = t[v].length === s.globals.dataPoints;\n          O.attr({\n            \"data:longestSeries\": B,\n            rel: v + 1,\n            \"data:realIndex\": A\n          }), this.appendPathFrom = !0;\n          var V = T,\n              G = void 0,\n              _ = V,\n              j = M,\n              U = 0;\n\n          if (j = this.determineFirstPrevY({\n            i: v,\n            series: t,\n            yRatio: c[this.yaxisIndex],\n            zeroY: M,\n            prevY: j,\n            prevSeriesY: b,\n            lineYPosition: U\n          }).prevY, L.push(j), G = j, null === t[v][0]) {\n            for (var q = 0; q < t[v].length; q++) {\n              if (null !== t[v][q]) {\n                _ = k * q, j = M - t[v][q] / c[this.yaxisIndex], I = a.move(_, j), Y = a.move(_, E);\n                break;\n              }\n            }\n          } else I = a.move(_, j), Y = a.move(_, E) + a.line(_, j);\n\n          if (F = a.move(-1, M) + a.line(-1, M), R = a.move(-1, M) + a.line(-1, M), s.globals.previousPaths.length > 0) {\n            var Z = this.checkPreviousPaths({\n              pathFromLine: F,\n              pathFromArea: R,\n              realIndex: A\n            });\n            F = Z.pathFromLine, R = Z.pathFromArea;\n          }\n\n          for (var $ = s.globals.dataPoints > 1 ? s.globals.dataPoints - 1 : s.globals.dataPoints, J = 0; J < $; J++) {\n            if (s.globals.isXNumeric) {\n              var Q = s.globals.seriesX[A][J + 1];\n              void 0 === s.globals.seriesX[A][J + 1] && (Q = s.globals.seriesX[A][$ - 1]), T = (Q - s.globals.minX) / g;\n            } else T += k;\n\n            var K = d.isNumber(s.globals.minYArr[A]) ? s.globals.minYArr[A] : s.globals.minY;\n            s.config.chart.stacked ? (U = v > 0 && s.globals.collapsedSeries.length < s.config.series.length - 1 ? b[v - 1][J + 1] : M, X = void 0 === t[v][J + 1] || null === t[v][J + 1] ? U - K / c[this.yaxisIndex] + 2 * (this.isReversed ? K / c[this.yaxisIndex] : 0) : U - t[v][J + 1] / c[this.yaxisIndex] + 2 * (this.isReversed ? t[v][J + 1] / c[this.yaxisIndex] : 0)) : X = void 0 === t[v][J + 1] || null === t[v][J + 1] ? M - K / c[this.yaxisIndex] + 2 * (this.isReversed ? K / c[this.yaxisIndex] : 0) : M - t[v][J + 1] / c[this.yaxisIndex] + 2 * (this.isReversed ? t[v][J + 1] / c[this.yaxisIndex] : 0), P.push(T), L.push(X);\n            var tt = this.createPaths({\n              series: t,\n              i: v,\n              j: J,\n              x: T,\n              y: X,\n              xDivision: k,\n              pX: V,\n              pY: G,\n              areaBottomY: E,\n              linePath: I,\n              areaPath: Y,\n              linePaths: D,\n              areaPaths: N,\n              seriesIndex: i\n            });\n            N = tt.areaPaths, D = tt.linePaths, V = tt.pX, G = tt.pY, Y = tt.areaPath, I = tt.linePath, this.appendPathFrom && (F += a.line(T, M), R += a.line(T, M));\n            var et = this.calculatePoints({\n              series: t,\n              x: T,\n              y: X,\n              realIndex: A,\n              i: v,\n              j: J,\n              prevY: j,\n              categoryAxisCorrection: m,\n              xRatio: g\n            });\n            if (this.pointsChart) this.scatter.draw(O, J, {\n              realIndex: A,\n              pointsPos: et,\n              zRatio: u,\n              elParent: H\n            });else {\n              var it = new C(this.ctx);\n              s.globals.dataPoints > 1 && H.node.classList.add(\"hidden\");\n              var st = it.plotChartMarkers(et, A, J + 1);\n              null !== st && H.add(st);\n            }\n            var at = !t[v][J + 1] || t[v][J + 1] > t[v][J] ? \"top\" : \"bottom\",\n                nt = new z(this.ctx).drawDataLabel(et, A, J + 1, null, at);\n            null !== nt && W.add(nt);\n          }\n\n          b.push(L), s.globals.seriesXvalues[A] = P, s.globals.seriesYvalues[A] = L, this.pointsChart || s.globals.delayedElements.push({\n            el: H.node,\n            index: A\n          });\n          var rt = {\n            i: v,\n            realIndex: A,\n            animationDelay: v,\n            initialSpeed: s.config.chart.animations.speed,\n            dataChangeSpeed: s.config.chart.animations.dynamicAnimation.speed,\n            className: \"apexcharts-\".concat(o),\n            id: \"apexcharts-\".concat(o)\n          };\n          if (\"area\" === o) for (var ot = r.fillPath({\n            seriesNumber: A\n          }), lt = 0; lt < N.length; lt++) {\n            var ht = a.renderPaths(n({}, rt, {\n              pathFrom: R,\n              pathTo: N[lt],\n              stroke: \"none\",\n              strokeWidth: 0,\n              strokeLineCap: null,\n              fill: ot\n            }));\n            O.add(ht);\n          }\n\n          if (s.config.stroke.show && !this.pointsChart) {\n            var ct = null;\n            ct = \"line\" === o ? r.fillPath({\n              seriesNumber: A,\n              i: v\n            }) : s.globals.stroke.colors[A];\n\n            for (var dt = 0; dt < D.length; dt++) {\n              var ut = a.renderPaths(n({}, rt, {\n                pathFrom: F,\n                pathTo: D[dt],\n                stroke: ct,\n                strokeWidth: Array.isArray(s.config.stroke.width) ? s.config.stroke.width[A] : s.config.stroke.width,\n                strokeLineCap: s.config.stroke.lineCap,\n                fill: \"none\"\n              }));\n              O.add(ut);\n            }\n          }\n\n          O.add(H), O.add(W), x.push(O);\n        }\n\n        for (var gt = x.length; gt > 0; gt--) {\n          l.add(x[gt - 1]);\n        }\n\n        return l;\n      }\n    }, {\n      key: \"createPaths\",\n      value: function value(t) {\n        var e = t.series,\n            i = t.i,\n            s = t.j,\n            a = t.x,\n            n = t.y,\n            r = t.pX,\n            o = t.pY,\n            l = t.xDivision,\n            h = t.areaBottomY,\n            c = t.linePath,\n            d = t.areaPath,\n            u = t.linePaths,\n            g = t.areaPaths,\n            p = t.seriesIndex,\n            x = this.w,\n            b = new f(this.ctx),\n            m = x.config.stroke.curve;\n\n        if (Array.isArray(x.config.stroke.curve) && (m = Array.isArray(p) ? x.config.stroke.curve[p[i]] : x.config.stroke.curve[i]), \"smooth\" === m) {\n          var v = .35 * (a - r);\n          x.globals.hasNullValues ? (null !== e[i][s] && (null !== e[i][s + 1] ? (c = b.move(r, o) + b.curve(r + v, o, a - v, n, a + 1, n), d = b.move(r + 1, o) + b.curve(r + v, o, a - v, n, a + 1, n) + b.line(a, h) + b.line(r, h) + \"z\") : (c = b.move(r, o), d = b.move(r, o) + \"z\")), u.push(c), g.push(d)) : (c += b.curve(r + v, o, a - v, n, a, n), d += b.curve(r + v, o, a - v, n, a, n)), r = a, o = n, s === e[i].length - 2 && (d = d + b.curve(r, o, a, n, a, h) + b.move(a, n) + \"z\", x.globals.hasNullValues || (u.push(c), g.push(d)));\n        } else null === e[i][s + 1] && (c += b.move(a, n), d = d + b.line(a - l, h) + b.move(a, n)), null === e[i][s] && (c += b.move(a, n), d += b.move(a, h)), \"stepline\" === m ? (c = c + b.line(a, null, \"H\") + b.line(null, n, \"V\"), d = d + b.line(a, null, \"H\") + b.line(null, n, \"V\")) : \"straight\" === m && (c += b.line(a, n), d += b.line(a, n)), s === e[i].length - 2 && (d = d + b.line(a, h) + b.move(a, n) + \"z\", u.push(c), g.push(d));\n\n        return {\n          linePaths: u,\n          areaPaths: g,\n          pX: r,\n          pY: o,\n          linePath: c,\n          areaPath: d\n        };\n      }\n    }, {\n      key: \"calculatePoints\",\n      value: function value(t) {\n        var e = t.series,\n            i = t.realIndex,\n            s = t.x,\n            a = t.y,\n            n = t.i,\n            r = t.j,\n            o = t.prevY,\n            l = t.categoryAxisCorrection,\n            h = t.xRatio,\n            c = this.w,\n            u = [],\n            g = [];\n\n        if (0 === r) {\n          var f = l + c.config.markers.offsetX;\n          c.globals.isXNumeric && (f = (c.globals.seriesX[i][0] - c.globals.minX) / h + c.config.markers.offsetX), u.push(f), g.push(d.isNumber(e[n][0]) ? o + c.config.markers.offsetY : null), u.push(s + c.config.markers.offsetX), g.push(d.isNumber(e[n][r + 1]) ? a + c.config.markers.offsetY : null);\n        } else u.push(s + c.config.markers.offsetX), g.push(d.isNumber(e[n][r + 1]) ? a + c.config.markers.offsetY : null);\n\n        return {\n          x: u,\n          y: g\n        };\n      }\n    }, {\n      key: \"checkPreviousPaths\",\n      value: function value(t) {\n        for (var e = t.pathFromLine, i = t.pathFromArea, s = t.realIndex, a = this.w, n = 0; n < a.globals.previousPaths.length; n++) {\n          var r = a.globals.previousPaths[n];\n          (\"line\" === r.type || \"area\" === r.type) && r.paths.length > 0 && parseInt(r.realIndex) === parseInt(s) && (\"line\" === r.type ? (this.appendPathFrom = !1, e = a.globals.previousPaths[n].paths[0].d) : \"area\" === r.type && (this.appendPathFrom = !1, i = a.globals.previousPaths[n].paths[0].d, a.config.stroke.show && (e = a.globals.previousPaths[n].paths[1].d)));\n        }\n\n        return {\n          pathFromLine: e,\n          pathFromArea: i\n        };\n      }\n    }, {\n      key: \"determineFirstPrevY\",\n      value: function value(t) {\n        var e = t.i,\n            i = t.series,\n            s = t.yRatio,\n            a = t.zeroY,\n            n = t.prevY,\n            r = t.prevSeriesY,\n            o = t.lineYPosition,\n            l = this.w;\n        if (void 0 !== i[e][0]) n = l.config.chart.stacked ? (o = e > 0 ? r[e - 1][0] : a) - i[e][0] / s + 2 * (this.isReversed ? i[e][0] / s : 0) : a - i[e][0] / s + 2 * (this.isReversed ? i[e][0] / s : 0);else if (l.config.chart.stacked && e > 0 && void 0 === i[e][0]) for (var h = e - 1; h >= 0; h--) {\n          if (null !== i[h][0] && void 0 !== i[h][0]) {\n            n = o = r[h][0];\n            break;\n          }\n        }\n        return {\n          prevY: n,\n          lineYPosition: o\n        };\n      }\n    }]), t;\n  }(),\n      N = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.tooltipKeyFormat = \"dd MMM\";\n    }\n\n    return s(t, [{\n      key: \"xLabelFormat\",\n      value: function value(t, e) {\n        var i = this.w;\n        if (\"datetime\" === i.config.xaxis.type && void 0 === i.config.tooltip.x.formatter) return new m(this.ctx).formatDate(new Date(e), i.config.tooltip.x.format, !0, !0);\n        return t(e);\n      }\n    }, {\n      key: \"setLabelFormatters\",\n      value: function value() {\n        var t = this.w;\n        return t.globals.xLabelFormatter = function (t) {\n          return t;\n        }, t.globals.xaxisTooltipFormatter = function (t) {\n          return t;\n        }, t.globals.ttKeyFormatter = function (t) {\n          return t;\n        }, t.globals.ttZFormatter = function (t) {\n          return t;\n        }, t.globals.legendFormatter = function (t) {\n          return t;\n        }, \"function\" == typeof t.config.tooltip.x.formatter && (t.globals.ttKeyFormatter = t.config.tooltip.x.formatter), \"function\" == typeof t.config.xaxis.tooltip.formatter && (t.globals.xaxisTooltipFormatter = t.config.xaxis.tooltip.formatter), Array.isArray(t.config.tooltip.y) ? t.globals.ttVal = t.config.tooltip.y : void 0 !== t.config.tooltip.y.formatter && (t.globals.ttVal = t.config.tooltip.y), void 0 !== t.config.tooltip.z.formatter && (t.globals.ttZFormatter = t.config.tooltip.z.formatter), void 0 !== t.config.legend.formatter && (t.globals.legendFormatter = t.config.legend.formatter), void 0 !== t.config.xaxis.labels.formatter ? t.globals.xLabelFormatter = t.config.xaxis.labels.formatter : t.globals.xLabelFormatter = function (e) {\n          return d.isNumber(e) ? \"numeric\" === t.config.xaxis.type && t.globals.dataPoints < 50 ? e.toFixed(1) : e.toFixed(0) : e;\n        }, t.config.yaxis.forEach(function (e, i) {\n          void 0 !== e.labels.formatter ? t.globals.yLabelFormatters[i] = e.labels.formatter : t.globals.yLabelFormatters[i] = function (i) {\n            return d.isNumber(i) ? 0 !== t.globals.yValueDecimal ? i.toFixed(void 0 !== e.decimalsInFloat ? e.decimalsInFloat : t.globals.yValueDecimal) : t.globals.maxY - t.globals.minY < 5 ? i.toFixed(1) : i.toFixed(0) : i;\n          };\n        }), t.globals;\n      }\n    }, {\n      key: \"heatmapLabelFormatters\",\n      value: function value() {\n        var t = this.w;\n\n        if (\"heatmap\" === t.config.chart.type) {\n          t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();\n          var e = t.globals.seriesNames.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          }, 0);\n          t.globals.yAxisScale[0].niceMax = e, t.globals.yAxisScale[0].niceMin = e;\n        }\n      }\n    }]), t;\n  }(),\n      O = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"getLabel\",\n      value: function value(t, e, i, s) {\n        var a,\n            n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [],\n            r = this.w,\n            o = void 0 === t[s] ? \"\" : t[s],\n            l = r.globals.xLabelFormatter,\n            h = r.config.xaxis.labels.formatter;\n        return a = new N(this.ctx).xLabelFormat(l, o), void 0 !== h && (a = h(o, t[s], s)), e.length > 0 ? (i = e[s].position, a = e[s].value) : \"datetime\" === r.config.xaxis.type && void 0 === h && (a = \"\"), void 0 === a && (a = \"\"), (0 === (a = a.toString()).indexOf(\"NaN\") || 0 === a.toLowerCase().indexOf(\"invalid\") || a.toLowerCase().indexOf(\"infinity\") >= 0 || n.indexOf(a) >= 0 && !r.config.xaxis.labels.showDuplicates) && (a = \"\"), {\n          x: i,\n          text: a\n        };\n      }\n    }, {\n      key: \"drawYAxisTicks\",\n      value: function value(t, e, i, s, a, n, r) {\n        var o = this.w,\n            l = new f(this.ctx),\n            h = o.globals.translateY;\n\n        if (s.show) {\n          !0 === o.config.yaxis[a].opposite && (t += s.width);\n\n          for (var c = e; c >= 0; c--) {\n            var d = h + e / 10 + o.config.yaxis[a].labels.offsetY - 1;\n            o.globals.isBarHorizontal && (d = n * c);\n            var u = l.drawLine(t + i.offsetX - s.width + s.offsetX, d + s.offsetY, t + i.offsetX + s.offsetX, d + s.offsetY, i.color);\n            r.add(u), h += n;\n          }\n        }\n      }\n    }]), t;\n  }(),\n      H = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n      var s = this.w;\n      this.xaxisLabels = s.globals.labels.slice(), s.globals.timelineLabels.length > 0 && (this.xaxisLabels = s.globals.timelineLabels.slice()), this.drawnLabels = [], \"top\" === s.config.xaxis.position ? this.offY = 0 : this.offY = s.globals.gridHeight + 1, this.offY = this.offY + s.config.xaxis.axisBorder.offsetY, this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s.config.xaxis.axisBorder.width, this.xaxisBorderWidth.indexOf(\"%\") > -1 ? this.xaxisBorderWidth = s.globals.gridWidth * parseInt(this.xaxisBorderWidth) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth), this.xaxisBorderHeight = s.config.xaxis.axisBorder.height, this.yaxis = s.config.yaxis[0], this.axesUtils = new O(i);\n    }\n\n    return s(t, [{\n      key: \"drawXaxis\",\n      value: function value() {\n        var t,\n            e = this.w,\n            i = new f(this.ctx),\n            s = i.group({\n          \"class\": \"apexcharts-xaxis\",\n          transform: \"translate(\".concat(e.config.xaxis.offsetX, \", \").concat(e.config.xaxis.offsetY, \")\")\n        }),\n            a = i.group({\n          \"class\": \"apexcharts-xaxis-texts-g\",\n          transform: \"translate(\".concat(e.globals.translateXAxisX, \", \").concat(e.globals.translateXAxisY, \")\")\n        });\n        s.add(a);\n\n        for (var n = e.globals.padHorizontal, r = [], o = 0; o < this.xaxisLabels.length; o++) {\n          r.push(this.xaxisLabels[o]);\n        }\n\n        n = e.globals.isXNumeric ? n + (t = e.globals.gridWidth / (r.length - 1)) / 2 + e.config.xaxis.labels.offsetX : n + (t = e.globals.gridWidth / r.length) + e.config.xaxis.labels.offsetX;\n        var l = r.length;\n        if (e.config.xaxis.labels.show) for (var h = 0; h <= l - 1; h++) {\n          var c = n - t / 2 + e.config.xaxis.labels.offsetX,\n              d = this.axesUtils.getLabel(r, e.globals.timelineLabels, c, h, this.drawnLabels);\n          this.drawnLabels.push(d.text);\n          var u = 28;\n          e.globals.rotateXLabels && (u = 22);\n          var g = i.drawText({\n            x: d.x,\n            y: this.offY + e.config.xaxis.labels.offsetY + u,\n            text: \"\",\n            textAnchor: \"middle\",\n            fontSize: this.xaxisFontSize,\n            fontFamily: this.xaxisFontFamily,\n            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[h] : this.xaxisForeColors,\n            cssClass: \"apexcharts-xaxis-label \" + e.config.xaxis.labels.style.cssClass\n          });\n          h === l - 1 && e.globals.skipLastTimelinelabel && (d.text = \"\"), a.add(g), i.addTspan(g, d.text, this.xaxisFontFamily);\n          var p = document.createElementNS(e.globals.SVGNS, \"title\");\n          p.textContent = d.text, g.node.appendChild(p), n += t;\n        }\n\n        if (void 0 !== e.config.xaxis.title.text) {\n          var x = i.group({\n            \"class\": \"apexcharts-xaxis-title\"\n          }),\n              b = i.drawText({\n            x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,\n            y: this.offY - parseInt(this.xaxisFontSize) + e.globals.xAxisLabelsHeight + e.config.xaxis.title.offsetY,\n            text: e.config.xaxis.title.text,\n            textAnchor: \"middle\",\n            fontSize: e.config.xaxis.title.style.fontSize,\n            fontFamily: e.config.xaxis.title.style.fontFamily,\n            foreColor: e.config.xaxis.title.style.color,\n            cssClass: \"apexcharts-xaxis-title-text \" + e.config.xaxis.title.style.cssClass\n          });\n          x.add(b), s.add(x);\n        }\n\n        if (e.config.xaxis.axisBorder.show) {\n          var m = 0;\n          \"bar\" === e.config.chart.type && e.globals.isXNumeric && (m -= 15);\n          var v = i.drawLine(e.globals.padHorizontal + m + e.config.xaxis.axisBorder.offsetX, this.offY, this.xaxisBorderWidth, this.offY, e.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);\n          s.add(v);\n        }\n\n        return s;\n      }\n    }, {\n      key: \"drawXaxisInversed\",\n      value: function value(t) {\n        var e,\n            i,\n            s = this.w,\n            a = new f(this.ctx),\n            n = s.config.yaxis[0].opposite ? s.globals.translateYAxisX[t] : 0,\n            r = a.group({\n          \"class\": \"apexcharts-yaxis apexcharts-xaxis-inversed\",\n          rel: t\n        }),\n            o = a.group({\n          \"class\": \"apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g\",\n          transform: \"translate(\" + n + \", 0)\"\n        });\n        r.add(o);\n\n        for (var l = [], h = 0; h < this.xaxisLabels.length; h++) {\n          l.push(this.xaxisLabels[h]);\n        }\n\n        i = -(e = s.globals.gridHeight / l.length) / 2.2;\n        var c = s.globals.yLabelFormatters[0],\n            d = s.config.yaxis[0].labels;\n        if (d.show) for (var u = 0; u <= l.length - 1; u++) {\n          var g = void 0 === l[u] ? \"\" : l[u];\n          g = c(g);\n          var p = a.drawText({\n            x: d.offsetX - 15,\n            y: i + e + d.offsetY,\n            text: g,\n            textAnchor: this.yaxis.opposite ? \"start\" : \"end\",\n            foreColor: d.style.color ? d.style.color : d.style.colors[u],\n            fontSize: d.style.fontSize,\n            fontFamily: d.style.fontFamily,\n            cssClass: \"apexcharts-yaxis-label \" + d.style.cssClass\n          });\n\n          if (o.add(p), 0 !== s.config.yaxis[t].labels.rotate) {\n            var x = a.rotateAroundCenter(p.node);\n            p.node.setAttribute(\"transform\", \"rotate(\".concat(s.config.yaxis[t].labels.rotate, \" \").concat(x.x, \" \").concat(x.y, \")\"));\n          }\n\n          i += e;\n        }\n\n        if (void 0 !== s.config.yaxis[0].title.text) {\n          var b = a.group({\n            \"class\": \"apexcharts-yaxis-title apexcharts-xaxis-title-inversed\",\n            transform: \"translate(\" + n + \", 0)\"\n          }),\n              m = a.drawText({\n            x: 0,\n            y: s.globals.gridHeight / 2,\n            text: s.config.yaxis[0].title.text,\n            textAnchor: \"middle\",\n            foreColor: s.config.yaxis[0].title.style.color,\n            fontSize: s.config.yaxis[0].title.style.fontSize,\n            fontFamily: s.config.yaxis[0].title.style.fontFamily,\n            cssClass: \"apexcharts-yaxis-title-text \" + s.config.yaxis[0].title.style.cssClass\n          });\n          b.add(m), r.add(b);\n        }\n\n        if (s.config.xaxis.axisBorder.show) {\n          var v = a.drawLine(s.globals.padHorizontal + s.config.xaxis.axisBorder.offsetX, this.offY, this.xaxisBorderWidth, this.offY, this.yaxis.axisBorder.color, 0, this.xaxisBorderHeight);\n          r.add(v), this.axesUtils.drawYAxisTicks(0, l.length, s.config.yaxis[0].axisBorder, s.config.yaxis[0].axisTicks, 0, e, r);\n        }\n\n        return r;\n      }\n    }, {\n      key: \"drawXaxisTicks\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = t;\n\n        if (!(t < 0 || t > i.globals.gridWidth)) {\n          var a = this.offY + i.config.xaxis.axisTicks.offsetY,\n              n = a + i.config.xaxis.axisTicks.height;\n\n          if (i.config.xaxis.axisTicks.show) {\n            var r = new f(this.ctx).drawLine(t + i.config.xaxis.axisTicks.offsetX, a + i.config.xaxis.offsetY, s + i.config.xaxis.axisTicks.offsetX, n + i.config.xaxis.offsetY, i.config.xaxis.axisTicks.color);\n            e.add(r), r.node.classList.add(\"apexcharts-xaxis-tick\");\n          }\n        }\n      }\n    }, {\n      key: \"getXAxisTicksPositions\",\n      value: function value() {\n        var t = this.w,\n            e = [],\n            i = this.xaxisLabels.length,\n            s = t.globals.padHorizontal;\n        if (t.globals.timelineLabels.length > 0) for (var a = 0; a < i; a++) {\n          s = this.xaxisLabels[a].position, e.push(s);\n        } else for (var n = i, r = 0; r < n; r++) {\n          var o = n;\n          t.globals.isXNumeric && \"bar\" !== t.config.chart.type && (o -= 1), s += t.globals.gridWidth / o, e.push(s);\n        }\n        return e;\n      }\n    }, {\n      key: \"xAxisLabelCorrections\",\n      value: function value() {\n        var t = this.w,\n            e = new f(this.ctx),\n            i = t.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g\"),\n            s = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-texts-g text\"),\n            a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-inversed text\"),\n            n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-inversed-texts-g text\");\n        if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways) for (var r = 0; r < s.length; r++) {\n          var o = e.rotateAroundCenter(s[r]);\n          o.y = o.y - 1, o.x = o.x + 1, s[r].setAttribute(\"transform\", \"rotate(\".concat(t.config.xaxis.labels.rotate, \" \").concat(o.x, \" \").concat(o.y, \")\")), s[r].setAttribute(\"text-anchor\", \"end\");\n          i.setAttribute(\"transform\", \"translate(0, \".concat(-10, \")\"));\n          var l = s[r].childNodes;\n          t.config.xaxis.labels.trim && e.placeTextWithEllipsis(l[0], l[0].textContent, t.config.xaxis.labels.maxHeight - 40);\n        } else for (var h = t.globals.gridWidth / t.globals.labels.length, c = 0; c < s.length; c++) {\n          var d = s[c].childNodes;\n          t.config.xaxis.labels.trim && \"datetime\" !== t.config.xaxis.type && e.placeTextWithEllipsis(d[0], d[0].textContent, h);\n        }\n\n        if (a.length > 0) {\n          var u = a[a.length - 1].getBBox(),\n              g = a[0].getBBox();\n          u.x < -20 && a[a.length - 1].parentNode.removeChild(a[a.length - 1]), g.x + g.width > t.globals.gridWidth && a[0].parentNode.removeChild(a[0]);\n\n          for (var p = 0; p < n.length; p++) {\n            e.placeTextWithEllipsis(n[p], n[p].textContent, t.config.yaxis[0].labels.maxWidth - 2 * parseInt(t.config.yaxis[0].title.style.fontSize) - 20);\n          }\n        }\n      }\n    }]), t;\n  }(),\n      W = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n      var s = this.w;\n      this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.axisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.xAxisoffX = 0, \"bottom\" === s.config.xaxis.position && (this.xAxisoffX = s.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new O(i);\n    }\n\n    return s(t, [{\n      key: \"drawYaxis\",\n      value: function value(t) {\n        var e = this.w,\n            i = new f(this.ctx),\n            s = e.config.yaxis[t].labels.style.fontSize,\n            a = e.config.yaxis[t].labels.style.fontFamily,\n            n = i.group({\n          \"class\": \"apexcharts-yaxis\",\n          rel: t,\n          transform: \"translate(\" + e.globals.translateYAxisX[t] + \", 0)\"\n        });\n        if (!e.config.yaxis[t].show) return n;\n        var r = i.group({\n          \"class\": \"apexcharts-yaxis-texts-g\"\n        });\n        n.add(r);\n        var o = e.globals.yAxisScale[t].result.length - 1,\n            l = e.globals.gridHeight / o + .1,\n            h = e.globals.translateY,\n            c = e.globals.yLabelFormatters[t],\n            d = e.globals.yAxisScale[t].result.slice();\n        if (e.config.yaxis[t] && e.config.yaxis[t].reversed && d.reverse(), e.config.yaxis[t].labels.show) for (var u = o; u >= 0; u--) {\n          var g = d[u];\n          g = c(g, u);\n          var p = e.config.yaxis[t].labels.padding;\n          e.config.yaxis[t].opposite && 0 !== e.config.yaxis.length && (p *= -1);\n          var x = i.drawText({\n            x: p,\n            y: h + o / 10 + e.config.yaxis[t].labels.offsetY + 1,\n            text: g,\n            textAnchor: e.config.yaxis[t].opposite ? \"start\" : \"end\",\n            fontSize: s,\n            fontFamily: a,\n            foreColor: e.config.yaxis[t].labels.style.color,\n            cssClass: \"apexcharts-yaxis-label \" + e.config.yaxis[t].labels.style.cssClass\n          });\n          r.add(x);\n          var b = i.rotateAroundCenter(x.node);\n          0 !== e.config.yaxis[t].labels.rotate && x.node.setAttribute(\"transform\", \"rotate(\".concat(e.config.yaxis[t].labels.rotate, \" \").concat(b.x, \" \").concat(b.y, \")\")), h += l;\n        }\n\n        if (void 0 !== e.config.yaxis[t].title.text) {\n          var m = i.group({\n            \"class\": \"apexcharts-yaxis-title\"\n          }),\n              v = 0;\n          e.config.yaxis[t].opposite && (v = e.globals.translateYAxisX[t]);\n          var y = i.drawText({\n            x: v,\n            y: e.globals.gridHeight / 2 + e.globals.translateY,\n            text: e.config.yaxis[t].title.text,\n            textAnchor: \"end\",\n            foreColor: e.config.yaxis[t].title.style.color,\n            fontSize: e.config.yaxis[t].title.style.fontSize,\n            fontFamily: e.config.yaxis[t].title.style.fontFamily,\n            cssClass: \"apexcharts-yaxis-title-text \" + e.config.yaxis[t].title.style.cssClass\n          });\n          m.add(y), n.add(m);\n        }\n\n        var w = e.config.yaxis[t].axisBorder;\n\n        if (w.show) {\n          var k = 31 + w.offsetX;\n          e.config.yaxis[t].opposite && (k = -31 - w.offsetX);\n          var A = i.drawLine(k, e.globals.translateY + w.offsetY - 2, k, e.globals.gridHeight + e.globals.translateY + w.offsetY + 2, w.color);\n          n.add(A), this.axesUtils.drawYAxisTicks(k, o, w, e.config.yaxis[t].axisTicks, t, l, n);\n        }\n\n        return n;\n      }\n    }, {\n      key: \"drawYaxisInversed\",\n      value: function value(t) {\n        var e = this.w,\n            i = new f(this.ctx),\n            s = i.group({\n          \"class\": \"apexcharts-xaxis apexcharts-yaxis-inversed\"\n        }),\n            a = i.group({\n          \"class\": \"apexcharts-xaxis-texts-g\",\n          transform: \"translate(\".concat(e.globals.translateXAxisX, \", \").concat(e.globals.translateXAxisY, \")\")\n        });\n        s.add(a);\n        var n = e.globals.yAxisScale[t].result.length - 1,\n            r = e.globals.gridWidth / n + .1,\n            o = r + e.config.xaxis.labels.offsetX,\n            l = e.globals.xLabelFormatter,\n            h = e.globals.yAxisScale[t].result.slice(),\n            c = e.globals.invertedTimelineLabels;\n        c.length > 0 && (this.xaxisLabels = c.slice(), n = (h = c.slice()).length), e.config.yaxis[t] && e.config.yaxis[t].reversed && h.reverse();\n        var d = c.length;\n        if (e.config.xaxis.labels.show) for (var u = d ? 0 : n; d ? u < d - 1 : u >= 0; d ? u++ : u--) {\n          var g = h[u];\n          g = l(g, u);\n          var p = e.globals.gridWidth + e.globals.padHorizontal - (o - r + e.config.xaxis.labels.offsetX);\n\n          if (c.length) {\n            var x = this.axesUtils.getLabel(h, c, p, u, this.drawnLabels);\n            p = x.x, g = x.text, this.drawnLabels.push(x.text);\n          }\n\n          var b = i.drawText({\n            x: p,\n            y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30,\n            text: \"\",\n            textAnchor: \"middle\",\n            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,\n            fontSize: this.xaxisFontSize,\n            fontFamily: this.xaxisFontFamily,\n            cssClass: \"apexcharts-xaxis-label \" + e.config.xaxis.labels.style.cssClass\n          });\n          a.add(b), b.tspan(g);\n          var m = document.createElementNS(e.globals.SVGNS, \"title\");\n          m.textContent = g, b.node.appendChild(m), o += r;\n        }\n\n        if (void 0 !== e.config.xaxis.title.text) {\n          var v = i.group({\n            \"class\": \"apexcharts-xaxis-title apexcharts-yaxis-title-inversed\"\n          }),\n              y = i.drawText({\n            x: e.globals.gridWidth / 2,\n            y: this.xAxisoffX + parseInt(this.xaxisFontSize) + parseInt(e.config.xaxis.title.style.fontSize) + 20,\n            text: e.config.xaxis.title.text,\n            textAnchor: \"middle\",\n            fontSize: e.config.xaxis.title.style.fontSize,\n            fontFamily: e.config.xaxis.title.style.fontFamily,\n            cssClass: \"apexcharts-xaxis-title-text \" + e.config.xaxis.title.style.cssClass\n          });\n          v.add(y), s.add(v);\n        }\n\n        var w = e.config.yaxis[t].axisBorder;\n\n        if (w.show) {\n          var k = i.drawLine(e.globals.padHorizontal + w.offsetX, 1 + w.offsetY, e.globals.padHorizontal + w.offsetX, e.globals.gridHeight + w.offsetY, w.color);\n          s.add(k);\n        }\n\n        return s;\n      }\n    }, {\n      key: \"yAxisTitleRotate\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = new f(this.ctx),\n            a = {\n          width: 0,\n          height: 0\n        },\n            n = {\n          width: 0,\n          height: 0\n        },\n            r = i.globals.dom.baseEl.querySelector(\" .apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-texts-g\"));\n        null !== r && (a = r.getBoundingClientRect());\n        var o = i.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-title text\"));\n\n        if (null !== o && (n = o.getBoundingClientRect()), null !== o) {\n          var l = this.xPaddingForYAxisTitle(t, a, n, e);\n          o.setAttribute(\"x\", l.xPos - (e ? 10 : 0));\n        }\n\n        if (null !== o) {\n          var h = s.rotateAroundCenter(o);\n          e ? o.setAttribute(\"transform\", \"rotate(\".concat(i.config.yaxis[t].title.rotate, \" \").concat(h.x, \" \").concat(h.y, \")\")) : o.setAttribute(\"transform\", \"rotate(-\".concat(i.config.yaxis[t].title.rotate, \" \").concat(h.x, \" \").concat(h.y, \")\"));\n        }\n      }\n    }, {\n      key: \"xPaddingForYAxisTitle\",\n      value: function value(t, e, i, s) {\n        var a = this.w,\n            n = 0,\n            r = 0,\n            o = 10;\n        return void 0 === a.config.yaxis[t].title.text || t < 0 ? {\n          xPos: r,\n          padd: 0\n        } : (s ? (r = e.width + a.config.yaxis[t].title.offsetX + i.width / 2 + o / 2, 0 === (n += 1) && (r -= o / 2)) : (r = -1 * e.width + a.config.yaxis[t].title.offsetX + o / 2 + i.width / 2, a.globals.isBarHorizontal && (o = 25, r = -1 * e.width - a.config.yaxis[t].title.offsetX - o)), {\n          xPos: r,\n          padd: o\n        });\n      }\n    }, {\n      key: \"setYAxisXPosition\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = 0,\n            a = 0,\n            n = 21,\n            r = 1;\n        i.config.yaxis.length > 1 && (this.multipleYs = !0), i.config.yaxis.map(function (o, l) {\n          var h = i.globals.ignoreYAxisIndexes.indexOf(l) > -1 || !o.show || o.floating || 0 === t[l].width,\n              c = t[l].width + e[l].width;\n          o.opposite ? i.globals.isBarHorizontal ? (a = i.globals.gridWidth + i.globals.translateX - 1, i.globals.translateYAxisX[l] = a - o.labels.offsetX) : (a = i.globals.gridWidth + i.globals.translateX + r, h || (r = r + c + 20), i.globals.translateYAxisX[l] = a - o.labels.offsetX + 20) : (s = i.globals.translateX - n, h || (n = n + c + 20), i.globals.translateYAxisX[l] = s + o.labels.offsetX);\n        });\n      }\n    }, {\n      key: \"setYAxisTextAlignments\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis\");\n        (e = d.listToArray(e)).forEach(function (e, i) {\n          var s = t.config.yaxis[i];\n\n          if (void 0 !== s.labels.align) {\n            var a = t.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-texts-g\")),\n                n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-label\"));\n            n = d.listToArray(n);\n            var r = a.getBoundingClientRect();\n            \"left\" === s.labels.align ? (n.forEach(function (t, e) {\n              t.setAttribute(\"text-anchor\", \"start\");\n            }), s.opposite || a.setAttribute(\"transform\", \"translate(-\".concat(r.width, \", 0)\"))) : \"center\" === s.labels.align ? (n.forEach(function (t, e) {\n              t.setAttribute(\"text-anchor\", \"middle\");\n            }), a.setAttribute(\"transform\", \"translate(\".concat(r.width / 2 * (s.opposite ? 1 : -1), \", 0)\"))) : \"right\" === s.labels.align && (n.forEach(function (t, e) {\n              t.setAttribute(\"text-anchor\", \"end\");\n            }), s.opposite && a.setAttribute(\"transform\", \"translate(\".concat(r.width, \", 0)\")));\n          }\n        });\n      }\n    }]), t;\n  }(),\n      B = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"niceScale\",\n      value: function value(t, e, i) {\n        var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n            a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 10,\n            n = this.w,\n            r = void 0 === this.w.config.yaxis[s].max && void 0 === this.w.config.yaxis[s].min || this.w.config.yaxis[s].forceNiceScale;\n        if (t === Number.MIN_VALUE && 0 === e || !d.isNumber(t) && !d.isNumber(e) || t === Number.MIN_VALUE && e === -Number.MAX_VALUE) return t = 0, e = a, this.linearScale(t, e, a);\n        t > e ? (console.warn(\"yaxis.min cannot be greater than yaxis.max\"), e = t + .1) : t === e && (t = 0 === t ? 0 : t - .5, e = 0 === e ? 2 : e + .5);\n        var o = [],\n            l = Math.abs(e - t);\n        l < 1 && r && (\"candlestick\" === n.config.chart.type || \"candlestick\" === n.config.series[s].type || n.globals.isRangeData) && (e *= 1.01), l < 1e-5 && r && e < 10 ? e *= 1.05 : i > .1 && i < 3 && r && (e += i / 3);\n        var h = a + 1;\n        h < 2 ? h = 2 : h > 2 && (h -= 2);\n\n        for (var c = l / h, u = Math.floor(d.log10(c)), g = Math.pow(10, u), f = parseInt(c / g) * g, p = f * Math.floor(t / f), x = f * Math.ceil(e / f), b = p; o.push(b), !((b += f) > x);) {\n          ;\n        }\n\n        if (r) return {\n          result: o,\n          niceMin: o[0],\n          niceMax: o[o.length - 1]\n        };\n        var m = t;\n        (o = []).push(m);\n\n        for (var v = Math.abs(e - t) / a, y = 0; y <= a - 1; y++) {\n          m += v, o.push(m);\n        }\n\n        return {\n          result: o,\n          niceMin: o[0],\n          niceMax: o[o.length - 1]\n        };\n      }\n    }, {\n      key: \"linearScale\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,\n            s = Math.abs(e - t) / i;\n        i === Number.MAX_VALUE && (i = 10, s = 1);\n\n        for (var a = [], n = t; i >= 0;) {\n          a.push(n), n += s, i -= 1;\n        }\n\n        return {\n          result: a,\n          niceMin: a[0],\n          niceMax: a[a.length - 1]\n        };\n      }\n    }, {\n      key: \"logarithmicScale\",\n      value: function value(t, e, i, s) {\n        (e < 0 || e === Number.MIN_VALUE) && (e = .01);\n\n        for (var a = Math.log(e) / Math.log(10), n = Math.log(i) / Math.log(10), r = Math.abs(i - e) / s, o = [], l = e; s >= 0;) {\n          o.push(l), l += r, s -= 1;\n        }\n\n        var h = o.map(function (t, s) {\n          t <= 0 && (t = .01);\n          var r = (n - a) / (i - e),\n              o = Math.pow(10, a + r * (t - a));\n          return Math.round(o / d.roundToBase(o, 10)) * d.roundToBase(o, 10);\n        });\n        return 0 === h[0] && (h[0] = 1), {\n          result: h,\n          niceMin: h[0],\n          niceMax: h[h.length - 1]\n        };\n      }\n    }, {\n      key: \"setYScaleForIndex\",\n      value: function value(t, e, i) {\n        var s = this.w.globals,\n            a = this.w.config,\n            n = s.isBarHorizontal ? a.xaxis : a.yaxis[t];\n        if (void 0 === s.yAxisScale[t] && (s.yAxisScale[t] = []), n.logarithmic) s.allSeriesCollapsed = !1, s.yAxisScale[t] = this.logarithmicScale(t, e, i, n.tickAmount ? n.tickAmount : Math.floor(Math.log10(i)));else if (i !== -Number.MAX_VALUE && d.isNumber(i)) {\n          if (s.allSeriesCollapsed = !1, void 0 === n.min && void 0 === n.max || n.forceNiceScale) {\n            var r = Math.abs(i - e);\n            s.yAxisScale[t] = this.niceScale(e, i, r, t, n.tickAmount ? n.tickAmount : r < 5 && r > 1 ? r + 1 : 5);\n          } else s.yAxisScale[t] = this.linearScale(e, i, n.tickAmount);\n        } else s.yAxisScale[t] = this.linearScale(0, 5, 5);\n      }\n    }, {\n      key: \"setMultipleYScales\",\n      value: function value() {\n        var t = this,\n            e = this.w.globals,\n            i = this.w.config,\n            s = e.minYArr.concat([]),\n            a = e.maxYArr.concat([]),\n            n = [];\n        i.yaxis.forEach(function (r, o) {\n          var l = o;\n          i.series.forEach(function (t, i) {\n            t.name === r.seriesName && -1 === e.collapsedSeriesIndices.indexOf(i) && (l = i, o !== i ? n.push({\n              index: i,\n              similarIndex: o,\n              alreadyExists: !0\n            }) : n.push({\n              index: i\n            }));\n          });\n          var h = s[l],\n              c = a[l];\n          t.setYScaleForIndex(o, h, c);\n        }), this.sameScaleInMultipleAxes(s, a, n);\n      }\n    }, {\n      key: \"sameScaleInMultipleAxes\",\n      value: function value(t, e, i) {\n        var s = this,\n            a = this.w.config,\n            n = this.w.globals,\n            r = [];\n        i.forEach(function (t) {\n          t.alreadyExists && (void 0 === r[t.index] && (r[t.index] = []), r[t.index].push(t.index), r[t.index].push(t.similarIndex));\n        }), r.forEach(function (t, e) {\n          r.forEach(function (i, s) {\n            var a, n;\n            e !== s && (a = t, n = i, a.filter(function (t) {\n              return -1 !== n.indexOf(t);\n            })).length > 0 && (r[e] = r[e].concat(r[s]));\n          });\n        });\n        var o = r.map(function (t) {\n          return t.filter(function (e, i) {\n            return t.indexOf(e) === i;\n          });\n        }).map(function (t) {\n          return t.sort();\n        });\n        r = r.filter(function (t) {\n          return !!t;\n        });\n        var l = o.slice(),\n            h = l.map(function (t) {\n          return JSON.stringify(t);\n        });\n        l = l.filter(function (t, e) {\n          return h.indexOf(JSON.stringify(t)) === e;\n        });\n        var c = [],\n            d = [];\n        t.forEach(function (t, i) {\n          l.forEach(function (s, a) {\n            s.indexOf(i) > -1 && (void 0 === c[a] && (c[a] = [], d[a] = []), c[a].push({\n              key: i,\n              value: t\n            }), d[a].push({\n              key: i,\n              value: e[i]\n            }));\n          });\n        });\n        var u = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, Number.MIN_VALUE),\n            g = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);\n        c.forEach(function (t, e) {\n          t.forEach(function (t, i) {\n            u[e] = Math.min(t.value, u[e]);\n          });\n        }), d.forEach(function (t, e) {\n          t.forEach(function (t, i) {\n            g[e] = Math.max(t.value, g[e]);\n          });\n        }), t.forEach(function (t, e) {\n          d.forEach(function (t, i) {\n            var r = u[i],\n                o = g[i];\n            t.forEach(function (i, l) {\n              t[l].key === e && (void 0 !== a.yaxis[e].min && (r = \"function\" == typeof a.yaxis[e].min ? a.yaxis[e].min(n.minY) : a.yaxis[e].min), void 0 !== a.yaxis[e].max && (o = \"function\" == typeof a.yaxis[e].max ? a.yaxis[e].max(n.maxY) : a.yaxis[e].max), s.setYScaleForIndex(e, r, o));\n            });\n          });\n        });\n      }\n    }, {\n      key: \"autoScaleY\",\n      value: function value(t, e) {\n        t || (t = this);\n        var i = [];\n        return t.w.config.series.forEach(function (t) {\n          var s,\n              a,\n              n = t.data.find(function (t) {\n            return t[0] >= e.xaxis.min;\n          })[1];\n          a = s = n, t.data.forEach(function (t) {\n            t[0] <= e.xaxis.max && t[0] >= e.xaxis.min && (t[1] > a && null !== t[1] && (a = t[1]), t[1] < s && null !== t[1] && (s = t[1]));\n          }), s *= .95, a *= 1.05, i.push({\n            min: s,\n            max: a\n          });\n        }), i;\n      }\n    }]), t;\n  }(),\n      V = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.scales = new B(i);\n    }\n\n    return s(t, [{\n      key: \"init\",\n      value: function value() {\n        this.setYRange(), this.setXRange(), this.setZRange();\n      }\n    }, {\n      key: \"getMinYMaxY\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE,\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE,\n            s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n            a = this.w.globals,\n            n = -Number.MAX_VALUE,\n            r = Number.MIN_VALUE;\n        null === s && (s = t + 1);\n        var o = a.series,\n            l = o,\n            h = o;\n        \"candlestick\" === this.w.config.chart.type ? (l = a.seriesCandleL, h = a.seriesCandleH) : a.isRangeData && (l = a.seriesRangeStart, h = a.seriesRangeEnd);\n\n        for (var c = t; c < s; c++) {\n          a.dataPoints = Math.max(a.dataPoints, o[c].length);\n\n          for (var u = 0; u < a.series[c].length; u++) {\n            var g = o[c][u];\n            null !== g && d.isNumber(g) ? (n = Math.max(n, h[c][u]), e = Math.min(e, l[c][u]), i = Math.max(i, l[c][u]), \"candlestick\" === this.w.config.chart.type && (n = Math.max(n, a.seriesCandleO[c][u]), n = Math.max(n, a.seriesCandleH[c][u]), n = Math.max(n, a.seriesCandleL[c][u]), i = n = Math.max(n, a.seriesCandleC[c][u])), d.isFloat(g) && (g = d.noExponents(g), a.yValueDecimal = Math.max(a.yValueDecimal, g.toString().split(\".\")[1].length)), r > l[c][u] && l[c][u] < 0 && (r = l[c][u])) : a.hasNullValues = !0;\n          }\n        }\n\n        return {\n          minY: r,\n          maxY: n,\n          lowestY: e,\n          highestY: i\n        };\n      }\n    }, {\n      key: \"setYRange\",\n      value: function value() {\n        var t = this.w.globals,\n            e = this.w.config;\n        t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE;\n        var i = Number.MAX_VALUE;\n        if (t.isMultipleYAxis) for (var s = 0; s < t.series.length; s++) {\n          var a = this.getMinYMaxY(s, i, null, s + 1);\n          t.minYArr.push(a.minY), t.maxYArr.push(a.maxY), i = a.lowestY;\n        }\n        var n = this.getMinYMaxY(0, i, null, t.series.length);\n\n        if (t.minY = n.minY, t.maxY = n.maxY, i = n.lowestY, e.chart.stacked) {\n          for (var r = [], o = [], l = 0; l < t.series[t.maxValsInArrayIndex].length; l++) {\n            for (var h = 0, c = 0, u = 0; u < t.series.length; u++) {\n              null !== t.series[u][l] && d.isNumber(t.series[u][l]) && (t.series[u][l] > 0 ? h = h + parseFloat(t.series[u][l]) + 1e-4 : c += parseFloat(t.series[u][l])), u === t.series.length - 1 && (r.push(h), o.push(c));\n            }\n          }\n\n          for (var g = 0; g < r.length; g++) {\n            t.maxY = Math.max(t.maxY, r[g]), t.minY = Math.min(t.minY, o[g]);\n          }\n        }\n\n        if ((\"line\" === e.chart.type || \"area\" === e.chart.type || \"candlestick\" === e.chart.type) && t.minY === Number.MIN_VALUE && i !== -Number.MAX_VALUE && i !== t.maxY) {\n          var f = t.maxY - i;\n          i >= 0 && i <= 10 && (f = 0), t.minY = i - 5 * f / 100, t.maxY = t.maxY + 5 * f / 100;\n        }\n\n        return e.yaxis.map(function (e, i) {\n          void 0 !== e.max && (\"number\" == typeof e.max ? t.maxYArr[i] = e.max : \"function\" == typeof e.max && (t.maxYArr[i] = e.max(t.maxY)), t.maxY = t.maxYArr[i]), void 0 !== e.min && (\"number\" == typeof e.min ? t.minYArr[i] = e.min : \"function\" == typeof e.min && (t.minYArr[i] = e.min(t.minY)), t.minY = t.minYArr[i]);\n        }), t.isBarHorizontal && (void 0 !== e.xaxis.min && \"number\" == typeof e.xaxis.min && (t.minY = e.xaxis.min), void 0 !== e.xaxis.max && \"number\" == typeof e.xaxis.max && (t.maxY = e.xaxis.max)), t.isMultipleYAxis ? (this.scales.setMultipleYScales(), t.minY = i, t.yAxisScale.forEach(function (e, i) {\n          t.minYArr[i] = e.niceMin, t.maxYArr[i] = e.niceMax;\n        })) : (this.scales.setYScaleForIndex(0, t.minY, t.maxY), t.minY = t.yAxisScale[0].niceMin, t.maxY = t.yAxisScale[0].niceMax, t.minYArr[0] = t.yAxisScale[0].niceMin, t.maxYArr[0] = t.yAxisScale[0].niceMax), {\n          minY: t.minY,\n          maxY: t.maxY,\n          minYArr: t.minYArr,\n          maxYArr: t.maxYArr\n        };\n      }\n    }, {\n      key: \"setXRange\",\n      value: function value() {\n        var t,\n            e = this.w.globals,\n            i = this.w.config,\n            s = \"numeric\" === i.xaxis.type || \"datetime\" === i.xaxis.type || \"category\" === i.xaxis.type && !e.noLabelsProvided || e.noLabelsProvided || e.isXNumeric;\n        if (e.isXNumeric) for (var a = 0; a < e.series.length; a++) {\n          if (e.labels[a]) for (var n = 0; n < e.labels[a].length; n++) {\n            null !== e.labels[a][n] && d.isNumber(e.labels[a][n]) && (e.maxX = Math.max(e.maxX, e.labels[a][n]), e.initialmaxX = Math.max(e.maxX, e.labels[a][n]), e.minX = Math.min(e.minX, e.labels[a][n]), e.initialminX = Math.min(e.minX, e.labels[a][n]));\n          }\n        }\n\n        if (e.noLabelsProvided && 0 === i.xaxis.categories.length && (e.maxX = e.labels[e.labels.length - 1], e.initialmaxX = e.labels[e.labels.length - 1], e.minX = 1, e.initialminX = 1), (e.comboChartsHasBars || \"candlestick\" === i.chart.type || \"bar\" === i.chart.type && e.isXNumeric) && (\"category\" !== i.xaxis.type || e.isXNumeric)) {\n          var r = e.minX - e.svgWidth / e.dataPoints * (Math.abs(e.maxX - e.minX) / e.svgWidth) / 2;\n          e.minX = r, e.initialminX = r;\n          var o = e.maxX + e.svgWidth / e.dataPoints * (Math.abs(e.maxX - e.minX) / e.svgWidth) / 2;\n          e.maxX = o, e.initialmaxX = o;\n        }\n\n        !e.isXNumeric && !e.noLabelsProvided || i.xaxis.convertedCatToNumeric && !e.dataFormatXNumeric || (void 0 === i.xaxis.tickAmount ? (t = Math.round(e.svgWidth / 150), \"numeric\" === i.xaxis.type && e.dataPoints < 20 && (t = e.dataPoints - 1), t > e.dataPoints && 0 !== e.dataPoints && (t = e.dataPoints - 1)) : t = \"dataPoints\" === i.xaxis.tickAmount ? e.series[e.maxValsInArrayIndex].length - 1 : i.xaxis.tickAmount, void 0 !== i.xaxis.max && \"number\" == typeof i.xaxis.max && (e.maxX = i.xaxis.max), void 0 !== i.xaxis.min && \"number\" == typeof i.xaxis.min && (e.minX = i.xaxis.min), void 0 !== i.xaxis.range && (e.minX = e.maxX - i.xaxis.range), e.minX !== Number.MAX_VALUE && e.maxX !== -Number.MAX_VALUE ? e.xAxisScale = this.scales.linearScale(e.minX, e.maxX, t) : (e.xAxisScale = this.scales.linearScale(1, t, t), e.noLabelsProvided && e.labels.length > 0 && (e.xAxisScale = this.scales.linearScale(1, e.labels.length, t - 1), e.seriesX = e.labels.slice())), s && (e.labels = e.xAxisScale.result.slice()));\n        if (e.minX === e.maxX) if (\"datetime\" === i.xaxis.type) {\n          var l = new Date(e.minX);\n          l.setDate(l.getDate() - 2), e.minX = new Date(l).getTime();\n          var h = new Date(e.maxX);\n          h.setDate(h.getDate() + 2), e.maxX = new Date(h).getTime();\n        } else (\"numeric\" === i.xaxis.type || \"category\" === i.xaxis.type && !e.noLabelsProvided) && (e.minX = e.minX - 2, e.maxX = e.maxX + 2);\n        return e.isXNumeric && (e.seriesX.forEach(function (t, i) {\n          t.forEach(function (t, s) {\n            if (s > 0) {\n              var a = t - e.seriesX[i][s - 1];\n              e.minXDiff = Math.min(a, e.minXDiff);\n            }\n          });\n        }), this.calcMinXDiffForTinySeries()), {\n          minX: e.minX,\n          maxX: e.maxX\n        };\n      }\n    }, {\n      key: \"calcMinXDiffForTinySeries\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals.labels.length;\n        return 1 === t.globals.labels.length ? t.globals.minXDiff = (t.globals.maxX - t.globals.minX) / e / 3 : t.globals.minXDiff === Number.MAX_VALUE && (t.globals.timelineLabels.length > 0 && (e = t.globals.timelineLabels.length), e < 3 && (e = 3), t.globals.minXDiff = (t.globals.maxX - t.globals.minX) / e), t.globals.minXDiff;\n      }\n    }, {\n      key: \"setZRange\",\n      value: function value() {\n        var t = this.w.globals;\n        if (t.isDataXYZ) for (var e = 0; e < t.series.length; e++) {\n          if (void 0 !== t.seriesZ[e]) for (var i = 0; i < t.seriesZ[e].length; i++) {\n            null !== t.seriesZ[e][i] && d.isNumber(t.seriesZ[e][i]) && (t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i]), t.minZ = Math.min(t.minZ, t.seriesZ[e][i]));\n          }\n        }\n      }\n    }]), t;\n  }(),\n      G = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"getAllSeriesEls\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n      }\n    }, {\n      key: \"getSeriesByName\",\n      value: function value(t) {\n        return this.w.globals.dom.baseEl.querySelector(\"[seriesName='\".concat(d.escapeString(t), \"']\"));\n      }\n    }, {\n      key: \"addCollapsedClassToSeries\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        function s(i) {\n          for (var s = 0; s < i.length; s++) {\n            i[s].index === e && t.node.classList.add(\"apexcharts-series-collapsed\");\n          }\n        }\n\n        s(i.globals.collapsedSeries), s(i.globals.ancillaryCollapsedSeries);\n      }\n    }, {\n      key: \"toggleSeriesOnHover\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = i.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n\n        if (\"mousemove\" === t.type) {\n          var a = parseInt(e.getAttribute(\"rel\")) - 1,\n              n = null;\n          n = i.globals.axisCharts || \"radialBar\" === i.config.chart.type ? i.globals.axisCharts ? i.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(a, \"']\")) : i.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(a + 1, \"']\")) : i.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(a + 1, \"'] path\"));\n\n          for (var r = 0; r < s.length; r++) {\n            s[r].classList.add(\"legend-mouseover-inactive\");\n          }\n\n          null !== n && (i.globals.axisCharts || n.parentNode.classList.remove(\"legend-mouseover-inactive\"), n.classList.remove(\"legend-mouseover-inactive\"));\n        } else if (\"mouseout\" === t.type) for (var o = 0; o < s.length; o++) {\n          s[o].classList.remove(\"legend-mouseover-inactive\");\n        }\n      }\n    }, {\n      key: \"highlightRangeInSeries\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = i.globals.dom.baseEl.querySelectorAll(\".apexcharts-heatmap-rect\"),\n            a = function a() {\n          for (var t = 0; t < s.length; t++) {\n            s[t].classList.remove(\"legend-mouseover-inactive\");\n          }\n        };\n\n        if (\"mousemove\" === t.type) {\n          var n = parseInt(e.getAttribute(\"rel\")) - 1;\n          a(), function () {\n            for (var t = 0; t < s.length; t++) {\n              s[t].classList.add(\"legend-mouseover-inactive\");\n            }\n          }(), function (t) {\n            for (var e = 0; e < s.length; e++) {\n              var i = parseInt(s[e].getAttribute(\"val\"));\n              i >= t.from && i <= t.to && s[e].classList.remove(\"legend-mouseover-inactive\");\n            }\n          }(i.config.plotOptions.heatmap.colorScale.ranges[n]);\n        } else \"mouseout\" === t.type && a();\n      }\n    }, {\n      key: \"getActiveSeriesIndex\",\n      value: function value() {\n        var t = this.w,\n            e = 0;\n        if (t.globals.series.length > 1) for (var i = t.globals.series.map(function (e, i) {\n          return e.length > 0 && \"bar\" !== t.config.series[i].type && \"column\" !== t.config.series[i].type ? i : -1;\n        }), s = 0; s < i.length; s++) {\n          if (-1 !== i[s]) {\n            e = i[s];\n            break;\n          }\n        }\n        return e;\n      }\n    }, {\n      key: \"getActiveConfigSeriesIndex\",\n      value: function value() {\n        var t = this.w,\n            e = 0;\n        if (t.config.series.length > 1) for (var i = t.config.series.map(function (t, e) {\n          return t.data && t.data.length > 0 ? e : -1;\n        }), s = 0; s < i.length; s++) {\n          if (-1 !== i[s]) {\n            e = i[s];\n            break;\n          }\n        }\n        return e;\n      }\n    }, {\n      key: \"getPreviousPaths\",\n      value: function value() {\n        var t = this.w;\n\n        function e(e, i, s) {\n          for (var a = e[i].childNodes, n = {\n            type: s,\n            paths: [],\n            realIndex: e[i].getAttribute(\"data:realIndex\")\n          }, r = 0; r < a.length; r++) {\n            if (a[r].hasAttribute(\"pathTo\")) {\n              var o = a[r].getAttribute(\"pathTo\");\n              n.paths.push({\n                d: o\n              });\n            }\n          }\n\n          t.globals.previousPaths.push(n);\n        }\n\n        t.globals.previousPaths = [];\n        var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-line-series .apexcharts-series\");\n        if (i.length > 0) for (var s = i.length - 1; s >= 0; s--) {\n          e(i, s, \"line\");\n        }\n        var a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-area-series .apexcharts-series\");\n        if (a.length > 0) for (var n = a.length - 1; n >= 0; n--) {\n          e(a, n, \"area\");\n        }\n        var r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-bar-series .apexcharts-series\");\n        if (r.length > 0) for (var o = 0; o < r.length; o++) {\n          e(r, o, \"bar\");\n        }\n        var l = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-candlestick-series .apexcharts-series\");\n        if (l.length > 0) for (var h = 0; h < l.length; h++) {\n          e(l, h, \"candlestick\");\n        }\n        var c = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-radar-series .apexcharts-series\");\n        if (c.length > 0) for (var d = 0; d < c.length; d++) {\n          e(c, d, \"radar\");\n        }\n        var u = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-bubble-series .apexcharts-series\");\n        if (u.length > 0) for (var g = 0; g < u.length; g++) {\n          for (var f = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-bubble-series .apexcharts-series[data\\\\:realIndex='\".concat(g, \"'] circle\")), p = [], x = 0; x < f.length; x++) {\n            p.push({\n              x: f[x].getAttribute(\"cx\"),\n              y: f[x].getAttribute(\"cy\"),\n              r: f[x].getAttribute(\"r\")\n            });\n          }\n\n          t.globals.previousPaths.push(p);\n        }\n        var b = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-scatter-series .apexcharts-series\");\n        if (b.length > 0) for (var m = 0; m < b.length; m++) {\n          for (var v = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-scatter-series .apexcharts-series[data\\\\:realIndex='\".concat(m, \"'] circle\")), y = [], w = 0; w < v.length; w++) {\n            y.push({\n              x: v[w].getAttribute(\"cx\"),\n              y: v[w].getAttribute(\"cy\"),\n              r: v[w].getAttribute(\"r\")\n            });\n          }\n\n          t.globals.previousPaths.push(y);\n        }\n        var k = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-heatmap .apexcharts-series\");\n        if (k.length > 0) for (var A = 0; A < k.length; A++) {\n          for (var S = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-heatmap .apexcharts-series[data\\\\:realIndex='\".concat(A, \"'] rect\")), C = [], L = 0; L < S.length; L++) {\n            C.push({\n              color: S[L].getAttribute(\"color\")\n            });\n          }\n\n          t.globals.previousPaths.push(C);\n        }\n        t.globals.axisCharts || (t.globals.previousPaths = t.globals.series);\n      }\n    }, {\n      key: \"handleNoData\",\n      value: function value() {\n        var t = this.w,\n            e = t.config.noData,\n            i = new f(this.ctx),\n            s = t.globals.svgWidth / 2,\n            a = t.globals.svgHeight / 2,\n            n = \"middle\";\n\n        if (t.globals.noData = !0, t.globals.animationEnded = !0, \"left\" === e.align ? (s = 10, n = \"start\") : \"right\" === e.align && (s = t.globals.svgWidth - 10, n = \"end\"), \"top\" === e.verticalAlign ? a = 50 : \"bottom\" === e.verticalAlign && (a = t.globals.svgHeight - 50), s += e.offsetX, a = a + parseInt(e.style.fontSize) + 2, void 0 !== e.text && \"\" !== e.text) {\n          var r = i.drawText({\n            x: s,\n            y: a,\n            text: e.text,\n            textAnchor: n,\n            fontSize: e.style.fontSize,\n            fontFamily: e.style.fontFamily,\n            foreColor: e.style.color,\n            opacity: 1,\n            \"class\": \"apexcharts-text-nodata\"\n          });\n          r.node.setAttribute(\"class\", \"apexcharts-title-text\"), t.globals.dom.Paper.add(r);\n        }\n      }\n    }, {\n      key: \"setNullSeriesToZeroValues\",\n      value: function value(t) {\n        for (var e = this.w, i = 0; i < t.length; i++) {\n          if (0 === t[i].length) for (var s = 0; s < t[e.globals.maxValsInArrayIndex].length; s++) {\n            t[i].push(0);\n          }\n        }\n\n        return t;\n      }\n    }, {\n      key: \"hasAllSeriesEqualX\",\n      value: function value() {\n        for (var t = !0, e = this.w, i = this.filteredSeriesX(), s = 0; s < i.length - 1; s++) {\n          if (i[s][0] !== i[s + 1][0]) {\n            t = !1;\n            break;\n          }\n        }\n\n        return e.globals.allSeriesHasEqualX = t, t;\n      }\n    }, {\n      key: \"filteredSeriesX\",\n      value: function value() {\n        var t = this.w.globals.seriesX.map(function (t, e) {\n          return t.length > 0 ? t : [];\n        });\n        return t;\n      }\n    }]), t;\n  }(),\n      _ = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.lgRect = {}, this.yAxisWidth = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.xPadRight = 0, this.xPadLeft = 0;\n    }\n\n    return s(t, [{\n      key: \"plotCoords\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals,\n            i = this.getLegendsRect();\n        e.axisCharts ? this.setGridCoordsForAxisCharts(i) : this.setGridCoordsForNonAxisCharts(i), this.titleSubtitleOffset(), e.gridHeight = e.gridHeight - t.config.grid.padding.top - t.config.grid.padding.bottom, e.gridWidth = e.gridWidth - t.config.grid.padding.left - t.config.grid.padding.right - this.xPadRight - this.xPadLeft, e.translateX = e.translateX + t.config.grid.padding.left + this.xPadLeft, e.translateY = e.translateY + t.config.grid.padding.top;\n      }\n    }, {\n      key: \"conditionalChecksForAxisCoords\",\n      value: function value(t, e) {\n        var i = this.w;\n        this.xAxisHeight = (t.height + e.height) * i.globals.LINE_HEIGHT_RATIO + 15, this.xAxisWidth = t.width, this.xAxisHeight - e.height > i.config.xaxis.labels.maxHeight && (this.xAxisHeight = i.config.xaxis.labels.maxHeight), i.config.xaxis.labels.minHeight && this.xAxisHeight < i.config.xaxis.labels.minHeight && (this.xAxisHeight = i.config.xaxis.labels.minHeight), i.config.xaxis.floating && (this.xAxisHeight = 0), i.globals.isBarHorizontal ? this.yAxisWidth = i.globals.yLabelsCoords[0].width + i.globals.yTitleCoords[0].width + 15 : this.yAxisWidth = this.getTotalYAxisWidth();\n        var s = 0,\n            a = 0;\n        i.config.yaxis.forEach(function (t) {\n          s += t.labels.minWidth, a += t.labels.maxWidth;\n        }), this.yAxisWidth < s && (this.yAxisWidth = s), this.yAxisWidth > a && (this.yAxisWidth = a);\n      }\n    }, {\n      key: \"setGridCoordsForAxisCharts\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.globals,\n            s = this.getyAxisLabelsCoords(),\n            a = this.getxAxisLabelsCoords(),\n            n = this.getyAxisTitleCoords(),\n            r = this.getxAxisTitleCoords();\n        e.globals.yLabelsCoords = [], e.globals.yTitleCoords = [], e.config.yaxis.map(function (t, i) {\n          e.globals.yLabelsCoords.push({\n            width: s[i].width,\n            index: i\n          }), e.globals.yTitleCoords.push({\n            width: n[i].width,\n            index: i\n          });\n        }), this.conditionalChecksForAxisCoords(a, r), i.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e.globals.isBarHorizontal && (i.rotateXLabels = !1, i.translateXAxisY = parseInt(e.config.xaxis.labels.style.fontSize) / 1.5 * -1), i.translateXAxisY = i.translateXAxisY + e.config.xaxis.labels.offsetY, i.translateXAxisX = i.translateXAxisX + e.config.xaxis.labels.offsetX;\n        var o = this.yAxisWidth,\n            l = this.xAxisHeight;\n        i.xAxisLabelsHeight = this.xAxisHeight, i.xAxisHeight = this.xAxisHeight;\n        var h = 10;\n\n        switch (e.config.grid.show && \"radar\" !== e.config.chart.type || (o = 0, l = 35), this.isSparkline && (t = {\n          height: 0,\n          width: 0\n        }, l = 0, o = 0, h = 0), this.additionalPaddingXLabels(a), e.config.legend.position) {\n          case \"bottom\":\n            i.translateY = h, i.translateX = o, i.gridHeight = i.svgHeight - t.height - l - (this.isSparkline ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - o;\n            break;\n\n          case \"top\":\n            i.translateY = t.height + h, i.translateX = o, i.gridHeight = i.svgHeight - t.height - l - (this.isSparkline ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - o;\n            break;\n\n          case \"left\":\n            i.translateY = h, i.translateX = t.width + o, i.gridHeight = i.svgHeight - l - 12, i.gridWidth = i.svgWidth - t.width - o;\n            break;\n\n          case \"right\":\n            i.translateY = h, i.translateX = o, i.gridHeight = i.svgHeight - l - 12, i.gridWidth = i.svgWidth - t.width - o - 5;\n            break;\n\n          default:\n            throw new Error(\"Legend position not supported\");\n        }\n\n        this.setGridXPosForDualYAxis(n, s), new W(this.ctx).setYAxisXPosition(s, n);\n      }\n    }, {\n      key: \"setGridCoordsForNonAxisCharts\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.globals,\n            s = 0;\n        e.config.legend.show && !e.config.legend.floating && (s = 20);\n        var a = 10,\n            n = 0;\n        if (\"pie\" === e.config.chart.type || \"donut\" === e.config.chart.type ? (a += e.config.plotOptions.pie.offsetY, n += e.config.plotOptions.pie.offsetX) : \"radialBar\" === e.config.chart.type && (a += e.config.plotOptions.radialBar.offsetY, n += e.config.plotOptions.radialBar.offsetX), !e.config.legend.show) return i.gridHeight = i.svgHeight - 35, i.gridWidth = i.gridHeight, i.translateY = a - 10, void (i.translateX = n + (i.svgWidth - i.gridWidth) / 2);\n\n        switch (e.config.legend.position) {\n          case \"bottom\":\n            i.gridHeight = i.svgHeight - t.height - 35, i.gridWidth = i.gridHeight, i.translateY = a - 20, i.translateX = n + (i.svgWidth - i.gridWidth) / 2;\n            break;\n\n          case \"top\":\n            i.gridHeight = i.svgHeight - t.height - 35, i.gridWidth = i.gridHeight, i.translateY = t.height + a, i.translateX = n + (i.svgWidth - i.gridWidth) / 2;\n            break;\n\n          case \"left\":\n            i.gridWidth = i.svgWidth - t.width - s, i.gridHeight = i.gridWidth, i.translateY = a, i.translateX = n + t.width + s;\n            break;\n\n          case \"right\":\n            i.gridWidth = i.svgWidth - t.width - s - 5, i.gridHeight = i.gridWidth, i.translateY = a, i.translateX = n + 10;\n            break;\n\n          default:\n            throw new Error(\"Legend position not supported\");\n        }\n      }\n    }, {\n      key: \"setGridXPosForDualYAxis\",\n      value: function value(t, e) {\n        var i = this.w;\n        i.config.yaxis.map(function (s, a) {\n          -1 === i.globals.ignoreYAxisIndexes.indexOf(a) && !i.config.yaxis[a].floating && i.config.yaxis[a].show && s.opposite && (i.globals.translateX = i.globals.translateX - (e[a].width + t[a].width) - parseInt(i.config.yaxis[a].labels.style.fontSize) / 1.2 - 12);\n        });\n      }\n    }, {\n      key: \"additionalPaddingXLabels\",\n      value: function value(t) {\n        var e = this,\n            i = this.w;\n\n        if (\"category\" === i.config.xaxis.type && i.globals.isBarHorizontal || \"numeric\" === i.config.xaxis.type || \"datetime\" === i.config.xaxis.type) {\n          var s = i.globals.isXNumeric;\n          i.config.yaxis.forEach(function (a, n) {\n            var r;\n            (!a.show || a.floating || -1 !== i.globals.collapsedSeriesIndices.indexOf(n) || s || a.opposite && i.globals.isBarHorizontal) && ((s && i.globals.isMultipleYAxis && -1 !== i.globals.collapsedSeriesIndices.indexOf(n) || i.globals.isBarHorizontal && a.opposite) && (r = t, i.config.grid.padding.left < r.width && (e.xPadLeft = r.width / 2 + 1)), (!i.globals.isBarHorizontal && a.opposite && -1 !== i.globals.collapsedSeriesIndices.indexOf(n) || s && !i.globals.isMultipleYAxis) && function (t) {\n              e.timescaleLabels ? e.timescaleLabels[e.timescaleLabels.length - 1].position + t.width > i.globals.gridWidth ? i.globals.skipLastTimelinelabel = !0 : i.globals.skipLastTimelinelabel = !1 : \"datetime\" !== i.config.xaxis.type && i.config.grid.padding.right < t.width && (e.xPadRight = t.width / 2 + 1);\n            }(t));\n          });\n        }\n      }\n    }, {\n      key: \"titleSubtitleOffset\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals,\n            i = this.isSparkline || !t.globals.axisCharts ? 0 : 10;\n        void 0 !== t.config.title.text ? i += t.config.title.margin : i += this.isSparkline || !t.globals.axisCharts ? 0 : 5, void 0 !== t.config.subtitle.text ? i += t.config.subtitle.margin : i += this.isSparkline || !t.globals.axisCharts ? 0 : 5, t.config.legend.show && \"bottom\" === t.config.legend.position && !t.config.legend.floating && t.config.series.length > 1 && (i += 10);\n        var s = this.getTitleSubtitleCoords(\"title\"),\n            a = this.getTitleSubtitleCoords(\"subtitle\");\n        e.gridHeight = e.gridHeight - s.height - a.height - i, e.translateY = e.translateY + s.height + a.height + i;\n      }\n    }, {\n      key: \"getTotalYAxisWidth\",\n      value: function value() {\n        var t = this.w,\n            e = 0,\n            i = 10,\n            s = function s(e) {\n          return t.globals.ignoreYAxisIndexes.indexOf(e) > -1;\n        };\n\n        return t.globals.yLabelsCoords.map(function (a, n) {\n          var r = t.config.yaxis[n].floating;\n          a.width > 0 && !r ? (e = e + a.width + i, s(n) && (e = e - a.width - i)) : e += r || !t.config.yaxis[n].show ? 0 : 5;\n        }), t.globals.yTitleCoords.map(function (a, n) {\n          var r = t.config.yaxis[n].floating;\n          i = parseInt(t.config.yaxis[n].title.style.fontSize), a.width > 0 && !r ? (e = e + a.width + i, s(n) && (e = e - a.width - i)) : e += r || !t.config.yaxis[n].show ? 0 : 5;\n        }), e;\n      }\n    }, {\n      key: \"getxAxisTimeScaleLabelsCoords\",\n      value: function value() {\n        var t,\n            e = this.w;\n        this.timescaleLabels = e.globals.timelineLabels.slice(), e.globals.isBarHorizontal && \"datetime\" === e.config.xaxis.type && (this.timescaleLabels = e.globals.invertedTimelineLabels.slice());\n        var i = this.timescaleLabels.map(function (t) {\n          return t.value;\n        }),\n            s = i.reduce(function (t, e) {\n          return void 0 === t ? (console.error(\"You have possibly supplied invalid Date format. Please supply a valid JavaScript Date\"), 0) : t.length > e.length ? t : e;\n        }, 0);\n        return 1.05 * (t = new f(this.ctx).getTextRects(s, e.config.xaxis.labels.style.fontSize)).width * i.length > e.globals.gridWidth && 0 !== e.config.xaxis.labels.rotate && (e.globals.overlappingXLabels = !0), t;\n      }\n    }, {\n      key: \"getxAxisLabelsCoords\",\n      value: function value() {\n        var t,\n            e = this.w,\n            i = e.globals.labels.slice();\n\n        if (e.globals.timelineLabels.length > 0) {\n          var s = this.getxAxisTimeScaleLabelsCoords();\n          t = {\n            width: s.width,\n            height: s.height\n          };\n        } else {\n          var a = \"left\" !== e.config.legend.position || \"right\" !== e.config.legend.position || e.config.legend.floating ? 0 : this.lgRect.width,\n              n = e.globals.xLabelFormatter,\n              r = i.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          }, 0);\n          e.globals.isBarHorizontal && (r = e.globals.yAxisScale[0].result.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          }, 0)), r = new N(this.ctx).xLabelFormat(n, r);\n          var o = new f(this.ctx),\n              l = o.getTextRects(r, e.config.xaxis.labels.style.fontSize);\n          (t = {\n            width: l.width,\n            height: l.height\n          }).width * i.length > e.globals.svgWidth - a - this.yAxisWidth && 0 !== e.config.xaxis.labels.rotate ? e.globals.isBarHorizontal || (e.globals.rotateXLabels = !0, l = o.getTextRects(r, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, \"rotate(\".concat(e.config.xaxis.labels.rotate, \" 0 0)\"), !1), t.height = l.height / 1.66) : e.globals.rotateXLabels = !1;\n        }\n\n        return e.config.xaxis.labels.show || (t = {\n          width: 0,\n          height: 0\n        }), {\n          width: t.width,\n          height: t.height\n        };\n      }\n    }, {\n      key: \"getyAxisLabelsCoords\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = [],\n            s = 10;\n        return e.config.yaxis.map(function (a, n) {\n          if (a.show && a.labels.show && e.globals.yAxisScale[n].result.length) {\n            var r = e.globals.yLabelFormatters[n],\n                o = r(e.globals.yAxisScale[n].niceMax, -1);\n            if (void 0 !== o && 0 !== o.length || (o = e.globals.yAxisScale[n].niceMax), e.globals.isBarHorizontal) s = 0, o = r(o = e.globals.labels.slice().reduce(function (t, e) {\n              return t.length > e.length ? t : e;\n            }, 0), -1);\n            var l = new f(t.ctx).getTextRects(o, a.labels.style.fontSize);\n            i.push({\n              width: l.width + s,\n              height: l.height\n            });\n          } else i.push({\n            width: 0,\n            height: 0\n          });\n        }), i;\n      }\n    }, {\n      key: \"getxAxisTitleCoords\",\n      value: function value() {\n        var t = this.w,\n            e = 0,\n            i = 0;\n\n        if (void 0 !== t.config.xaxis.title.text) {\n          var s = new f(this.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);\n          e = s.width, i = s.height;\n        }\n\n        return {\n          width: e,\n          height: i\n        };\n      }\n    }, {\n      key: \"getyAxisTitleCoords\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = [];\n        return e.config.yaxis.map(function (e, s) {\n          if (e.show && void 0 !== e.title.text) {\n            var a = new f(t.ctx).getTextRects(e.title.text, e.title.style.fontSize, e.title.style.fontFamily, \"rotate(-90 0 0)\", !1);\n            i.push({\n              width: a.width,\n              height: a.height\n            });\n          } else i.push({\n            width: 0,\n            height: 0\n          });\n        }), i;\n      }\n    }, {\n      key: \"getTitleSubtitleCoords\",\n      value: function value(t) {\n        var e = this.w,\n            i = 0,\n            s = 0,\n            a = \"title\" === t ? e.config.title.floating : e.config.subtitle.floating,\n            n = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(t, \"-text\"));\n\n        if (null !== n && !a) {\n          var r = n.getBoundingClientRect();\n          i = r.width, s = e.globals.axisCharts ? r.height + 5 : r.height;\n        }\n\n        return {\n          width: i,\n          height: s\n        };\n      }\n    }, {\n      key: \"getLegendsRect\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals.dom.baseEl.querySelector(\".apexcharts-legend\"),\n            i = Object.assign({}, d.getBoundingClientRect(e));\n        return null !== e && !t.config.legend.floating && t.config.legend.show ? this.lgRect = {\n          x: i.x,\n          y: i.y,\n          height: i.height,\n          width: 0 === i.height ? 0 : i.width\n        } : this.lgRect = {\n          x: 0,\n          y: 0,\n          height: 0,\n          width: 0\n        }, this.lgRect;\n      }\n    }]), t;\n  }(),\n      j = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.timeScaleArray = [];\n    }\n\n    return s(t, [{\n      key: \"calculateTimeScaleTicks\",\n      value: function value(t, e) {\n        var i = this,\n            s = this.w;\n        if (s.globals.allSeriesCollapsed) return s.globals.labels = [], s.globals.timelineLabels = [], [];\n        var a = new m(this.ctx),\n            r = (e - t) / 864e5;\n        this.determineInterval(r), s.globals.disableZoomIn = !1, s.globals.disableZoomOut = !1, r < .005 ? s.globals.disableZoomIn = !0 : r > 5e4 && (s.globals.disableZoomOut = !0);\n        var o = a.getTimeUnitsfromTimestamp(t, e),\n            l = s.globals.gridWidth / r,\n            h = l / 24,\n            c = h / 60,\n            d = Math.floor(24 * r),\n            u = Math.floor(24 * r * 60),\n            g = Math.floor(r),\n            f = Math.floor(r / 30),\n            p = Math.floor(r / 365),\n            x = {\n          minMinute: o.minMinute,\n          minHour: o.minHour,\n          minDate: o.minDate,\n          minMonth: o.minMonth,\n          minYear: o.minYear\n        },\n            b = {\n          firstVal: x,\n          currentMinute: x.minMinute,\n          currentHour: x.minHour,\n          currentMonthDate: x.minDate,\n          currentDate: x.minDate,\n          currentMonth: x.minMonth,\n          currentYear: x.minYear,\n          daysWidthOnXAxis: l,\n          hoursWidthOnXAxis: h,\n          minutesWidthOnXAxis: c,\n          numberOfMinutes: u,\n          numberOfHours: d,\n          numberOfDays: g,\n          numberOfMonths: f,\n          numberOfYears: p\n        };\n\n        switch (this.tickInterval) {\n          case \"years\":\n            this.generateYearScale(b);\n            break;\n\n          case \"months\":\n          case \"half_year\":\n            this.generateMonthScale(b);\n            break;\n\n          case \"months_days\":\n          case \"months_fortnight\":\n          case \"days\":\n          case \"week_days\":\n            this.generateDayScale(b);\n            break;\n\n          case \"hours\":\n            this.generateHourScale(b);\n            break;\n\n          case \"minutes\":\n            this.generateMinuteScale(b);\n        }\n\n        var v = this.timeScaleArray.map(function (t) {\n          var e = {\n            position: t.position,\n            unit: t.unit,\n            year: t.year,\n            day: t.day ? t.day : 1,\n            hour: t.hour ? t.hour : 0,\n            month: t.month + 1\n          };\n          return \"month\" === t.unit ? n({}, e, {\n            value: t.value + 1\n          }) : \"day\" === t.unit || \"hour\" === t.unit ? n({}, e, {\n            value: t.value\n          }) : \"minute\" === t.unit ? n({}, e, {\n            value: t.value,\n            minute: t.value\n          }) : t;\n        });\n        return v.filter(function (t) {\n          var e = 1,\n              a = Math.ceil(s.globals.gridWidth / 120),\n              n = t.value;\n          void 0 !== s.config.xaxis.tickAmount && (a = s.config.xaxis.tickAmount), v.length > a && (e = Math.floor(v.length / a));\n          var r = !1,\n              o = !1;\n\n          switch (i.tickInterval) {\n            case \"half_year\":\n              e = 7, \"year\" === t.unit && (r = !0);\n              break;\n\n            case \"months\":\n              e = 1, \"year\" === t.unit && (r = !0);\n              break;\n\n            case \"months_fortnight\":\n              e = 15, \"year\" !== t.unit && \"month\" !== t.unit || (r = !0), 30 === n && (o = !0);\n              break;\n\n            case \"months_days\":\n              e = 10, \"month\" === t.unit && (r = !0), 30 === n && (o = !0);\n              break;\n\n            case \"week_days\":\n              e = 8, \"month\" === t.unit && (r = !0);\n              break;\n\n            case \"days\":\n              e = 1, \"month\" === t.unit && (r = !0);\n              break;\n\n            case \"hours\":\n              \"day\" === t.unit && (r = !0);\n              break;\n\n            case \"minutes\":\n              n % 5 != 0 && (o = !0);\n          }\n\n          if (\"minutes\" === i.tickInterval || \"hours\" === i.tickInterval) {\n            if (!o) return !0;\n          } else if ((n % e == 0 || r) && !o) return !0;\n        });\n      }\n    }, {\n      key: \"recalcDimensionsBasedOnFormat\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = this.formatDates(t),\n            a = this.removeOverlappingTS(s);\n        e ? i.globals.invertedTimelineLabels = a.slice() : i.globals.timelineLabels = a.slice(), new _(this.ctx).plotCoords();\n      }\n    }, {\n      key: \"determineInterval\",\n      value: function value(t) {\n        switch (!0) {\n          case t > 1825:\n            this.tickInterval = \"years\";\n            break;\n\n          case t > 800 && t <= 1825:\n            this.tickInterval = \"half_year\";\n            break;\n\n          case t > 180 && t <= 800:\n            this.tickInterval = \"months\";\n            break;\n\n          case t > 90 && t <= 180:\n            this.tickInterval = \"months_fortnight\";\n            break;\n\n          case t > 60 && t <= 90:\n            this.tickInterval = \"months_days\";\n            break;\n\n          case t > 30 && t <= 60:\n            this.tickInterval = \"week_days\";\n            break;\n\n          case t > 2 && t <= 30:\n            this.tickInterval = \"days\";\n            break;\n\n          case t > .1 && t <= 2:\n            this.tickInterval = \"hours\";\n            break;\n\n          case t < .1:\n            this.tickInterval = \"minutes\";\n            break;\n\n          default:\n            this.tickInterval = \"days\";\n        }\n      }\n    }, {\n      key: \"generateYearScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentMonth,\n            s = t.currentYear,\n            a = t.daysWidthOnXAxis,\n            n = t.numberOfYears,\n            r = e.minYear,\n            o = 0,\n            l = new m(this.ctx);\n\n        if (e.minDate > 1 && e.minMonth > 0) {\n          var h = l.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);\n          o = (l.determineDaysOfYear(e.minYear) - h + 1) * a, r = e.minYear + 1, this.timeScaleArray.push({\n            position: o,\n            value: r,\n            unit: \"year\",\n            year: r,\n            month: d.monthMod(i + 1)\n          });\n        } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({\n          position: o,\n          value: r,\n          unit: \"year\",\n          year: s,\n          month: d.monthMod(i + 1)\n        });\n\n        for (var c = r, u = o, g = 0; g < n; g++) {\n          c++, u = l.determineDaysOfYear(c - 1) * a + u, this.timeScaleArray.push({\n            position: u,\n            value: c,\n            unit: \"year\",\n            year: c,\n            month: 1\n          });\n        }\n      }\n    }, {\n      key: \"generateMonthScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentMonthDate,\n            s = t.currentMonth,\n            a = t.currentYear,\n            n = t.daysWidthOnXAxis,\n            r = t.numberOfMonths,\n            o = s,\n            l = 0,\n            h = new m(this.ctx),\n            c = \"month\",\n            u = 0;\n\n        if (e.minDate > 1) {\n          l = (h.determineDaysOfMonths(s + 1, e.minYear) - i + 1) * n, o = d.monthMod(s + 1);\n          var g = a + u,\n              f = d.monthMod(o),\n              p = o;\n          0 === o && (c = \"year\", p = g, f = 1, g += u += 1), this.timeScaleArray.push({\n            position: l,\n            value: p,\n            unit: c,\n            year: g,\n            month: f\n          });\n        } else this.timeScaleArray.push({\n          position: l,\n          value: o,\n          unit: c,\n          year: a,\n          month: d.monthMod(s)\n        });\n\n        for (var x = o + 1, b = l, v = 0, y = 1; v < r; v++, y++) {\n          0 === (x = d.monthMod(x)) ? (c = \"year\", u += 1) : c = \"month\";\n          var w = a + Math.floor(x / 12) + u;\n          b = h.determineDaysOfMonths(x, w) * n + b;\n          var k = 0 === x ? w : x;\n          this.timeScaleArray.push({\n            position: b,\n            value: k,\n            unit: c,\n            year: w,\n            month: 0 === x ? 1 : x\n          }), x++;\n        }\n      }\n    }, {\n      key: \"generateDayScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentMonth,\n            s = t.currentYear,\n            a = t.hoursWidthOnXAxis,\n            n = t.numberOfDays,\n            r = new m(this.ctx),\n            o = \"day\",\n            l = (24 - e.minHour) * a,\n            h = e.minDate + 1,\n            c = h,\n            u = function u(t, e, i) {\n          return t > r.determineDaysOfMonths(e + 1, i) ? (g = 1, o = \"month\", c = e += 1, e) : e;\n        },\n            g = h,\n            f = u(g, i, s);\n\n        this.timeScaleArray.push({\n          position: l,\n          value: c,\n          unit: o,\n          year: s,\n          month: d.monthMod(f),\n          day: g\n        });\n\n        for (var p = l, x = 0; x < n; x++) {\n          o = \"day\", f = u(g += 1, f, s + Math.floor(f / 12) + 0);\n          var b = s + Math.floor(f / 12) + 0;\n          p = 24 * a + p;\n          var v = 1 === g ? d.monthMod(f) : g;\n          this.timeScaleArray.push({\n            position: p,\n            value: v,\n            unit: o,\n            year: b,\n            month: d.monthMod(f),\n            day: v\n          });\n        }\n      }\n    }, {\n      key: \"generateHourScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentDate,\n            s = t.currentMonth,\n            a = t.currentYear,\n            n = t.minutesWidthOnXAxis,\n            r = t.numberOfHours,\n            o = new m(this.ctx),\n            l = \"hour\",\n            h = function h(t, e) {\n          return t > o.determineDaysOfMonths(e + 1, a) && (x = 1, e += 1), {\n            month: e,\n            date: x\n          };\n        },\n            c = function c(t, e) {\n          return t > o.determineDaysOfMonths(e + 1, a) ? e += 1 : e;\n        },\n            u = 60 - e.minMinute,\n            g = u * n,\n            f = e.minHour + 1,\n            p = f + 1;\n\n        60 === u && (g = 0, p = (f = e.minHour) + 1);\n        var x = i,\n            b = c(x, s);\n        this.timeScaleArray.push({\n          position: g,\n          value: f,\n          unit: l,\n          day: x,\n          hour: p,\n          year: a,\n          month: d.monthMod(b)\n        });\n\n        for (var v = g, y = 0; y < r; y++) {\n          if (l = \"hour\", p >= 24) p = 0, l = \"day\", b = h(x += 1, b).month, b = c(x, b);\n          var w = a + Math.floor(b / 12) + 0;\n          v = 0 === p && 0 === y ? u * n : 60 * n + v;\n          var k = 0 === p ? x : p;\n          this.timeScaleArray.push({\n            position: v,\n            value: k,\n            unit: l,\n            hour: p,\n            day: x,\n            year: w,\n            month: d.monthMod(b)\n          }), p++;\n        }\n      }\n    }, {\n      key: \"generateMinuteScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentMinute,\n            s = t.currentHour,\n            a = t.currentDate,\n            n = t.currentMonth,\n            r = t.currentYear,\n            o = t.minutesWidthOnXAxis,\n            l = t.numberOfMinutes,\n            h = o - (i - e.minMinute),\n            c = e.minMinute + 1,\n            u = c + 1,\n            g = a,\n            f = n,\n            p = r,\n            x = s;\n        this.timeScaleArray.push({\n          position: h,\n          value: c,\n          unit: \"minute\",\n          day: g,\n          hour: x,\n          minute: u,\n          year: p,\n          month: d.monthMod(f)\n        });\n\n        for (var b = h, m = 0; m < l; m++) {\n          u >= 60 && (u = 0, 24 === (x += 1) && (x = 0));\n          var v = r + Math.floor(f / 12) + 0;\n          b = o + b;\n          var y = u;\n          this.timeScaleArray.push({\n            position: b,\n            value: y,\n            unit: \"minute\",\n            hour: x,\n            minute: u,\n            day: g,\n            year: v,\n            month: d.monthMod(f)\n          }), u++;\n        }\n      }\n    }, {\n      key: \"createRawDateString\",\n      value: function value(t, e) {\n        var i = t.year;\n        return i += \"-\" + (\"0\" + t.month.toString()).slice(-2), \"day\" === t.unit ? i += \"day\" === t.unit ? \"-\" + (\"0\" + e).slice(-2) : \"-01\" : i += \"-\" + (\"0\" + (t.day ? t.day : \"1\")).slice(-2), \"hour\" === t.unit ? i += \"hour\" === t.unit ? \"T\" + (\"0\" + e).slice(-2) : \"T00\" : i += \"T\" + (\"0\" + (t.hour ? t.hour : \"0\")).slice(-2), i += \"minute\" === t.unit ? \":\" + (\"0\" + e).slice(-2) + \":00.000Z\" : \":00:00.000Z\";\n      }\n    }, {\n      key: \"formatDates\",\n      value: function value(t) {\n        var e = this,\n            i = this.w;\n        return t.map(function (t) {\n          var s = t.value.toString(),\n              a = new m(e.ctx),\n              n = e.createRawDateString(t, s),\n              r = new Date(Date.parse(n));\n\n          if (void 0 === i.config.xaxis.labels.format) {\n            var o = \"dd MMM\",\n                l = i.config.xaxis.labels.datetimeFormatter;\n            \"year\" === t.unit && (o = l.year), \"month\" === t.unit && (o = l.month), \"day\" === t.unit && (o = l.day), \"hour\" === t.unit && (o = l.hour), \"minute\" === t.unit && (o = l.minute), s = a.formatDate(r, o, !0, !1);\n          } else s = a.formatDate(r, i.config.xaxis.labels.format);\n\n          return {\n            dateString: n,\n            position: t.position,\n            value: s,\n            unit: t.unit,\n            year: t.year,\n            month: t.month\n          };\n        });\n      }\n    }, {\n      key: \"removeOverlappingTS\",\n      value: function value(t) {\n        var e = this,\n            i = new f(this.ctx),\n            s = 0,\n            a = t.map(function (a, n) {\n          if (n > 0 && e.w.config.xaxis.labels.hideOverlappingLabels) {\n            var r = i.getTextRects(t[s].value).width,\n                o = t[s].position;\n            return a.position > o + r + 10 ? (s = n, a) : null;\n          }\n\n          return a;\n        });\n        return a = a.filter(function (t) {\n          return null !== t;\n        });\n      }\n    }]), t;\n  }(),\n      U = function () {\n    function t(i, s) {\n      e(this, t), this.ctx = s, this.w = s.w, this.el = i, this.coreUtils = new y(this.ctx), this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [];\n    }\n\n    return s(t, [{\n      key: \"setupElements\",\n      value: function value() {\n        var t = this.w.globals,\n            e = this.w.config,\n            i = e.chart.type;\n        t.axisCharts = [\"line\", \"area\", \"bar\", \"rangeBar\", \"candlestick\", \"radar\", \"scatter\", \"bubble\", \"heatmap\"].indexOf(i) > -1, t.xyCharts = [\"line\", \"area\", \"bar\", \"rangeBar\", \"candlestick\", \"scatter\", \"bubble\"].indexOf(i) > -1, t.isBarHorizontal = (\"bar\" === e.chart.type || \"rangeBar\" === e.chart.type) && e.plotOptions.bar.horizontal, t.chartClass = \".apexcharts\" + t.cuid, t.dom.baseEl = this.el, t.dom.elWrap = document.createElement(\"div\"), f.setAttrs(t.dom.elWrap, {\n          id: t.chartClass.substring(1),\n          \"class\": \"apexcharts-canvas \" + t.chartClass.substring(1)\n        }), this.el.appendChild(t.dom.elWrap), t.dom.Paper = new window.SVG.Doc(t.dom.elWrap), t.dom.Paper.attr({\n          \"class\": \"apexcharts-svg\",\n          \"xmlns:data\": \"ApexChartsNS\",\n          transform: \"translate(\".concat(e.chart.offsetX, \", \").concat(e.chart.offsetY, \")\")\n        }), t.dom.Paper.node.style.background = e.chart.background, this.setSVGDimensions(), t.dom.elGraphical = t.dom.Paper.group().attr({\n          \"class\": \"apexcharts-inner apexcharts-graphical\"\n        }), t.dom.elDefs = t.dom.Paper.defs(), t.dom.elLegendWrap = document.createElement(\"div\"), t.dom.elLegendWrap.classList.add(\"apexcharts-legend\"), t.dom.elWrap.appendChild(t.dom.elLegendWrap), t.dom.Paper.add(t.dom.elGraphical), t.dom.elGraphical.add(t.dom.elDefs);\n      }\n    }, {\n      key: \"plotChartType\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = i.config,\n            a = i.globals,\n            n = {\n          series: [],\n          i: []\n        },\n            r = {\n          series: [],\n          i: []\n        },\n            o = {\n          series: [],\n          i: []\n        },\n            l = {\n          series: [],\n          i: []\n        },\n            h = {\n          series: [],\n          i: []\n        };\n        a.series.map(function (e, s) {\n          void 0 !== t[s].type ? (\"column\" === t[s].type || \"bar\" === t[s].type ? (i.config.plotOptions.bar.horizontal = !1, l.series.push(e), l.i.push(s)) : \"area\" === t[s].type ? (r.series.push(e), r.i.push(s)) : \"line\" === t[s].type ? (n.series.push(e), n.i.push(s)) : \"scatter\" === t[s].type ? (o.series.push(e), o.i.push(s)) : \"bubble\" === t[s].type || (\"candlestick\" === t[s].type ? (h.series.push(e), h.i.push(s)) : console.warn(\"You have specified an unrecognized chart type. Available types for this propery are line/area/column/bar/scatter/bubble\")), a.comboCharts = !0) : (n.series.push(e), n.i.push(s));\n        });\n        var c = new D(this.ctx, e),\n            d = new E(this.ctx, e),\n            u = new I(this.ctx),\n            g = new F(this.ctx),\n            f = new R(this.ctx, e),\n            p = new Y(this.ctx),\n            x = [];\n\n        if (a.comboCharts) {\n          if (r.series.length > 0 && x.push(c.draw(r.series, \"area\", r.i)), l.series.length > 0) if (i.config.chart.stacked) {\n            var b = new M(this.ctx, e);\n            x.push(b.draw(l.series, l.i));\n          } else {\n            var m = new P(this.ctx, e);\n            x.push(m.draw(l.series, l.i));\n          }\n\n          if (n.series.length > 0 && x.push(c.draw(n.series, \"line\", n.i)), h.series.length > 0 && x.push(d.draw(h.series, h.i)), o.series.length > 0) {\n            var v = new D(this.ctx, e, !0);\n            x.push(v.draw(o.series, \"scatter\", o.i));\n          }\n        } else switch (s.chart.type) {\n          case \"line\":\n            x = c.draw(a.series, \"line\");\n            break;\n\n          case \"area\":\n            x = c.draw(a.series, \"area\");\n            break;\n\n          case \"bar\":\n            if (s.chart.stacked) x = new M(this.ctx, e).draw(a.series);else x = new P(this.ctx, e).draw(a.series);\n            break;\n\n          case \"candlestick\":\n            x = new E(this.ctx, e).draw(a.series);\n            break;\n\n          case \"rangeBar\":\n            x = f.draw(a.series);\n            break;\n\n          case \"heatmap\":\n            x = new X(this.ctx, e).draw(a.series);\n            break;\n\n          case \"pie\":\n          case \"donut\":\n            x = u.draw(a.series);\n            break;\n\n          case \"radialBar\":\n            x = g.draw(a.series);\n            break;\n\n          case \"radar\":\n            x = p.draw(a.series);\n            break;\n\n          default:\n            x = c.draw(a.series);\n        }\n\n        return x;\n      }\n    }, {\n      key: \"setSVGDimensions\",\n      value: function value() {\n        var t = this.w.globals,\n            e = this.w.config;\n        t.svgWidth = e.chart.width, t.svgHeight = e.chart.height;\n        var i = d.getDimensions(this.el),\n            s = e.chart.width.toString().split(/[0-9]+/g).pop();\n        if (\"%\" === s ? d.isNumber(i[0]) && (0 === i[0].width && (i = d.getDimensions(this.el.parentNode)), t.svgWidth = i[0] * parseInt(e.chart.width) / 100) : \"px\" !== s && \"\" !== s || (t.svgWidth = parseInt(e.chart.width)), \"auto\" !== t.svgHeight && \"\" !== t.svgHeight) {\n          if (\"%\" === e.chart.height.toString().split(/[0-9]+/g).pop()) {\n            var a = d.getDimensions(this.el.parentNode);\n            t.svgHeight = a[1] * parseInt(e.chart.height) / 100;\n          } else t.svgHeight = parseInt(e.chart.height);\n        } else t.axisCharts ? t.svgHeight = t.svgWidth / 1.61 : t.svgHeight = t.svgWidth;\n        f.setAttrs(t.dom.Paper.node, {\n          width: t.svgWidth,\n          height: t.svgHeight\n        });\n        var n = e.chart.sparkline.enabled ? 0 : t.axisCharts ? e.chart.parentHeightOffset : 0;\n        t.dom.Paper.node.parentNode.parentNode.style.minHeight = t.svgHeight + n + \"px\", t.dom.elWrap.style.width = t.svgWidth + \"px\", t.dom.elWrap.style.height = t.svgHeight + \"px\";\n      }\n    }, {\n      key: \"shiftGraphPosition\",\n      value: function value() {\n        var t = this.w.globals,\n            e = t.translateY,\n            i = {\n          transform: \"translate(\" + t.translateX + \", \" + e + \")\"\n        };\n        f.setAttrs(t.dom.elGraphical.node, i);\n      }\n    }, {\n      key: \"coreCalculations\",\n      value: function value() {\n        new V(this.ctx).init();\n      }\n    }, {\n      key: \"resetGlobals\",\n      value: function value() {\n        var t = this,\n            e = this.w.globals;\n        e.series = [], e.seriesCandleO = [], e.seriesCandleH = [], e.seriesCandleL = [], e.seriesCandleC = [], e.seriesRangeStart = [], e.seriesRangeEnd = [], e.seriesPercent = [], e.seriesX = [], e.seriesZ = [], e.seriesNames = [], e.seriesTotals = [], e.stackedSeriesTotals = [], e.labels = [], e.timelineLabels = [], e.noLabelsProvided = !1, e.timescaleTicks = [], e.resizeTimer = null, e.selectionResizeTimer = null, e.seriesXvalues = t.w.config.series.map(function (t) {\n          return [];\n        }), e.seriesYvalues = t.w.config.series.map(function (t) {\n          return [];\n        }), e.delayedElements = [], e.pointsArray = [], e.dataLabelsRects = [], e.isXNumeric = !1, e.isDataXYZ = !1, e.maxY = -Number.MAX_VALUE, e.minY = Number.MIN_VALUE, e.minYArr = [], e.maxYArr = [], e.maxX = -Number.MAX_VALUE, e.minX = Number.MAX_VALUE, e.initialmaxX = -Number.MAX_VALUE, e.initialminX = Number.MAX_VALUE, e.maxDate = 0, e.minDate = Number.MAX_VALUE, e.minZ = Number.MAX_VALUE, e.maxZ = -Number.MAX_VALUE, e.minXDiff = Number.MAX_VALUE, e.yAxisScale = [], e.xAxisScale = null, e.xAxisTicksPositions = [], e.yLabelsCoords = [], e.yTitleCoords = [], e.xRange = 0, e.yRange = [], e.zRange = 0, e.dataPoints = 0;\n      }\n    }, {\n      key: \"isMultipleY\",\n      value: function value() {\n        if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.config.chart.stacked = !1, this.w.globals.isMultipleYAxis = !0, !0;\n      }\n    }, {\n      key: \"excludeCollapsedSeriesInYAxis\",\n      value: function value() {\n        var t = this,\n            e = this.w;\n        e.globals.ignoreYAxisIndexes = e.globals.collapsedSeries.map(function (e, i) {\n          if (t.w.globals.isMultipleYAxis) return e.index;\n        });\n      }\n    }, {\n      key: \"isMultiFormat\",\n      value: function value() {\n        return this.isFormatXY() || this.isFormat2DArray();\n      }\n    }, {\n      key: \"isFormatXY\",\n      value: function value() {\n        var t = this.w.config.series.slice(),\n            e = new G(this.ctx);\n        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null !== t[this.activeSeriesIndex].data[0] && void 0 !== t[this.activeSeriesIndex].data[0].x && null !== t[this.activeSeriesIndex].data[0]) return !0;\n      }\n    }, {\n      key: \"isFormat2DArray\",\n      value: function value() {\n        var t = this.w.config.series.slice(),\n            e = new G(this.ctx);\n        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && void 0 !== t[this.activeSeriesIndex].data[0] && null !== t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array) return !0;\n      }\n    }, {\n      key: \"handleFormat2DArray\",\n      value: function value(t, e) {\n        for (var i = this.w.config, s = this.w.globals, a = 0; a < t[e].data.length; a++) {\n          if (void 0 !== t[e].data[a][1] && (Array.isArray(t[e].data[a][1]) && 4 === t[e].data[a][1].length ? this.twoDSeries.push(d.parseNumber(t[e].data[a][1][3])) : this.twoDSeries.push(d.parseNumber(t[e].data[a][1])), s.dataFormatXNumeric = !0), \"datetime\" === i.xaxis.type) {\n            var n = new Date(t[e].data[a][0]);\n            n = new Date(n).getTime(), this.twoDSeriesX.push(n);\n          } else this.twoDSeriesX.push(t[e].data[a][0]);\n        }\n\n        for (var r = 0; r < t[e].data.length; r++) {\n          void 0 !== t[e].data[r][2] && (this.threeDSeries.push(t[e].data[r][2]), s.isDataXYZ = !0);\n        }\n      }\n    }, {\n      key: \"handleFormatXY\",\n      value: function value(t, e) {\n        var i = this.w.config,\n            s = this.w.globals,\n            a = new m(this.ctx),\n            n = e;\n        s.collapsedSeriesIndices.indexOf(e) > -1 && (n = this.activeSeriesIndex);\n\n        for (var r = 0; r < t[e].data.length; r++) {\n          void 0 !== t[e].data[r].y && (Array.isArray(t[e].data[r].y) ? this.twoDSeries.push(d.parseNumber(t[e].data[r].y[t[e].data[r].y.length - 1])) : this.twoDSeries.push(d.parseNumber(t[e].data[r].y)));\n        }\n\n        for (var o = 0; o < t[n].data.length; o++) {\n          var l = \"string\" == typeof t[n].data[o].x,\n              h = !!a.isValidDate(t[n].data[o].x.toString());\n          l || h ? l ? \"datetime\" !== i.xaxis.type || s.isRangeData ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[n].data[o].x)) : this.twoDSeriesX.push(a.parseDate(t[n].data[o].x)) : \"datetime\" === i.xaxis.type ? this.twoDSeriesX.push(a.parseDate(t[n].data[o].x.toString())) : (s.dataFormatXNumeric = !0, s.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t[n].data[o].x))) : (s.isXNumeric = !0, s.dataFormatXNumeric = !0, this.twoDSeriesX.push(t[n].data[o].x));\n        }\n\n        if (t[e].data[0] && void 0 !== t[e].data[0].z) {\n          for (var c = 0; c < t[e].data.length; c++) {\n            this.threeDSeries.push(t[e].data[c].z);\n          }\n\n          s.isDataXYZ = !0;\n        }\n      }\n    }, {\n      key: \"handleRangeData\",\n      value: function value(t, e) {\n        var i = this.w.globals,\n            s = {};\n        return this.isFormat2DArray() ? s = this.handleRangeDataFormat(\"array\", t, e) : this.isFormatXY() && (s = this.handleRangeDataFormat(\"xy\", t, e)), i.seriesRangeStart.push(s.start), i.seriesRangeEnd.push(s.end), s;\n      }\n    }, {\n      key: \"handleCandleStickData\",\n      value: function value(t, e) {\n        var i = this.w.globals,\n            s = {};\n        return this.isFormat2DArray() ? s = this.handleCandleStickDataFormat(\"array\", t, e) : this.isFormatXY() && (s = this.handleCandleStickDataFormat(\"xy\", t, e)), i.seriesCandleO.push(s.o), i.seriesCandleH.push(s.h), i.seriesCandleL.push(s.l), i.seriesCandleC.push(s.c), s;\n      }\n    }, {\n      key: \"handleRangeDataFormat\",\n      value: function value(t, e, i) {\n        var s = [],\n            a = [],\n            n = \"Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts\",\n            r = new G(this.ctx).getActiveConfigSeriesIndex();\n\n        if (\"array\" === t) {\n          if (2 !== e[r].data[0][1].length) throw new Error(n);\n\n          for (var o = 0; o < e[i].data.length; o++) {\n            s.push(e[i].data[o][1][0]), a.push(e[i].data[o][1][1]);\n          }\n        } else if (\"xy\" === t) {\n          if (2 !== e[r].data[0].y.length) throw new Error(n);\n\n          for (var l = 0; l < e[i].data.length; l++) {\n            s.push(e[i].data[l].y[0]), a.push(e[i].data[l].y[1]);\n          }\n        }\n\n        return {\n          start: s,\n          end: a\n        };\n      }\n    }, {\n      key: \"handleCandleStickDataFormat\",\n      value: function value(t, e, i) {\n        var s = [],\n            a = [],\n            n = [],\n            r = [],\n            o = \"Please provide [Open, High, Low and Close] values in valid format. Read more https://apexcharts.com/docs/series/#candlestick\";\n\n        if (\"array\" === t) {\n          if (4 !== e[i].data[0][1].length) throw new Error(o);\n\n          for (var l = 0; l < e[i].data.length; l++) {\n            s.push(e[i].data[l][1][0]), a.push(e[i].data[l][1][1]), n.push(e[i].data[l][1][2]), r.push(e[i].data[l][1][3]);\n          }\n        } else if (\"xy\" === t) {\n          if (4 !== e[i].data[0].y.length) throw new Error(o);\n\n          for (var h = 0; h < e[i].data.length; h++) {\n            s.push(e[i].data[h].y[0]), a.push(e[i].data[h].y[1]), n.push(e[i].data[h].y[2]), r.push(e[i].data[h].y[3]);\n          }\n        }\n\n        return {\n          o: s,\n          h: a,\n          l: n,\n          c: r\n        };\n      }\n    }, {\n      key: \"parseDataAxisCharts\",\n      value: function value(t) {\n        for (var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, i = this.w.config, s = this.w.globals, a = new m(e), n = 0; n < t.length; n++) {\n          if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t[n].data) return void console.error(\"It is a possibility that you may have not included 'data' property in series.\");\n          if (\"rangeBar\" !== i.chart.type && \"rangeArea\" !== i.chart.type && \"rangeBar\" !== t[n].type && \"rangeArea\" !== t[n].type || (s.isRangeData = !0, this.handleRangeData(t, n)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t, n) : this.isFormatXY() && this.handleFormatXY(t, n), \"candlestick\" !== i.chart.type && \"candlestick\" !== t[n].type || this.handleCandleStickData(t, n), s.series.push(this.twoDSeries), s.labels.push(this.twoDSeriesX), s.seriesX.push(this.twoDSeriesX), this.fallbackToCategory || (s.isXNumeric = !0);else {\n            if (\"datetime\" === i.xaxis.type) {\n              s.isXNumeric = !0;\n\n              for (var r = i.labels.length > 0 ? i.labels.slice() : i.xaxis.categories.slice(), o = 0; o < r.length; o++) {\n                if (\"string\" == typeof r[o]) {\n                  if (!a.isValidDate(r[o])) throw new Error(\"You have provided invalid Date format. Please provide a valid JavaScript Date\");\n                  this.twoDSeriesX.push(a.parseDate(r[o]));\n                }\n              }\n\n              s.seriesX.push(this.twoDSeriesX);\n            } else if (\"numeric\" === i.xaxis.type) {\n              s.isXNumeric = !0;\n              var l = i.labels.length > 0 ? i.labels.slice() : i.xaxis.categories.slice();\n              l.length > 0 && (this.twoDSeriesX = l, s.seriesX.push(this.twoDSeriesX));\n            }\n\n            s.labels.push(this.twoDSeriesX);\n            var h = t[n].data.map(function (t) {\n              return d.parseNumber(t);\n            });\n            s.series.push(h);\n          }\n          s.seriesZ.push(this.threeDSeries), void 0 !== t[n].name ? s.seriesNames.push(t[n].name) : s.seriesNames.push(\"series-\" + parseInt(n + 1));\n        }\n\n        return this.w;\n      }\n    }, {\n      key: \"parseDataNonAxisCharts\",\n      value: function value(t) {\n        var e = this.w.globals,\n            i = this.w.config;\n        e.series = t.slice(), e.seriesNames = i.labels.slice();\n\n        for (var s = 0; s < e.series.length; s++) {\n          void 0 === e.seriesNames[s] && e.seriesNames.push(\"series-\" + (s + 1));\n        }\n\n        return this.w;\n      }\n    }, {\n      key: \"handleExternalLabelsData\",\n      value: function value(t) {\n        var e = this.w.config,\n            i = this.w.globals;\n        if (e.xaxis.categories.length > 0) i.labels = e.xaxis.categories;else if (e.labels.length > 0) i.labels = e.labels.slice();else if (this.fallbackToCategory) i.labels = i.labels[0];else {\n          var s = [];\n\n          if (i.axisCharts) {\n            for (var a = 0; a < i.series[i.maxValsInArrayIndex].length; a++) {\n              s.push(a + 1);\n            }\n\n            for (var n = 0; n < t.length; n++) {\n              i.seriesX.push(s);\n            }\n\n            i.isXNumeric = !0;\n          }\n\n          if (0 === s.length) {\n            s = [0, 10];\n\n            for (var r = 0; r < t.length; r++) {\n              i.seriesX.push(s);\n            }\n          }\n\n          i.labels = s, i.noLabelsProvided = !0;\n        }\n      }\n    }, {\n      key: \"parseData\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.config,\n            s = e.globals;\n\n        if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.resetGlobals(), this.isMultipleY(), s.axisCharts ? this.parseDataAxisCharts(t) : this.parseDataNonAxisCharts(t), this.coreUtils.getLargestSeries(), \"bar\" === i.chart.type && i.chart.stacked) {\n          var a = new G(this.ctx);\n          s.series = a.setNullSeriesToZeroValues(s.series);\n        }\n\n        this.coreUtils.getSeriesTotals(), s.axisCharts && this.coreUtils.getStackedSeriesTotals(), this.coreUtils.getPercentSeries(), s.dataFormatXNumeric || s.isXNumeric && (\"numeric\" !== i.xaxis.type || 0 !== i.labels.length || 0 !== i.xaxis.categories.length) || this.handleExternalLabelsData(t);\n      }\n    }, {\n      key: \"xySettings\",\n      value: function value() {\n        var t = null,\n            e = this.w;\n\n        if (e.globals.axisCharts) {\n          if (\"back\" === e.config.xaxis.crosshairs.position) new T(this.ctx).drawXCrosshairs();\n          if (\"back\" === e.config.yaxis[0].crosshairs.position) new T(this.ctx).drawYCrosshairs();\n\n          if (t = this.coreUtils.getCalculatedRatios(), \"datetime\" === e.config.xaxis.type && void 0 === e.config.xaxis.labels.formatter) {\n            var i,\n                s = new j(this.ctx);\n            isFinite(e.globals.minX) && isFinite(e.globals.maxX) && !e.globals.isBarHorizontal ? (i = s.calculateTimeScaleTicks(e.globals.minX, e.globals.maxX), s.recalcDimensionsBasedOnFormat(i, !1)) : e.globals.isBarHorizontal && (i = s.calculateTimeScaleTicks(e.globals.minY, e.globals.maxY), s.recalcDimensionsBasedOnFormat(i, !0));\n          }\n        }\n\n        return t;\n      }\n    }, {\n      key: \"drawAxis\",\n      value: function value(t, e) {\n        var i,\n            s,\n            a = this.w.globals,\n            n = this.w.config,\n            r = new H(this.ctx),\n            o = new W(this.ctx);\n        a.axisCharts && \"radar\" !== t && (a.isBarHorizontal ? (s = o.drawYaxisInversed(0), i = r.drawXaxisInversed(0), a.dom.elGraphical.add(i), a.dom.elGraphical.add(s)) : (i = r.drawXaxis(), a.dom.elGraphical.add(i), n.yaxis.map(function (t, e) {\n          -1 === a.ignoreYAxisIndexes.indexOf(e) && (s = o.drawYaxis(e), a.dom.Paper.add(s));\n        })));\n        n.yaxis.map(function (t, e) {\n          -1 === a.ignoreYAxisIndexes.indexOf(e) && o.yAxisTitleRotate(e, t.opposite);\n        });\n      }\n    }, {\n      key: \"setupBrushHandler\",\n      value: function value() {\n        var t = this,\n            e = this.w;\n        e.config.chart.brush.enabled && \"function\" != typeof e.config.chart.events.selection && (e.config.chart.brush.targets || [e.config.chart.brush.target]).forEach(function (i) {\n          var s = ApexCharts.getChartByID(i);\n          s.w.globals.brushSource = t.ctx;\n\n          var a = function a() {\n            t.ctx._updateOptions({\n              chart: {\n                selection: {\n                  xaxis: {\n                    min: s.w.globals.minX,\n                    max: s.w.globals.maxX\n                  }\n                }\n              }\n            }, !1, !1);\n          };\n\n          \"function\" != typeof s.w.config.chart.events.zoomed && (s.w.config.chart.events.zoomed = function () {\n            a();\n          }), \"function\" != typeof s.w.config.chart.events.scrolled && (s.w.config.chart.events.scrolled = function () {\n            a();\n          }), e.config.chart.events.selection = function (t, i) {\n            var a = d.clone(e.config.yaxis);\n            e.config.chart.brush.autoScaleYaxis && (a = new B(s).autoScaleY(s, i));\n\n            s._updateOptions({\n              xaxis: {\n                min: i.xaxis.min,\n                max: i.xaxis.max\n              },\n              yaxis: a\n            }, !1, !1, !1);\n          };\n        });\n      }\n    }]), t;\n  }();\n\n  var q = setTimeout;\n\n  function Z() {}\n\n  function $(t) {\n    if (!(this instanceof $)) throw new TypeError(\"Promises must be constructed via new\");\n    if (\"function\" != typeof t) throw new TypeError(\"not a function\");\n    this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], it(t, this);\n  }\n\n  function J(t, e) {\n    for (; 3 === t._state;) {\n      t = t._value;\n    }\n\n    0 !== t._state ? (t._handled = !0, $._immediateFn(function () {\n      var i = 1 === t._state ? e.onFulfilled : e.onRejected;\n\n      if (null !== i) {\n        var s;\n\n        try {\n          s = i(t._value);\n        } catch (t) {\n          return void K(e.promise, t);\n        }\n\n        Q(e.promise, s);\n      } else (1 === t._state ? Q : K)(e.promise, t._value);\n    })) : t._deferreds.push(e);\n  }\n\n  function Q(t, e) {\n    try {\n      if (e === t) throw new TypeError(\"A promise cannot be resolved with itself.\");\n\n      if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) {\n        var i = e.then;\n        if (e instanceof $) return t._state = 3, t._value = e, void tt(t);\n        if (\"function\" == typeof i) return void it((s = i, a = e, function () {\n          s.apply(a, arguments);\n        }), t);\n      }\n\n      t._state = 1, t._value = e, tt(t);\n    } catch (e) {\n      K(t, e);\n    }\n\n    var s, a;\n  }\n\n  function K(t, e) {\n    t._state = 2, t._value = e, tt(t);\n  }\n\n  function tt(t) {\n    2 === t._state && 0 === t._deferreds.length && $._immediateFn(function () {\n      t._handled || $._unhandledRejectionFn(t._value);\n    });\n\n    for (var e = 0, i = t._deferreds.length; e < i; e++) {\n      J(t, t._deferreds[e]);\n    }\n\n    t._deferreds = null;\n  }\n\n  function et(t, e, i) {\n    this.onFulfilled = \"function\" == typeof t ? t : null, this.onRejected = \"function\" == typeof e ? e : null, this.promise = i;\n  }\n\n  function it(t, e) {\n    var i = !1;\n\n    try {\n      t(function (t) {\n        i || (i = !0, Q(e, t));\n      }, function (t) {\n        i || (i = !0, K(e, t));\n      });\n    } catch (t) {\n      if (i) return;\n      i = !0, K(e, t);\n    }\n  }\n\n  $.prototype[\"catch\"] = function (t) {\n    return this.then(null, t);\n  }, $.prototype.then = function (t, e) {\n    var i = new this.constructor(Z);\n    return J(this, new et(t, e, i)), i;\n  }, $.prototype[\"finally\"] = function (t) {\n    var e = this.constructor;\n    return this.then(function (i) {\n      return e.resolve(t()).then(function () {\n        return i;\n      });\n    }, function (i) {\n      return e.resolve(t()).then(function () {\n        return e.reject(i);\n      });\n    });\n  }, $.all = function (t) {\n    return new $(function (e, i) {\n      if (!t || void 0 === t.length) throw new TypeError(\"Promise.all accepts an array\");\n      var s = Array.prototype.slice.call(t);\n      if (0 === s.length) return e([]);\n      var a = s.length;\n\n      function n(t, r) {\n        try {\n          if (r && (\"object\" == _typeof(r) || \"function\" == typeof r)) {\n            var o = r.then;\n            if (\"function\" == typeof o) return void o.call(r, function (e) {\n              n(t, e);\n            }, i);\n          }\n\n          s[t] = r, 0 == --a && e(s);\n        } catch (t) {\n          i(t);\n        }\n      }\n\n      for (var r = 0; r < s.length; r++) {\n        n(r, s[r]);\n      }\n    });\n  }, $.resolve = function (t) {\n    return t && \"object\" == _typeof(t) && t.constructor === $ ? t : new $(function (e) {\n      e(t);\n    });\n  }, $.reject = function (t) {\n    return new $(function (e, i) {\n      i(t);\n    });\n  }, $.race = function (t) {\n    return new $(function (e, i) {\n      for (var s = 0, a = t.length; s < a; s++) {\n        t[s].then(e, i);\n      }\n    });\n  }, $._immediateFn = \"function\" == typeof setImmediate && function (t) {\n    setImmediate(t);\n  } || function (t) {\n    q(t, 0);\n  }, $._unhandledRejectionFn = function (t) {\n    \"undefined\" != typeof console && console && console.warn(\"Possible Unhandled Promise Rejection:\", t);\n  };\n\n  var st,\n      _at,\n      nt = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"getSvgString\",\n      value: function value() {\n        return this.w.globals.dom.Paper.svg();\n      }\n    }, {\n      key: \"cleanup\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals.dom.baseEl.querySelector(\".apexcharts-xcrosshairs\"),\n            i = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs\");\n        e && e.setAttribute(\"x\", -500), i && (i.setAttribute(\"y1\", -100), i.setAttribute(\"y2\", -100));\n      }\n    }, {\n      key: \"svgUrl\",\n      value: function value() {\n        this.cleanup();\n        var t = this.getSvgString(),\n            e = new Blob([t], {\n          type: \"image/svg+xml;charset=utf-8\"\n        });\n        return URL.createObjectURL(e);\n      }\n    }, {\n      key: \"dataURI\",\n      value: function value() {\n        var t = this;\n        return new $(function (e) {\n          var i = t.w;\n          t.cleanup();\n          var s = document.createElement(\"canvas\");\n          s.width = i.globals.svgWidth, s.height = i.globals.svgHeight;\n          var a = \"transparent\" === i.config.chart.background ? \"#fff\" : i.config.chart.background,\n              n = s.getContext(\"2d\");\n          n.fillStyle = a, n.fillRect(0, 0, s.width, s.height);\n          var r = window.URL || window.webkitURL || window,\n              o = new Image();\n          o.crossOrigin = \"anonymous\";\n          var l = t.getSvgString(),\n              h = \"data:image/svg+xml,\" + encodeURIComponent(l);\n          o.onload = function () {\n            n.drawImage(o, 0, 0), r.revokeObjectURL(h);\n            var t = s.toDataURL(\"image/png\");\n            e(t);\n          }, o.src = h;\n        });\n      }\n    }, {\n      key: \"exportToSVG\",\n      value: function value() {\n        this.triggerDownload(this.svgUrl(), \".svg\");\n      }\n    }, {\n      key: \"exportToPng\",\n      value: function value() {\n        var t = this;\n        this.dataURI().then(function (e) {\n          t.triggerDownload(e, \".png\");\n        });\n      }\n    }, {\n      key: \"triggerDownload\",\n      value: function value(t, e) {\n        var i = document.createElement(\"a\");\n        i.href = t, i.download = this.w.globals.chartID + e, document.body.appendChild(i), i.click(), document.body.removeChild(i);\n      }\n    }]), t;\n  }(),\n      rt = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n      var s = this.w;\n      this.anim = new g(this.ctx), this.xaxisLabels = s.globals.labels.slice(), this.animX = s.config.grid.xaxis.lines.animate && s.config.chart.animations.enabled, this.animY = s.config.grid.yaxis.lines.animate && s.config.chart.animations.enabled, s.globals.timelineLabels.length > 0 && (this.xaxisLabels = s.globals.timelineLabels.slice());\n    }\n\n    return s(t, [{\n      key: \"drawGridArea\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n            e = this.w,\n            i = new f(this.ctx);\n        null === t && (t = i.group({\n          \"class\": \"apexcharts-grid\"\n        }));\n        var s = i.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, \"transparent\"),\n            a = i.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, \"transparent\");\n        return t.add(a), t.add(s), t;\n      }\n    }, {\n      key: \"drawGrid\",\n      value: function value() {\n        var t = this.w,\n            e = new H(this.ctx),\n            i = new W(this.ctx),\n            s = this.w.globals,\n            a = null;\n\n        if (s.axisCharts) {\n          if (t.config.grid.show) a = this.renderGrid(), s.dom.elGraphical.add(a.el), this.drawGridArea(a.el);else {\n            var n = this.drawGridArea();\n            s.dom.elGraphical.add(n);\n          }\n          null !== a && e.xAxisLabelCorrections(a.xAxisTickWidth), i.setYAxisTextAlignments();\n        }\n      }\n    }, {\n      key: \"createGridMask\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals,\n            i = new f(this.ctx),\n            s = Array.isArray(t.config.stroke.width) ? 0 : t.config.stroke.width;\n\n        if (Array.isArray(t.config.stroke.width)) {\n          var a = 0;\n          t.config.stroke.width.forEach(function (t) {\n            a = Math.max(a, t);\n          }), s = a;\n        }\n\n        e.dom.elGridRectMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elGridRectMask.setAttribute(\"id\", \"gridRectMask\".concat(e.cuid)), e.dom.elGridRectMarkerMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elGridRectMarkerMask.setAttribute(\"id\", \"gridRectMarkerMask\".concat(e.cuid)), e.dom.elGridRect = i.drawRect(-s / 2, -s / 2, e.gridWidth + s, e.gridHeight + s, 0, \"#fff\"), new y(this).getLargestMarkerSize();\n        var n = t.globals.markers.largestSize + 1;\n        e.dom.elGridRectMarker = i.drawRect(-n, -n, e.gridWidth + 2 * n, e.gridHeight + 2 * n, 0, \"#fff\"), e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node), e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);\n        var r = e.dom.baseEl.querySelector(\"defs\");\n        r.appendChild(e.dom.elGridRectMask), r.appendChild(e.dom.elGridRectMarkerMask);\n      }\n    }, {\n      key: \"renderGrid\",\n      value: function value() {\n        var t = this.w,\n            e = new f(this.ctx),\n            i = t.config.grid.strokeDashArray,\n            s = e.group({\n          \"class\": \"apexcharts-grid\"\n        }),\n            a = e.group({\n          \"class\": \"apexcharts-gridlines-horizontal\"\n        }),\n            n = e.group({\n          \"class\": \"apexcharts-gridlines-vertical\"\n        });\n        s.add(a), s.add(n);\n\n        for (var r, o = 8, l = 0; l < t.globals.series.length && (void 0 !== t.globals.yAxisScale[l] && (o = t.globals.yAxisScale[l].result.length - 1), !(o > 2)); l++) {\n          ;\n        }\n\n        if (t.globals.isBarHorizontal) {\n          if (r = o, t.config.grid.xaxis.lines.show || t.config.xaxis.axisTicks.show) for (var h, c = t.globals.padHorizontal, d = t.globals.gridHeight, u = 0; u < r + 1 && (h = c = c + t.globals.gridWidth / r + .3, u !== r - 1); u++) {\n            if (t.config.grid.xaxis.lines.show) {\n              var g = e.drawLine(c, 0, h, d, t.config.grid.borderColor, i);\n              g.node.classList.add(\"apexcharts-gridline\"), n.add(g), this.animX && this.animateLine(g, {\n                x1: 0,\n                x2: 0\n              }, {\n                x1: c,\n                x2: h\n              });\n            }\n\n            new H(this.ctx).drawXaxisTicks(c, s);\n          }\n          if (t.config.grid.yaxis.lines.show) for (var p = 0, x = 0, b = t.globals.gridWidth, m = 0; m < t.globals.dataPoints + 1; m++) {\n            var v = e.drawLine(0, p, b, x, t.config.grid.borderColor, i);\n            a.add(v), v.node.classList.add(\"apexcharts-gridline\"), this.animY && this.animateLine(v, {\n              y1: p + 20,\n              y2: x + 20\n            }, {\n              y1: p,\n              y2: x\n            }), x = p += t.globals.gridHeight / t.globals.dataPoints;\n          }\n        } else {\n          if (r = this.xaxisLabels.length, t.config.grid.xaxis.lines.show || t.config.xaxis.axisTicks.show) {\n            var y,\n                w = t.globals.padHorizontal,\n                k = t.globals.gridHeight;\n            if (t.globals.timelineLabels.length > 0) for (var A = 0; A < r; A++) {\n              if (w = this.xaxisLabels[A].position, y = this.xaxisLabels[A].position, t.config.grid.xaxis.lines.show && w > 0 && w < t.globals.gridWidth) {\n                var S = e.drawLine(w, 0, y, k, t.config.grid.borderColor, i);\n                S.node.classList.add(\"apexcharts-gridline\"), n.add(S), this.animX && this.animateLine(S, {\n                  x1: 0,\n                  x2: 0\n                }, {\n                  x1: w,\n                  x2: y\n                });\n              }\n\n              var C = new H(this.ctx);\n              A === r - 1 && t.globals.skipLastTimelinelabel || C.drawXaxisTicks(w, s);\n            } else for (var L = r, z = 0; z < L; z++) {\n              var P = L;\n              if (t.globals.isXNumeric && \"bar\" !== t.config.chart.type && (P -= 1), y = w += t.globals.gridWidth / P, z === P - 1) break;\n\n              if (t.config.grid.xaxis.lines.show) {\n                var M = e.drawLine(w, 0, y, k, t.config.grid.borderColor, i);\n                M.node.classList.add(\"apexcharts-gridline\"), n.add(M), this.animX && this.animateLine(M, {\n                  x1: 0,\n                  x2: 0\n                }, {\n                  x1: w,\n                  x2: y\n                });\n              }\n\n              new H(this.ctx).drawXaxisTicks(w, s);\n            }\n          }\n\n          if (t.config.grid.yaxis.lines.show) for (var E = 0, T = 0, X = t.globals.gridWidth, I = 0; I < o + 1; I++) {\n            var Y = e.drawLine(0, E, X, T, t.config.grid.borderColor, i);\n            a.add(Y), Y.node.classList.add(\"apexcharts-gridline\"), this.animY && this.animateLine(Y, {\n              y1: E + 20,\n              y2: T + 20\n            }, {\n              y1: E,\n              y2: T\n            }), T = E += t.globals.gridHeight / o;\n          }\n        }\n\n        return this.drawGridBands(s, r, o), {\n          el: s,\n          xAxisTickWidth: t.globals.gridWidth / r\n        };\n      }\n    }, {\n      key: \"drawGridBands\",\n      value: function value(t, e, i) {\n        var s = this.w,\n            a = new f(this.ctx);\n        if (void 0 !== s.config.grid.row.colors && s.config.grid.row.colors.length > 0) for (var n = 0, r = s.globals.gridHeight / i, o = s.globals.gridWidth, l = 0, h = 0; l < i; l++, h++) {\n          h >= s.config.grid.row.colors.length && (h = 0);\n          var c = s.config.grid.row.colors[h],\n              d = a.drawRect(0, n, o, r, 0, c, s.config.grid.row.opacity);\n          t.add(d), d.node.classList.add(\"apexcharts-gridRow\"), n += s.globals.gridHeight / i;\n        }\n        if (void 0 !== s.config.grid.column.colors && s.config.grid.column.colors.length > 0) for (var u = s.globals.padHorizontal, g = s.globals.padHorizontal + s.globals.gridWidth / e, p = s.globals.gridHeight, x = 0, b = 0; x < e; x++, b++) {\n          b >= s.config.grid.column.colors.length && (b = 0);\n          var m = s.config.grid.column.colors[b],\n              v = a.drawRect(u, 0, g, p, 0, m, s.config.grid.column.opacity);\n          v.node.classList.add(\"apexcharts-gridColumn\"), t.add(v), u += s.globals.gridWidth / e;\n        }\n      }\n    }, {\n      key: \"animateLine\",\n      value: function value(t, e, i) {\n        var s = this.w,\n            a = s.config.chart.animations;\n\n        if (a && !s.globals.resized && !s.globals.dataChanged) {\n          var n = a.speed;\n          this.anim.animateLine(t, e, i, n);\n        }\n      }\n    }]), t;\n  }(),\n      ot = function () {\n    function t(i, s) {\n      e(this, t), this.ctx = i, this.w = i.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this);\n    }\n\n    return s(t, [{\n      key: \"init\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals,\n            i = t.config;\n\n        if ((i.legend.showForSingleSeries && 1 === e.series.length || e.series.length > 1 || !e.axisCharts) && i.legend.show) {\n          for (; e.dom.elLegendWrap.firstChild;) {\n            e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);\n          }\n\n          this.drawLegends(), d.isIE11() ? document.getElementsByTagName(\"head\")[0].appendChild(this.getLegendStyles()) : this.appendToForeignObject(), \"bottom\" === i.legend.position || \"top\" === i.legend.position ? this.legendAlignHorizontal() : \"right\" !== i.legend.position && \"left\" !== i.legend.position || this.legendAlignVertical();\n        }\n      }\n    }, {\n      key: \"appendToForeignObject\",\n      value: function value() {\n        var t = this.w.globals,\n            e = document.createElementNS(t.SVGNS, \"foreignObject\");\n        e.setAttribute(\"x\", 0), e.setAttribute(\"y\", 0), e.setAttribute(\"width\", t.svgWidth), e.setAttribute(\"height\", t.svgHeight), t.dom.elLegendWrap.setAttribute(\"xmlns\", \"http://www.w3.org/1999/xhtml\"), e.appendChild(t.dom.elLegendWrap), e.appendChild(this.getLegendStyles()), t.dom.Paper.node.insertBefore(e, t.dom.elGraphical.node);\n      }\n    }, {\n      key: \"drawLegends\",\n      value: function value() {\n        var t = this.w,\n            e = t.config.legend.fontFamily,\n            i = t.globals.seriesNames,\n            s = t.globals.colors.slice();\n\n        if (\"heatmap\" === t.config.chart.type) {\n          var a = t.config.plotOptions.heatmap.colorScale.ranges;\n          i = a.map(function (t) {\n            return t.name ? t.name : t.from + \" - \" + t.to;\n          }), s = a.map(function (t) {\n            return t.color;\n          });\n        }\n\n        for (var n = t.globals.legendFormatter, r = 0; r <= i.length - 1; r++) {\n          var o = n(i[r], {\n            seriesIndex: r,\n            w: t\n          }),\n              l = !1,\n              h = !1;\n          if (t.globals.collapsedSeries.length > 0) for (var c = 0; c < t.globals.collapsedSeries.length; c++) {\n            t.globals.collapsedSeries[c].index === r && (l = !0);\n          }\n          if (t.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var d = 0; d < t.globals.ancillaryCollapsedSeriesIndices.length; d++) {\n            t.globals.ancillaryCollapsedSeriesIndices[d] === r && (h = !0);\n          }\n          var u = document.createElement(\"span\");\n          u.classList.add(\"apexcharts-legend-marker\");\n          var g = t.config.legend.markers.offsetX,\n              p = t.config.legend.markers.offsetY,\n              x = t.config.legend.markers.height,\n              b = t.config.legend.markers.width,\n              m = t.config.legend.markers.strokeWidth,\n              v = t.config.legend.markers.strokeColor,\n              w = t.config.legend.markers.radius,\n              k = u.style;\n          k.background = s[r], k.color = s[r], k.height = Array.isArray(x) ? parseFloat(x[r]) + \"px\" : parseFloat(x) + \"px\", k.width = Array.isArray(b) ? parseFloat(b[r]) + \"px\" : parseFloat(b) + \"px\", k.left = Array.isArray(g) ? g[r] : g, k.top = Array.isArray(p) ? p[r] : p, k.borderWidth = Array.isArray(m) ? m[r] : m, k.borderColor = Array.isArray(v) ? v[r] : v, k.borderRadius = Array.isArray(w) ? parseFloat(w[r]) + \"px\" : parseFloat(w) + \"px\", t.config.legend.markers.customHTML && (Array.isArray(t.config.legend.markers.customHTML) ? u.innerHTML = t.config.legend.markers.customHTML[r]() : u.innerHTML = t.config.legend.markers.customHTML()), f.setAttrs(u, {\n            rel: r + 1,\n            \"data:collapsed\": l || h\n          }), (l || h) && u.classList.add(\"inactive-legend\");\n          var A = document.createElement(\"div\"),\n              S = document.createElement(\"span\");\n          S.classList.add(\"apexcharts-legend-text\"), S.innerHTML = o;\n          var C = t.config.legend.labels.useSeriesColors ? t.globals.colors[r] : t.config.legend.labels.colors;\n          C || (C = t.config.chart.foreColor), S.style.color = C, S.style.fontSize = parseFloat(t.config.legend.fontSize) + \"px\", S.style.fontFamily = e || t.config.chart.fontFamily, f.setAttrs(S, {\n            rel: r + 1,\n            \"data:collapsed\": l || h\n          }), A.appendChild(u), A.appendChild(S);\n          var L = new y(this.ctx);\n          if (!t.config.legend.showForZeroSeries) 0 === L.getSeriesTotalByIndex(r) && L.seriesHaveSameValues(r) && !L.isSeriesNull(r) && -1 === t.globals.collapsedSeriesIndices.indexOf(r) && -1 === t.globals.ancillaryCollapsedSeriesIndices.indexOf(r) && A.classList.add(\"apexcharts-hidden-zero-series\");\n          t.config.legend.showForNullSeries || L.isSeriesNull(r) && -1 === t.globals.collapsedSeriesIndices.indexOf(r) && -1 === t.globals.ancillaryCollapsedSeriesIndices.indexOf(r) && A.classList.add(\"apexcharts-hidden-null-series\"), t.globals.dom.elLegendWrap.appendChild(A), t.globals.dom.elLegendWrap.classList.add(t.config.legend.horizontalAlign), t.globals.dom.elLegendWrap.classList.add(\"position-\" + t.config.legend.position), A.classList.add(\"apexcharts-legend-series\"), A.style.margin = \"\".concat(t.config.legend.itemMargin.horizontal, \"px \").concat(t.config.legend.itemMargin.vertical, \"px\"), t.globals.dom.elLegendWrap.style.width = t.config.legend.width ? t.config.legend.width + \"px\" : \"\", t.globals.dom.elLegendWrap.style.height = t.config.legend.height ? t.config.legend.height + \"px\" : \"\", f.setAttrs(A, {\n            rel: r + 1,\n            \"data:collapsed\": l || h\n          }), (l || h) && A.classList.add(\"inactive-legend\"), t.config.legend.onItemClick.toggleDataSeries || A.classList.add(\"no-click\");\n        }\n\n        \"heatmap\" !== t.config.chart.type && t.config.legend.onItemClick.toggleDataSeries && t.globals.dom.elWrap.addEventListener(\"click\", this.onLegendClick, !0), t.config.legend.onItemHover.highlightDataSeries && (t.globals.dom.elWrap.addEventListener(\"mousemove\", this.onLegendHovered, !0), t.globals.dom.elWrap.addEventListener(\"mouseout\", this.onLegendHovered, !0));\n      }\n    }, {\n      key: \"getLegendBBox\",\n      value: function value() {\n        var t = this.w.globals.dom.baseEl.querySelector(\".apexcharts-legend\").getBoundingClientRect(),\n            e = t.width;\n        return {\n          clwh: t.height,\n          clww: e\n        };\n      }\n    }, {\n      key: \"setLegendWrapXY\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = i.globals.dom.baseEl.querySelector(\".apexcharts-legend\"),\n            a = s.getBoundingClientRect(),\n            n = 0,\n            r = 0;\n        if (\"bottom\" === i.config.legend.position) r += i.globals.svgHeight - a.height / 2;else if (\"top\" === i.config.legend.position) {\n          var o = new _(this.ctx),\n              l = o.getTitleSubtitleCoords(\"title\").height,\n              h = o.getTitleSubtitleCoords(\"subtitle\").height;\n          r = r + (l > 0 ? l - 10 : 0) + (h > 0 ? h - 10 : 0);\n        }\n        s.style.position = \"absolute\", n = n + t + i.config.legend.offsetX, r = r + e + i.config.legend.offsetY, s.style.left = n + \"px\", s.style.top = r + \"px\", \"bottom\" === i.config.legend.position ? (s.style.top = \"auto\", s.style.bottom = 10 + i.config.legend.offsetY + \"px\") : \"right\" === i.config.legend.position && (s.style.left = \"auto\", s.style.right = 25 + i.config.legend.offsetX + \"px\"), s.style.width && (s.style.width = parseInt(i.config.legend.width) + \"px\"), s.style.height && (s.style.height = parseInt(i.config.legend.height) + \"px\");\n      }\n    }, {\n      key: \"legendAlignHorizontal\",\n      value: function value() {\n        var t = this.w;\n        t.globals.dom.baseEl.querySelector(\".apexcharts-legend\").style.right = 0;\n        var e = this.getLegendBBox(),\n            i = new _(this.ctx),\n            s = i.getTitleSubtitleCoords(\"title\"),\n            a = i.getTitleSubtitleCoords(\"subtitle\"),\n            n = 0;\n        \"bottom\" === t.config.legend.position ? n = -e.clwh / 1.8 : \"top\" === t.config.legend.position && (n = s.height + a.height + t.config.title.margin + t.config.subtitle.margin - 15), this.setLegendWrapXY(20, n);\n      }\n    }, {\n      key: \"legendAlignVertical\",\n      value: function value() {\n        var t = this.w,\n            e = this.getLegendBBox(),\n            i = 0;\n        \"left\" === t.config.legend.position && (i = 20), \"right\" === t.config.legend.position && (i = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(i, 20);\n      }\n    }, {\n      key: \"onLegendHovered\",\n      value: function value(t) {\n        var e = this.w,\n            i = t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\");\n        if (\"heatmap\" !== e.config.chart.type) !t.target.classList.contains(\"inactive-legend\") && i && new G(this.ctx).toggleSeriesOnHover(t, t.target);else if (i) {\n          var s = parseInt(t.target.getAttribute(\"rel\")) - 1;\n          this.ctx.fireEvent(\"legendHover\", [this.ctx, s, this.w]), new G(this.ctx).highlightRangeInSeries(t, t.target);\n        }\n      }\n    }, {\n      key: \"onLegendClick\",\n      value: function value(t) {\n        if (t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\")) {\n          var e = parseInt(t.target.getAttribute(\"rel\")) - 1,\n              i = \"true\" === t.target.getAttribute(\"data:collapsed\"),\n              s = this.w.config.chart.events.legendClick;\n          \"function\" == typeof s && s(this.ctx, e, this.w), this.ctx.fireEvent(\"legendClick\", [this.ctx, e, this.w]);\n          var a = this.w.config.legend.markers.onClick;\n          \"function\" == typeof a && t.target.classList.contains(\"apexcharts-legend-marker\") && (a(this.ctx, e, this.w), this.ctx.fireEvent(\"legendMarkerClick\", [this.ctx, e, this.w])), this.toggleDataSeries(e, i);\n        }\n      }\n    }, {\n      key: \"getLegendStyles\",\n      value: function value() {\n        var t = document.createElement(\"style\");\n        t.setAttribute(\"type\", \"text/css\");\n        var e = document.createTextNode(\"\\n    \\n      .apexcharts-legend {\\n        display: flex;\\n        overflow: auto;\\n        padding: 0 10px;\\n      }\\n\\n      .apexcharts-legend.position-bottom, .apexcharts-legend.position-top {\\n        flex-wrap: wrap\\n      }\\n      .apexcharts-legend.position-right, .apexcharts-legend.position-left {\\n        flex-direction: column;\\n        bottom: 0;\\n      }\\n\\n      .apexcharts-legend.position-bottom.left, .apexcharts-legend.position-top.left, .apexcharts-legend.position-right, .apexcharts-legend.position-left {\\n        justify-content: flex-start;\\n      }\\n\\n      .apexcharts-legend.position-bottom.center, .apexcharts-legend.position-top.center {\\n        justify-content: center;  \\n      }\\n\\n      .apexcharts-legend.position-bottom.right, .apexcharts-legend.position-top.right {\\n        justify-content: flex-end;\\n      }\\n\\n      .apexcharts-legend-series {\\n        cursor: pointer;\\n        line-height: normal;\\n      }\\n\\n      .apexcharts-legend.position-bottom .apexcharts-legend-series, .apexcharts-legend.position-top .apexcharts-legend-series{\\n        display: flex;\\n        align-items: center;\\n      }\\n\\n      .apexcharts-legend-text {\\n        position: relative;\\n        font-size: 14px;\\n      }\\n\\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\\n        pointer-events: none;\\n      }\\n\\n      .apexcharts-legend-marker {\\n        position: relative;\\n        display: inline-block;\\n        cursor: pointer;\\n        margin-right: 3px;\\n      }\\n      \\n      .apexcharts-legend.right .apexcharts-legend-series, .apexcharts-legend.left .apexcharts-legend-series{\\n        display: inline-block;\\n      }\\n\\n      .apexcharts-legend-series.no-click {\\n        cursor: auto;\\n      }\\n\\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\\n        display: none !important;\\n      }\\n\\n      .inactive-legend {\\n        opacity: 0.45;\\n      }\");\n        return t.appendChild(e), t;\n      }\n    }, {\n      key: \"resetToggleDataSeries\",\n      value: function value() {\n        var t = this.w,\n            e = null,\n            i = [];\n\n        if (t.globals.axisCharts ? (e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:realIndex]\"), (e = d.listToArray(e)).forEach(function (t) {\n          i.push(parseInt(t.getAttribute(\"data:realIndex\")));\n        })) : (e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[rel]\"), (e = d.listToArray(e)).forEach(function (t) {\n          i.push(parseInt(t.getAttribute(\"rel\")) - 1);\n        })), i.sort(), t.globals.collapsedSeries.length > 0) {\n          for (var s = t.globals.risingSeries.slice(), a = t.config.series.slice(), n = 0; n < t.globals.collapsedSeries.length; n++) {\n            var r = i.indexOf(t.globals.collapsedSeries[n].index);\n            -1 !== r && (t.globals.axisCharts ? a[r].data = t.globals.collapsedSeries.slice()[n].data.slice() : a[r] = t.globals.collapsedSeries.slice()[n].data, s.push(r));\n          }\n\n          t.globals.collapsedSeries = [], t.globals.ancillaryCollapsedSeries = [], t.globals.collapsedSeriesIndices = [], t.globals.ancillaryCollapsedSeriesIndices = [], t.globals.risingSeries = s, t.config.series = a, this.ctx._updateSeries(t.config.series, t.config.chart.animations.dynamicAnimation.enabled);\n        }\n      }\n    }, {\n      key: \"toggleDataSeries\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        if (i.globals.axisCharts || \"radialBar\" === i.config.chart.type) {\n          i.globals.resized = !0;\n          var s = null,\n              a = null;\n          if (i.globals.risingSeries = [], i.globals.axisCharts ? (s = i.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\")), a = parseInt(s.getAttribute(\"data:realIndex\"))) : (s = i.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(t + 1, \"']\")), a = parseInt(s.getAttribute(\"rel\")) - 1), e) this.riseCollapsedSeries(i.globals.collapsedSeries, i.globals.collapsedSeriesIndices, a), this.riseCollapsedSeries(i.globals.ancillaryCollapsedSeries, i.globals.ancillaryCollapsedSeriesIndices, a);else {\n            if (i.globals.axisCharts) {\n              var n = !1;\n\n              if (i.config.yaxis[a] && i.config.yaxis[a].show && i.config.yaxis[a].showAlways && (n = !0, i.globals.ancillaryCollapsedSeriesIndices.indexOf(a) < 0 && (i.globals.ancillaryCollapsedSeries.push({\n                index: a,\n                data: i.config.series[a].data.slice(),\n                type: s.parentNode.className.baseVal.split(\"-\")[1]\n              }), i.globals.ancillaryCollapsedSeriesIndices.push(a))), !n) {\n                i.globals.collapsedSeries.push({\n                  index: a,\n                  data: i.config.series[a].data.slice(),\n                  type: s.parentNode.className.baseVal.split(\"-\")[1]\n                }), i.globals.collapsedSeriesIndices.push(a);\n                var r = i.globals.risingSeries.indexOf(a);\n                i.globals.risingSeries.splice(r, 1);\n              }\n\n              i.config.series[a].data = [];\n            } else i.globals.collapsedSeries.push({\n              index: a,\n              data: i.config.series[a]\n            }), i.globals.collapsedSeriesIndices.push(a), i.config.series[a] = 0;\n\n            for (var o = s.childNodes, l = 0; l < o.length; l++) {\n              o[l].classList.contains(\"apexcharts-series-markers-wrap\") && (o[l].classList.contains(\"apexcharts-hide\") ? o[l].classList.remove(\"apexcharts-hide\") : o[l].classList.add(\"apexcharts-hide\"));\n            }\n\n            i.globals.allSeriesCollapsed = i.globals.collapsedSeries.length === i.globals.series.length, this.ctx._updateSeries(i.config.series, i.config.chart.animations.dynamicAnimation.enabled);\n          }\n        } else {\n          var h = i.globals.dom.Paper.select(\" .apexcharts-series[rel='\".concat(t + 1, \"'] path\")),\n              c = i.config.chart.type;\n\n          if (\"pie\" === c || \"donut\" === c) {\n            var d = i.config.plotOptions.pie.donut.labels,\n                u = new f(this.ctx),\n                g = new I(this.ctx);\n            u.pathMouseDown(h.members[0], null), g.printDataLabelsInner(h.members[0].node, d);\n          }\n\n          h.fire(\"click\");\n        }\n      }\n    }, {\n      key: \"riseCollapsedSeries\",\n      value: function value(t, e, i) {\n        var s = this.w;\n        if (t.length > 0) for (var a = 0; a < t.length; a++) {\n          t[a].index === i && (s.globals.axisCharts ? (s.config.series[i].data = t[a].data.slice(), t.splice(a, 1), e.splice(a, 1), s.globals.risingSeries.push(i)) : (s.config.series[i] = t[a].data, t.splice(a, 1), e.splice(a, 1), s.globals.risingSeries.push(i)), this.ctx._updateSeries(s.config.series, s.config.chart.animations.dynamicAnimation.enabled));\n        }\n      }\n    }]), t;\n  }(),\n      lt = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"checkResponsiveConfig\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            s = i.config;\n\n        if (0 !== s.responsive.length) {\n          var a = s.responsive.slice();\n          a.sort(function (t, e) {\n            return t.breakpoint > e.breakpoint ? 1 : e.breakpoint > t.breakpoint ? -1 : 0;\n          }).reverse();\n\n          var n = new w({}),\n              r = function r() {\n            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n                s = a[0].breakpoint,\n                r = window.innerWidth > 0 ? window.innerWidth : screen.width;\n\n            if (r > s) {\n              var o = y.extendArrayProps(n, i.globals.initialConfig);\n              t = d.extend(o, t), t = d.extend(i.config, t), e.overrideResponsiveOptions(t);\n            } else for (var l = 0; l < a.length; l++) {\n              r < a[l].breakpoint && (t = y.extendArrayProps(n, a[l].options), t = d.extend(i.config, t), e.overrideResponsiveOptions(t));\n            }\n          };\n\n          if (t) {\n            var o = y.extendArrayProps(n, t);\n            o = d.extend(i.config, o), r(o = d.extend(o, t));\n          } else r({});\n        }\n      }\n    }, {\n      key: \"overrideResponsiveOptions\",\n      value: function value(t) {\n        var e = new w(t).init();\n        this.w.config = e;\n      }\n    }]), t;\n  }(),\n      ht = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.colors = [];\n    }\n\n    return s(t, [{\n      key: \"init\",\n      value: function value() {\n        this.setDefaultColors();\n      }\n    }, {\n      key: \"setDefaultColors\",\n      value: function value() {\n        var t = this.w,\n            e = new d();\n\n        if (t.globals.dom.elWrap.classList.add(t.config.theme.mode), void 0 === t.config.colors ? t.globals.colors = this.predefined() : t.globals.colors = t.config.colors, t.config.theme.monochrome.enabled) {\n          var i = [],\n              s = t.globals.series.length;\n          t.config.plotOptions.bar.distributed && \"bar\" === t.config.chart.type && (s = t.globals.series[0].length * t.globals.series.length);\n\n          for (var a = t.config.theme.monochrome.color, n = 1 / (s / t.config.theme.monochrome.shadeIntensity), r = t.config.theme.monochrome.shadeTo, o = 0, l = 0; l < s; l++) {\n            var h = void 0;\n            \"dark\" === r ? (h = e.shadeColor(-1 * o, a), o += n) : (h = e.shadeColor(o, a), o += n), i.push(h);\n          }\n\n          t.globals.colors = i.slice();\n        }\n\n        var c = t.globals.colors.slice();\n        this.pushExtraColors(t.globals.colors), void 0 === t.config.stroke.colors ? t.globals.stroke.colors = c : t.globals.stroke.colors = t.config.stroke.colors, this.pushExtraColors(t.globals.stroke.colors), void 0 === t.config.fill.colors ? t.globals.fill.colors = c : t.globals.fill.colors = t.config.fill.colors, this.pushExtraColors(t.globals.fill.colors), void 0 === t.config.dataLabels.style.colors ? t.globals.dataLabels.style.colors = c : t.globals.dataLabels.style.colors = t.config.dataLabels.style.colors, this.pushExtraColors(t.globals.dataLabels.style.colors, 50), void 0 === t.config.plotOptions.radar.polygons.fill.colors ? t.globals.radarPolygons.fill.colors = [\"dark\" === t.config.theme.mode ? \"#202D48\" : \"#fff\"] : t.globals.radarPolygons.fill.colors = t.config.plotOptions.radar.polygons.fill.colors, this.pushExtraColors(t.globals.radarPolygons.fill.colors, 20), void 0 === t.config.markers.colors ? t.globals.markers.colors = c : t.globals.markers.colors = t.config.markers.colors, this.pushExtraColors(t.globals.markers.colors);\n      }\n    }, {\n      key: \"pushExtraColors\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n            s = this.w,\n            a = e || s.globals.series.length;\n        if (null === i && (i = \"bar\" === s.config.chart.type && s.config.plotOptions.bar.distributed || \"heatmap\" === s.config.chart.type && s.config.plotOptions.heatmap.colorScale.inverse), i && (a = s.globals.series[0].length * s.globals.series.length), t.length < a) for (var n = a - t.length, r = 0; r < n; r++) {\n          t.push(t[r]);\n        }\n      }\n    }, {\n      key: \"updateThemeOptions\",\n      value: function value(t) {\n        t.chart = t.chart || {}, t.tooltip = t.tooltip || {};\n        var e = t.theme.mode || \"light\",\n            i = t.theme.palette ? t.theme.palette : \"dark\" === e ? \"palette4\" : \"palette1\",\n            s = t.chart.foreColor ? t.chart.foreColor : \"dark\" === e ? \"#f6f7f8\" : \"#373d3f\";\n        return t.tooltip.theme = e, t.chart.foreColor = s, t.theme.palette = i, t;\n      }\n    }, {\n      key: \"predefined\",\n      value: function value() {\n        switch (this.w.config.theme.palette) {\n          case \"palette1\":\n            this.colors = [\"#008FFB\", \"#00E396\", \"#FEB019\", \"#FF4560\", \"#775DD0\"];\n            break;\n\n          case \"palette2\":\n            this.colors = [\"#3f51b5\", \"#03a9f4\", \"#4caf50\", \"#f9ce1d\", \"#FF9800\"];\n            break;\n\n          case \"palette3\":\n            this.colors = [\"#33b2df\", \"#546E7A\", \"#d4526e\", \"#13d8aa\", \"#A5978B\"];\n            break;\n\n          case \"palette4\":\n            this.colors = [\"#4ecdc4\", \"#c7f464\", \"#81D4FA\", \"#fd6a6a\", \"#546E7A\"];\n            break;\n\n          case \"palette5\":\n            this.colors = [\"#2b908f\", \"#f9a3a4\", \"#90ee7e\", \"#fa4443\", \"#69d2e7\"];\n            break;\n\n          case \"palette6\":\n            this.colors = [\"#449DD1\", \"#F86624\", \"#EA3546\", \"#662E9B\", \"#C5D86D\"];\n            break;\n\n          case \"palette7\":\n            this.colors = [\"#D7263D\", \"#1B998B\", \"#2E294E\", \"#F46036\", \"#E2C044\"];\n            break;\n\n          case \"palette8\":\n            this.colors = [\"#662E9B\", \"#F86624\", \"#F9C80E\", \"#EA3546\", \"#43BCCD\"];\n            break;\n\n          case \"palette9\":\n            this.colors = [\"#5C4742\", \"#A5978B\", \"#8D5B4C\", \"#5A2A27\", \"#C4BBAF\"];\n            break;\n\n          case \"palette10\":\n            this.colors = [\"#A300D6\", \"#7D02EB\", \"#5653FE\", \"#2983FF\", \"#00B1F2\"];\n            break;\n\n          default:\n            this.colors = [\"#008FFB\", \"#00E396\", \"#FEB019\", \"#FF4560\", \"#775DD0\"];\n        }\n\n        return this.colors;\n      }\n    }]), t;\n  }(),\n      ct = function () {\n    function t(i) {\n      e(this, t), this.w = i.w, this.ttCtx = i, this.ctx = i.ctx;\n    }\n\n    return s(t, [{\n      key: \"getNearestValues\",\n      value: function value(t) {\n        var e = t.hoverArea,\n            i = t.elGrid,\n            s = t.clientX,\n            a = t.clientY,\n            n = t.hasBars,\n            r = this.w,\n            o = r.globals.gridWidth,\n            l = o / (r.globals.dataPoints - 1),\n            h = i.getBoundingClientRect();\n        (n && r.globals.comboCharts || n) && (l = o / r.globals.dataPoints);\n        var c = s - h.left,\n            d = a - h.top;\n        c < 0 || d < 0 || c > r.globals.gridWidth || d > r.globals.gridHeight ? (e.classList.remove(\"hovering-zoom\"), e.classList.remove(\"hovering-pan\")) : r.globals.zoomEnabled ? (e.classList.remove(\"hovering-pan\"), e.classList.add(\"hovering-zoom\")) : r.globals.panEnabled && (e.classList.remove(\"hovering-zoom\"), e.classList.add(\"hovering-pan\"));\n        var u = Math.round(c / l);\n        n && (u = Math.ceil(c / l), u -= 1);\n\n        for (var g, f = null, p = null, x = [], b = 0; b < r.globals.seriesXvalues.length; b++) {\n          x.push([r.globals.seriesXvalues[b][0] - 1e-6].concat(r.globals.seriesXvalues[b]));\n        }\n\n        return x = x.map(function (t) {\n          return t.filter(function (t) {\n            return t;\n          });\n        }), g = r.globals.seriesYvalues.map(function (t) {\n          return t.filter(function (t) {\n            return t;\n          });\n        }), r.globals.isXNumeric && (f = (p = this.closestInMultiArray(c, d, x, g)).index, u = p.j, null !== f && (x = r.globals.seriesXvalues[f], u = (p = this.closestInArray(c, x)).index)), (!u || u < 1) && (u = 0), {\n          capturedSeries: f,\n          j: u,\n          hoverX: c,\n          hoverY: d\n        };\n      }\n    }, {\n      key: \"closestInMultiArray\",\n      value: function value(t, e, i, s) {\n        var a = this.w,\n            n = 0,\n            r = null,\n            o = -1;\n        a.globals.series.length > 1 ? n = this.getFirstActiveXArray(i) : r = 0;\n        var l = s[n][0],\n            h = i[n][0],\n            c = Math.abs(t - h),\n            d = Math.abs(e - l),\n            u = d + c;\n        return s.map(function (a, n) {\n          a.map(function (a, l) {\n            var h = Math.abs(e - s[n][l]),\n                g = Math.abs(t - i[n][l]),\n                f = g + h;\n            f < u && (u = f, c = g, d = h, r = n, o = l);\n          });\n        }), {\n          index: r,\n          j: o\n        };\n      }\n    }, {\n      key: \"getFirstActiveXArray\",\n      value: function value(t) {\n        for (var e = 0, i = new y(this.ctx), s = t.map(function (t, e) {\n          return t.length > 0 ? e : -1;\n        }), a = 0; a < s.length; a++) {\n          var n = i.getSeriesTotalByIndex(a);\n\n          if (-1 !== s[a] && 0 !== n && !i.seriesHaveSameValues(a)) {\n            e = s[a];\n            break;\n          }\n        }\n\n        return e;\n      }\n    }, {\n      key: \"closestInArray\",\n      value: function value(t, e) {\n        for (var i = e[0], s = null, a = Math.abs(t - i), n = 0; n < e.length; n++) {\n          var r = Math.abs(t - e[n]);\n          r < a && (a = r, i = e[n], s = n);\n        }\n\n        return {\n          index: s\n        };\n      }\n    }, {\n      key: \"isXoverlap\",\n      value: function value(t) {\n        var e = [],\n            i = this.w.globals.seriesX.filter(function (t) {\n          return void 0 !== t[0];\n        });\n        if (i.length > 0) for (var s = 0; s < i.length - 1; s++) {\n          void 0 !== i[s][t] && void 0 !== i[s + 1][t] && i[s][t] !== i[s + 1][t] && e.push(\"unEqual\");\n        }\n        return 0 === e.length;\n      }\n    }, {\n      key: \"isinitialSeriesSameLen\",\n      value: function value() {\n        for (var t = !0, e = this.w.globals.initialSeries, i = 0; i < e.length - 1; i++) {\n          if (e[i].data.length !== e[i + 1].data.length) {\n            t = !1;\n            break;\n          }\n        }\n\n        return t;\n      }\n    }, {\n      key: \"getBarsHeight\",\n      value: function value(t) {\n        return c(t).reduce(function (t, e) {\n          return t + e.getBBox().height;\n        }, 0);\n      }\n    }, {\n      key: \"toggleAllTooltipSeriesGroups\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.ttCtx;\n        0 === i.allTooltipSeriesGroups.length && (i.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-tooltip-series-group\"));\n\n        for (var s = i.allTooltipSeriesGroups, a = 0; a < s.length; a++) {\n          \"enable\" === t ? (s[a].classList.add(\"active\"), s[a].style.display = e.config.tooltip.items.display) : (s[a].classList.remove(\"active\"), s[a].style.display = \"none\");\n        }\n      }\n    }]), t;\n  }(),\n      dt = function () {\n    function t(i) {\n      e(this, t), this.w = i.w, this.ctx = i.ctx, this.ttCtx = i, this.tooltipUtil = new ct(i);\n    }\n\n    return s(t, [{\n      key: \"drawSeriesTexts\",\n      value: function value(t) {\n        var e = t.shared,\n            i = void 0 === e || e,\n            s = t.ttItems,\n            a = t.i,\n            n = void 0 === a ? 0 : a,\n            r = t.j,\n            o = void 0 === r ? null : r;\n        void 0 !== this.w.config.tooltip.custom ? this.handleCustomTooltip({\n          i: n,\n          j: o\n        }) : this.toggleActiveInactiveSeries(i);\n        var l = this.getValuesToPrint({\n          i: n,\n          j: o\n        });\n        this.printLabels({\n          i: n,\n          j: o,\n          values: l,\n          ttItems: s,\n          shared: i\n        });\n        var h = this.ttCtx.getElTooltip();\n        this.ttCtx.tooltipRect.ttWidth = h.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = h.getBoundingClientRect().height;\n      }\n    }, {\n      key: \"printLabels\",\n      value: function value(t) {\n        var e,\n            i = t.i,\n            s = t.j,\n            a = t.values,\n            n = t.ttItems,\n            r = t.shared,\n            o = this.w,\n            l = a.xVal,\n            h = a.zVal,\n            c = a.xAxisTTVal,\n            d = \"\",\n            u = o.globals.colors[i];\n        null !== s && o.config.plotOptions.bar.distributed && (u = o.globals.colors[s]);\n\n        for (var g = 0, f = o.globals.series.length - 1; g < o.globals.series.length; g++, f--) {\n          var p = this.getFormatters(i);\n\n          if (d = this.getSeriesName({\n            fn: p.yLbTitleFormatter,\n            index: i,\n            seriesIndex: i,\n            j: s\n          }), r) {\n            var x = o.config.tooltip.inverseOrder ? f : g;\n            p = this.getFormatters(x), d = this.getSeriesName({\n              fn: p.yLbTitleFormatter,\n              index: x,\n              seriesIndex: i,\n              j: s\n            }), u = o.globals.colors[x], e = p.yLbFormatter(o.globals.series[x][s], {\n              series: o.globals.series,\n              seriesIndex: x,\n              dataPointIndex: s,\n              w: o\n            }), (this.ttCtx.hasBars() && o.config.chart.stacked && 0 === o.globals.series[x][s] || void 0 === o.globals.series[x][s]) && (e = void 0);\n          } else e = p.yLbFormatter(o.globals.series[i][s], {\n            series: o.globals.series,\n            seriesIndex: i,\n            dataPointIndex: s,\n            w: o\n          });\n\n          null === s && (e = p.yLbFormatter(o.globals.series[i], o)), this.DOMHandling({\n            t: g,\n            ttItems: n,\n            values: {\n              val: e,\n              xVal: l,\n              xAxisTTVal: c,\n              zVal: h\n            },\n            seriesName: d,\n            shared: r,\n            pColor: u\n          });\n        }\n      }\n    }, {\n      key: \"getFormatters\",\n      value: function value(t) {\n        var e,\n            i = this.w,\n            s = i.globals.yLabelFormatters[t];\n        return void 0 !== i.globals.ttVal ? Array.isArray(i.globals.ttVal) ? (s = i.globals.ttVal[t] && i.globals.ttVal[t].formatter, e = i.globals.ttVal[t] && i.globals.ttVal[t].title && i.globals.ttVal[t].title.formatter) : (s = i.globals.ttVal.formatter, \"function\" == typeof i.globals.ttVal.title.formatter && (e = i.globals.ttVal.title.formatter)) : e = i.config.tooltip.y.title.formatter, \"function\" != typeof s && (s = i.globals.yLabelFormatters[0] ? i.globals.yLabelFormatters[0] : function (t) {\n          return t;\n        }), \"function\" != typeof e && (e = function e(t) {\n          return t;\n        }), {\n          yLbFormatter: s,\n          yLbTitleFormatter: e\n        };\n      }\n    }, {\n      key: \"getSeriesName\",\n      value: function value(t) {\n        var e = t.fn,\n            i = t.index,\n            s = t.seriesIndex,\n            a = t.j,\n            n = this.w;\n        return e(String(n.globals.seriesNames[i]), {\n          series: n.globals.series,\n          seriesIndex: s,\n          dataPointIndex: a,\n          w: n\n        });\n      }\n    }, {\n      key: \"DOMHandling\",\n      value: function value(t) {\n        var e = t.t,\n            i = t.ttItems,\n            s = t.values,\n            a = t.seriesName,\n            n = t.shared,\n            r = t.pColor,\n            o = this.w,\n            l = this.ttCtx,\n            h = s.val,\n            c = s.xVal,\n            d = s.xAxisTTVal,\n            u = s.zVal,\n            g = null;\n        g = i[e].children, o.config.tooltip.fillSeriesColor && (i[e].style.backgroundColor = r, g[0].style.display = \"none\"), l.showTooltipTitle && (null === l.tooltipTitle && (l.tooltipTitle = o.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-title\")), l.tooltipTitle.innerHTML = c), l.blxaxisTooltip && (l.xaxisTooltipText.innerHTML = \"\" !== d ? d : c);\n        var f = i[e].querySelector(\".apexcharts-tooltip-text-label\");\n        f && (f.innerHTML = a ? a + \": \" : \"\");\n        var p = i[e].querySelector(\".apexcharts-tooltip-text-value\");\n        (p && (p.innerHTML = h), g[0] && g[0].classList.contains(\"apexcharts-tooltip-marker\") && (g[0].style.backgroundColor = r), o.config.tooltip.marker.show || (g[0].style.display = \"none\"), null !== u) && (i[e].querySelector(\".apexcharts-tooltip-text-z-label\").innerHTML = o.config.tooltip.z.title, i[e].querySelector(\".apexcharts-tooltip-text-z-value\").innerHTML = u);\n        n && g[0] && (null == h || o.globals.collapsedSeriesIndices.indexOf(e) > -1 ? g[0].parentNode.style.display = \"none\" : g[0].parentNode.style.display = o.config.tooltip.items.display);\n      }\n    }, {\n      key: \"toggleActiveInactiveSeries\",\n      value: function value(t) {\n        var e = this.w;\n        if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups(\"enable\");else {\n          this.tooltipUtil.toggleAllTooltipSeriesGroups(\"disable\");\n          var i = e.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-series-group\");\n          i && (i.classList.add(\"active\"), i.style.display = e.config.tooltip.items.display);\n        }\n      }\n    }, {\n      key: \"getValuesToPrint\",\n      value: function value(t) {\n        var e = t.i,\n            i = t.j,\n            s = this.w,\n            a = this.ctx.series.filteredSeriesX(),\n            n = \"\",\n            r = null,\n            o = null,\n            l = {\n          series: s.globals.series,\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: s\n        },\n            h = s.globals.ttZFormatter;\n        null === i ? o = s.globals.series[e] : s.globals.isXNumeric ? (n = a[e][i], 0 === a[e].length && (n = a[this.tooltipUtil.getFirstActiveXArray(a)][i])) : n = void 0 !== s.globals.labels[i] ? s.globals.labels[i] : \"\";\n        var c = n;\n        s.globals.isXNumeric && \"datetime\" === s.config.xaxis.type ? n = new N(this.ctx).xLabelFormat(s.globals.ttKeyFormatter, c) : n = s.globals.xLabelFormatter(c, l);\n        return void 0 !== s.config.tooltip.x.formatter && (n = s.globals.ttKeyFormatter(c, l)), s.globals.seriesZ.length > 0 && s.globals.seriesZ[0].length > 0 && (r = h(s.globals.seriesZ[e][i], s)), {\n          val: o,\n          xVal: n,\n          xAxisTTVal: \"function\" == typeof s.config.xaxis.tooltip.formatter ? s.globals.xaxisTooltipFormatter(c, l) : n,\n          zVal: r\n        };\n      }\n    }, {\n      key: \"handleCustomTooltip\",\n      value: function value(t) {\n        var e = t.i,\n            i = t.j,\n            s = this.w;\n        this.ttCtx.getElTooltip().innerHTML = s.config.tooltip.custom({\n          ctx: this.ctx,\n          series: s.globals.series,\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: s\n        });\n      }\n    }]), t;\n  }(),\n      ut = function () {\n    function t(i) {\n      e(this, t), this.ttCtx = i, this.ctx = i.ctx, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"moveXCrosshairs\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n            i = this.ttCtx,\n            s = this.w,\n            a = i.getElXCrosshairs(),\n            n = t - i.xcrosshairsWidth / 2,\n            r = s.globals.labels.slice().length;\n\n        if (null !== e && (n = s.globals.gridWidth / r * e), \"tickWidth\" === s.config.xaxis.crosshairs.width || \"barWidth\" === s.config.xaxis.crosshairs.width ? n + i.xcrosshairsWidth > s.globals.gridWidth && (n = s.globals.gridWidth - i.xcrosshairsWidth) : null !== e && (n += s.globals.gridWidth / r / 2), n < 0 && (n = 0), n > s.globals.gridWidth && (n = s.globals.gridWidth), null !== a && (a.setAttribute(\"x\", n), a.setAttribute(\"x1\", n), a.setAttribute(\"x2\", n), a.setAttribute(\"y2\", s.globals.gridHeight), a.classList.add(\"active\")), i.blxaxisTooltip) {\n          var o = n;\n          \"tickWidth\" !== s.config.xaxis.crosshairs.width && \"barWidth\" !== s.config.xaxis.crosshairs.width || (o = n + i.xcrosshairsWidth / 2), this.moveXAxisTooltip(o);\n        }\n      }\n    }, {\n      key: \"moveYCrosshairs\",\n      value: function value(t) {\n        var e = this.ttCtx;\n        null !== e.ycrosshairs && (f.setAttrs(e.ycrosshairs, {\n          y1: t,\n          y2: t\n        }), f.setAttrs(e.ycrosshairsHidden, {\n          y1: t,\n          y2: t\n        }));\n      }\n    }, {\n      key: \"moveXAxisTooltip\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.ttCtx;\n\n        if (null !== i.xaxisTooltip) {\n          i.xaxisTooltip.classList.add(\"active\");\n          var s = i.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;\n\n          if (t -= i.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t)) {\n            t += e.globals.translateX;\n            var a;\n            a = new f(this.ctx).getTextRects(i.xaxisTooltipText.innerHTML), i.xaxisTooltipText.style.minWidth = a.width + \"px\", i.xaxisTooltip.style.left = t + \"px\", i.xaxisTooltip.style.top = s + \"px\";\n          }\n        }\n      }\n    }, {\n      key: \"moveYAxisTooltip\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.ttCtx;\n        null === i.yaxisTTEls && (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n        var s = parseInt(i.ycrosshairsHidden.getAttribute(\"y1\")),\n            a = e.globals.translateY + s,\n            n = i.yaxisTTEls[t].getBoundingClientRect().height,\n            r = e.globals.translateYAxisX[t] - 2;\n        e.config.yaxis[t].opposite && (r -= 26), a -= n / 2, -1 === e.globals.ignoreYAxisIndexes.indexOf(t) ? (i.yaxisTTEls[t].classList.add(\"active\"), i.yaxisTTEls[t].style.top = a + \"px\", i.yaxisTTEls[t].style.left = r + e.config.yaxis[t].tooltip.offsetX + \"px\") : i.yaxisTTEls[t].classList.remove(\"active\");\n      }\n    }, {\n      key: \"moveTooltip\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n            s = this.w,\n            a = this.ttCtx,\n            n = a.getElTooltip(),\n            r = a.tooltipRect,\n            o = null !== i ? parseInt(i) : 1,\n            l = parseInt(t) + o + 5,\n            h = parseInt(e) + o / 2;\n\n        if (l > s.globals.gridWidth / 2 && (l = l - r.ttWidth - o - 15), l > s.globals.gridWidth - r.ttWidth - 10 && (l = s.globals.gridWidth - r.ttWidth), l < -20 && (l = -20), s.config.tooltip.followCursor) {\n          var c = a.getElGrid().getBoundingClientRect();\n          h = a.e.clientY + s.globals.translateY - c.top - r.ttHeight / 2;\n        }\n\n        var d = this.positionChecks(r, l, h);\n        l = d.x, h = d.y, isNaN(l) || (l += s.globals.translateX, n.style.left = l + \"px\", n.style.top = h + \"px\");\n      }\n    }, {\n      key: \"positionChecks\",\n      value: function value(t, e, i) {\n        var s = this.w;\n        return t.ttHeight + i > s.globals.gridHeight && (i = s.globals.gridHeight - t.ttHeight + s.globals.translateY), i < 0 && (i = 0), {\n          x: e,\n          y: i\n        };\n      }\n    }, {\n      key: \"moveMarkers\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = this.ttCtx;\n        if (i.globals.markers.size[t] > 0) for (var a = i.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series[data\\\\:realIndex='\".concat(t, \"'] .apexcharts-marker\")), n = 0; n < a.length; n++) {\n          parseInt(a[n].getAttribute(\"rel\")) === e && (s.marker.resetPointsSize(), s.marker.enlargeCurrentPoint(e, a[n]));\n        } else s.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t);\n      }\n    }, {\n      key: \"moveDynamicPointOnHover\",\n      value: function value(t, e) {\n        var i,\n            s,\n            a = this.w,\n            n = this.ttCtx,\n            r = a.globals.pointsArray,\n            o = a.config.markers.hover.size;\n        void 0 === o && (o = a.globals.markers.size[e] + a.config.markers.hover.sizeOffset), i = r[e][t][0], s = r[e][t][1] ? r[e][t][1] : 0;\n        var l = a.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(e, \"'] .apexcharts-series-markers circle\"));\n        l && (l.setAttribute(\"r\", o), l.setAttribute(\"cx\", i), l.setAttribute(\"cy\", s)), this.moveXCrosshairs(i), n.fixedTooltip || this.moveTooltip(i, s, o);\n      }\n    }, {\n      key: \"moveDynamicPointsOnHover\",\n      value: function value(t) {\n        var e,\n            i = this.ttCtx,\n            s = i.w,\n            a = 0,\n            n = 0,\n            r = s.globals.pointsArray;\n        e = new G(this.ctx).getActiveSeriesIndex();\n        var o = s.config.markers.hover.size;\n        void 0 === o && (o = s.globals.markers.size[e] + s.config.markers.hover.sizeOffset), r[e] && (a = r[e][t][0], n = r[e][t][1]);\n        var l = null,\n            h = i.getAllMarkers();\n        if (null !== (l = null !== h ? h : s.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers circle\"))) for (var c = 0; c < l.length; c++) {\n          var d = r[c];\n\n          if (d && d.length) {\n            var u = r[c][t][1];\n            l[c].setAttribute(\"cx\", a);\n            var g = parseInt(l[c].parentNode.parentNode.parentNode.getAttribute(\"data:realIndex\"));\n            null !== u ? (l[g] && l[g].setAttribute(\"r\", o), l[g] && l[g].setAttribute(\"cy\", u)) : l[g] && l[g].setAttribute(\"r\", 0);\n          }\n        }\n\n        if (this.moveXCrosshairs(a), !i.fixedTooltip) {\n          var f = n || s.globals.gridHeight;\n          this.moveTooltip(a, f, o);\n        }\n      }\n    }, {\n      key: \"moveStickyTooltipOverBars\",\n      value: function value(t) {\n        var e,\n            i = this.w,\n            s = this.ttCtx,\n            a = i.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[rel='1'] path[j='\".concat(t, \"'], .apexcharts-candlestick-series .apexcharts-series[rel='1'] path[j='\").concat(t, \"'], .apexcharts-rangebar-series .apexcharts-series[rel='1'] path[j='\").concat(t, \"']\")),\n            n = a ? parseFloat(a.getAttribute(\"cx\")) : 0,\n            r = a ? parseFloat(a.getAttribute(\"barWidth\")) : 0;\n        i.globals.isXNumeric ? n -= r / 2 : (n = s.xAxisTicksPositions[t - 1] + s.dataPointsDividedWidth / 2, isNaN(n) && (n = s.xAxisTicksPositions[t] - s.dataPointsDividedWidth / 2));\n        var o = s.getElGrid().getBoundingClientRect();\n\n        if (e = s.e.clientY - o.top - s.tooltipRect.ttHeight / 2, this.moveXCrosshairs(n), !s.fixedTooltip) {\n          var l = e || i.globals.gridHeight;\n          this.moveTooltip(n, l);\n        }\n      }\n    }]), t;\n  }(),\n      gt = function () {\n    function t(i) {\n      e(this, t), this.w = i.w, this.ttCtx = i, this.ctx = i.ctx, this.tooltipPosition = new ut(i);\n    }\n\n    return s(t, [{\n      key: \"drawDynamicPoints\",\n      value: function value() {\n        for (var t = this.w, e = new f(this.ctx), i = new C(this.ctx), s = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\"), a = 0; a < s.length; a++) {\n          var n = parseInt(s[a].getAttribute(\"data:realIndex\")),\n              r = t.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(n, \"'] .apexcharts-series-markers-wrap\"));\n\n          if (null !== r) {\n            var o = void 0,\n                l = \"apexcharts-marker w\".concat((Math.random() + 1).toString(36).substring(4));\n            \"line\" !== t.config.chart.type && \"area\" !== t.config.chart.type || t.globals.comboCharts || t.config.tooltip.intersect || (l += \" no-pointer-events\");\n            var h = i.getMarkerConfig(l, n);\n            (o = e.drawMarker(0, 0, h)).node.setAttribute(\"default-marker-size\", 0);\n            var c = document.createElementNS(t.globals.SVGNS, \"g\");\n            c.classList.add(\"apexcharts-series-markers\"), c.appendChild(o.node), r.appendChild(c);\n          }\n        }\n      }\n    }, {\n      key: \"enlargeCurrentPoint\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n            s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n            a = this.w;\n        \"bubble\" !== a.config.chart.type && this.newPointSize(t, e);\n        var n = e.getAttribute(\"cx\"),\n            r = e.getAttribute(\"cy\");\n\n        if (null !== i && null !== s && (n = i, r = s), this.tooltipPosition.moveXCrosshairs(n), !this.fixedTooltip) {\n          if (\"radar\" === a.config.chart.type) {\n            var o = this.ttCtx.getElGrid().getBoundingClientRect();\n            n = this.ttCtx.e.clientX - o.left;\n          }\n\n          this.tooltipPosition.moveTooltip(n, r, a.config.markers.hover.size);\n        }\n      }\n    }, {\n      key: \"enlargePoints\",\n      value: function value(t) {\n        for (var e = this.w, i = this.ttCtx, s = t, a = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), n = e.config.markers.hover.size, r = 0; r < a.length; r++) {\n          var o = a[r].getAttribute(\"rel\"),\n              l = a[r].getAttribute(\"index\");\n\n          if (void 0 === n && (n = e.globals.markers.size[l] + e.config.markers.hover.sizeOffset), s === parseInt(o)) {\n            this.newPointSize(s, a[r]);\n            var h = a[r].getAttribute(\"cx\"),\n                c = a[r].getAttribute(\"cy\");\n            this.tooltipPosition.moveXCrosshairs(h), i.fixedTooltip || this.tooltipPosition.moveTooltip(h, c, n);\n          } else this.oldPointSize(a[r]);\n        }\n      }\n    }, {\n      key: \"newPointSize\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = i.config.markers.hover.size,\n            a = null;\n        a = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;\n        var n = parseInt(a.getAttribute(\"index\"));\n        void 0 === s && (s = i.globals.markers.size[n] + i.config.markers.hover.sizeOffset), a.setAttribute(\"r\", s);\n      }\n    }, {\n      key: \"oldPointSize\",\n      value: function value(t) {\n        var e = parseInt(t.getAttribute(\"default-marker-size\"));\n        t.setAttribute(\"r\", e);\n      }\n    }, {\n      key: \"resetPointsSize\",\n      value: function value() {\n        for (var t = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), e = 0; e < t.length; e++) {\n          var i = parseInt(t[e].getAttribute(\"default-marker-size\"));\n          d.isNumber(i) ? t[e].setAttribute(\"r\", i) : t[e].setAttribute(\"r\", 0);\n        }\n      }\n    }]), t;\n  }(),\n      ft = function () {\n    function t(i) {\n      e(this, t), this.w = i.w, this.ttCtx = i;\n    }\n\n    return s(t, [{\n      key: \"getAttr\",\n      value: function value(t, e) {\n        return parseFloat(t.target.getAttribute(e));\n      }\n    }, {\n      key: \"handleHeatTooltip\",\n      value: function value(t) {\n        var e = t.e,\n            i = t.opt,\n            s = t.x,\n            a = t.y,\n            n = this.ttCtx,\n            r = this.w;\n\n        if (e.target.classList.contains(\"apexcharts-heatmap-rect\")) {\n          var o = this.getAttr(e, \"i\"),\n              l = this.getAttr(e, \"j\"),\n              h = this.getAttr(e, \"cx\"),\n              c = this.getAttr(e, \"cy\"),\n              d = this.getAttr(e, \"width\"),\n              u = this.getAttr(e, \"height\");\n\n          if (n.tooltipLabels.drawSeriesTexts({\n            ttItems: i.ttItems,\n            i: o,\n            j: l,\n            shared: !1\n          }), s = h + n.tooltipRect.ttWidth / 2 + d, a = c + n.tooltipRect.ttHeight / 2 - u / 2, n.tooltipPosition.moveXCrosshairs(h + d / 2), s > r.globals.gridWidth / 2 && (s = h - n.tooltipRect.ttWidth / 2 + d), n.w.config.tooltip.followCursor) {\n            var g = n.getElGrid().getBoundingClientRect();\n            a = n.e.clientY - g.top + r.globals.translateY / 2 - 10;\n          }\n        }\n\n        return {\n          x: s,\n          y: a\n        };\n      }\n    }, {\n      key: \"handleMarkerTooltip\",\n      value: function value(t) {\n        var e,\n            i,\n            s = t.e,\n            a = t.opt,\n            n = t.x,\n            r = t.y,\n            o = this.w,\n            l = this.ttCtx;\n\n        if (s.target.classList.contains(\"apexcharts-marker\")) {\n          var h = parseInt(a.paths.getAttribute(\"cx\")),\n              c = parseInt(a.paths.getAttribute(\"cy\")),\n              u = parseFloat(a.paths.getAttribute(\"val\"));\n\n          if (i = parseInt(a.paths.getAttribute(\"rel\")), e = parseInt(a.paths.parentNode.parentNode.parentNode.getAttribute(\"rel\")) - 1, l.intersect) {\n            var g = d.findAncestor(a.paths, \"apexcharts-series\");\n            g && (e = parseInt(g.getAttribute(\"data:realIndex\")));\n          }\n\n          if (l.tooltipLabels.drawSeriesTexts({\n            ttItems: a.ttItems,\n            i: e,\n            j: i,\n            shared: !l.showOnIntersect && o.config.tooltip.shared\n          }), \"mouseup\" === s.type && l.markerClick(s, e, i), n = h, r = c + o.globals.translateY - 1.4 * l.tooltipRect.ttHeight, l.w.config.tooltip.followCursor) {\n            var f = l.getElGrid().getBoundingClientRect();\n            r = l.e.clientY + o.globals.translateY - f.top;\n          }\n\n          u < 0 && (r = c), l.marker.enlargeCurrentPoint(i, a.paths, n, r);\n        }\n\n        return {\n          x: n,\n          y: r\n        };\n      }\n    }, {\n      key: \"handleBarTooltip\",\n      value: function value(t) {\n        var e,\n            i,\n            s = t.e,\n            a = t.opt,\n            n = this.w,\n            r = this.ttCtx,\n            o = r.getElTooltip(),\n            l = 0,\n            h = 0,\n            c = 0,\n            d = this.getBarTooltipXY({\n          e: s,\n          opt: a\n        });\n        e = d.i;\n        var u = d.barHeight,\n            g = d.j;\n\n        if (n.globals.isBarHorizontal && r.hasBars() || !n.config.tooltip.shared ? (h = d.x, c = d.y, i = Array.isArray(n.config.stroke.width) ? n.config.stroke.width[e] : n.config.stroke.width, l = h) : n.globals.comboCharts || n.config.tooltip.shared || (l /= 2), isNaN(c) && (c = n.globals.svgHeight - r.tooltipRect.ttHeight), h + r.tooltipRect.ttWidth > n.globals.gridWidth ? h -= r.tooltipRect.ttWidth : h < 0 && (h += r.tooltipRect.ttWidth), r.w.config.tooltip.followCursor) {\n          var f = r.getElGrid().getBoundingClientRect();\n          c = r.e.clientY - f.top;\n        }\n\n        if (null === r.tooltip && (r.tooltip = n.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\")), n.config.tooltip.shared || (n.globals.comboChartsHasBars ? r.tooltipPosition.moveXCrosshairs(l + i / 2) : r.tooltipPosition.moveXCrosshairs(l)), !r.fixedTooltip && (!n.config.tooltip.shared || n.globals.isBarHorizontal && r.hasBars())) {\n          x && (h = n.globals.gridWidth - h), o.style.left = h + n.globals.translateX + \"px\";\n          var p = parseInt(a.paths.parentNode.getAttribute(\"data:realIndex\")),\n              x = n.globals.isMultipleYAxis ? n.config.yaxis[p] && n.config.yaxis[p].reversed : n.config.yaxis[0].reversed;\n          !x || n.globals.isBarHorizontal && r.hasBars() || (c = c + u - 2 * (n.globals.series[e][g] < 0 ? u : 0)), r.tooltipRect.ttHeight + c > n.globals.gridHeight ? (c = n.globals.gridHeight - r.tooltipRect.ttHeight + n.globals.translateY, o.style.top = c + \"px\") : o.style.top = c + n.globals.translateY - r.tooltipRect.ttHeight / 2 + \"px\";\n        }\n      }\n    }, {\n      key: \"getBarTooltipXY\",\n      value: function value(t) {\n        var e = t.e,\n            i = t.opt,\n            s = this.w,\n            a = null,\n            n = this.ttCtx,\n            r = 0,\n            o = 0,\n            l = 0,\n            h = 0,\n            c = 0,\n            d = e.target.classList;\n\n        if (d.contains(\"apexcharts-bar-area\") || d.contains(\"apexcharts-candlestick-area\") || d.contains(\"apexcharts-rangebar-area\")) {\n          var u = e.target,\n              g = u.getBoundingClientRect(),\n              f = i.elGrid.getBoundingClientRect(),\n              p = g.height;\n          c = g.height;\n          var x = g.width,\n              b = parseInt(u.getAttribute(\"cx\")),\n              m = parseInt(u.getAttribute(\"cy\"));\n          h = parseFloat(u.getAttribute(\"barWidth\"));\n          var v = \"touchmove\" === e.type ? e.touches[0].clientX : e.clientX;\n          a = parseInt(u.getAttribute(\"j\")), r = parseInt(u.parentNode.getAttribute(\"rel\")) - 1, s.globals.comboCharts && (r = parseInt(u.parentNode.getAttribute(\"data:realIndex\"))), n.tooltipLabels.drawSeriesTexts({\n            ttItems: i.ttItems,\n            i: r,\n            j: a,\n            shared: !n.showOnIntersect && s.config.tooltip.shared\n          }), s.config.tooltip.followCursor ? s.globals.isBarHorizontal ? (o = v - f.left + 15, l = m - n.dataPointsDividedHeight + p / 2 - n.tooltipRect.ttHeight / 2) : (o = s.globals.isXNumeric ? b - x / 2 : b - n.dataPointsDividedWidth + x / 2, l = e.clientY - f.top - n.tooltipRect.ttHeight / 2 - 15) : s.globals.isBarHorizontal ? ((o = b) < n.xyRatios.baseLineInvertedY && (o = b - n.tooltipRect.ttWidth), l = m - n.dataPointsDividedHeight + p / 2 - n.tooltipRect.ttHeight / 2) : (o = s.globals.isXNumeric ? b - x / 2 : b - n.dataPointsDividedWidth + x / 2, l = m);\n        }\n\n        return {\n          x: o,\n          y: l,\n          barHeight: c,\n          barWidth: h,\n          i: r,\n          j: a\n        };\n      }\n    }]), t;\n  }(),\n      pt = function () {\n    function t(i) {\n      e(this, t), this.w = i.w, this.ttCtx = i;\n    }\n\n    return s(t, [{\n      key: \"drawXaxisTooltip\",\n      value: function value() {\n        var t = this.w,\n            e = this.ttCtx,\n            i = \"bottom\" === t.config.xaxis.position;\n        e.xaxisOffY = i ? t.globals.gridHeight + 1 : 1;\n        var s = i ? \"apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom\" : \"apexcharts-xaxistooltip apexcharts-xaxistooltip-top\",\n            a = t.globals.dom.elWrap;\n        e.blxaxisTooltip && null === t.globals.dom.baseEl.querySelector(\".apexcharts-xaxistooltip\") && (e.xaxisTooltip = document.createElement(\"div\"), e.xaxisTooltip.setAttribute(\"class\", s + \" \" + t.config.tooltip.theme), a.appendChild(e.xaxisTooltip), e.xaxisTooltipText = document.createElement(\"div\"), e.xaxisTooltipText.classList.add(\"apexcharts-xaxistooltip-text\"), e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily, e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize, e.xaxisTooltip.appendChild(e.xaxisTooltipText));\n      }\n    }, {\n      key: \"drawYaxisTooltip\",\n      value: function value() {\n        for (var t = this.w, e = this.ttCtx, i = 0; i < t.config.yaxis.length; i++) {\n          var s = t.config.yaxis[i].opposite || t.config.yaxis[i].crosshairs.opposite;\n          e.yaxisOffX = s ? t.globals.gridWidth + 1 : 1;\n          var a = \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i, s ? \" apexcharts-yaxistooltip-right\" : \" apexcharts-yaxistooltip-left\"),\n              n = t.globals.dom.elWrap;\n          if (e.blyaxisTooltip) null === t.globals.dom.baseEl.querySelector(\".apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i)) && (e.yaxisTooltip = document.createElement(\"div\"), e.yaxisTooltip.setAttribute(\"class\", a + \" \" + t.config.tooltip.theme), n.appendChild(e.yaxisTooltip), 0 === i && (e.yaxisTooltipText = []), e.yaxisTooltipText.push(document.createElement(\"div\")), e.yaxisTooltipText[i].classList.add(\"apexcharts-yaxistooltip-text\"), e.yaxisTooltip.appendChild(e.yaxisTooltipText[i]));\n        }\n      }\n    }, {\n      key: \"setXCrosshairWidth\",\n      value: function value() {\n        var t = this.w,\n            e = this.ttCtx,\n            i = e.getElXCrosshairs();\n\n        if (e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width), t.globals.comboCharts) {\n          var s = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n\n          if (null !== s && \"barWidth\" === t.config.xaxis.crosshairs.width) {\n            var a = parseFloat(s.getAttribute(\"barWidth\"));\n            e.xcrosshairsWidth = a;\n          } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n            var n = t.globals.labels.length;\n            e.xcrosshairsWidth = t.globals.gridWidth / n;\n          }\n        } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n          var r = t.globals.labels.length;\n          e.xcrosshairsWidth = t.globals.gridWidth / r;\n        } else if (\"barWidth\" === t.config.xaxis.crosshairs.width) {\n          var o = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n\n          if (null !== o) {\n            var l = parseFloat(o.getAttribute(\"barWidth\"));\n            e.xcrosshairsWidth = l;\n          } else e.xcrosshairsWidth = 1;\n        }\n\n        t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== i && e.xcrosshairsWidth > 0 && i.setAttribute(\"width\", e.xcrosshairsWidth);\n      }\n    }, {\n      key: \"handleYCrosshair\",\n      value: function value() {\n        var t = this.w,\n            e = this.ttCtx;\n        e.ycrosshairs = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs\"), e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs-hidden\");\n      }\n    }, {\n      key: \"drawYaxisTooltipText\",\n      value: function value(t, e, i) {\n        var s = this.ttCtx,\n            a = this.w,\n            n = a.globals.yLabelFormatters[t];\n\n        if (s.blyaxisTooltip) {\n          var r = s.getElGrid().getBoundingClientRect(),\n              o = (e - r.top) * i.yRatio[t],\n              l = a.globals.maxYArr[t] - a.globals.minYArr[t],\n              h = a.globals.minYArr[t] + (l - o);\n          s.tooltipPosition.moveYCrosshairs(e - r.top), s.yaxisTooltipText[t].innerHTML = n(h), s.tooltipPosition.moveYAxisTooltip(t);\n        }\n      }\n    }]), t;\n  }(),\n      xt = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n      var s = this.w;\n      this.tConfig = s.config.tooltip, this.tooltipUtil = new ct(this), this.tooltipLabels = new dt(this), this.tooltipPosition = new ut(this), this.marker = new gt(this), this.intersect = new ft(this), this.axesTooltip = new pt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !s.globals.isBarHorizontal && this.tConfig.shared;\n    }\n\n    return s(t, [{\n      key: \"getElTooltip\",\n      value: function value(t) {\n        return t || (t = this), t.w.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\");\n      }\n    }, {\n      key: \"getElXCrosshairs\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-xcrosshairs\");\n      }\n    }, {\n      key: \"getElGrid\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-grid\");\n      }\n    }, {\n      key: \"drawTooltip\",\n      value: function value(t) {\n        var e = this.w;\n        this.xyRatios = t, this.blxaxisTooltip = e.config.xaxis.tooltip.enabled && e.globals.axisCharts, this.blyaxisTooltip = e.config.yaxis[0].tooltip.enabled && e.globals.axisCharts, this.allTooltipSeriesGroups = [], e.globals.axisCharts || (this.showTooltipTitle = !1);\n        var i = document.createElement(\"div\");\n\n        if (i.classList.add(\"apexcharts-tooltip\"), i.classList.add(this.tConfig.theme), e.globals.dom.elWrap.appendChild(i), e.globals.axisCharts) {\n          this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();\n          var s = new H(this.ctx);\n          this.xAxisTicksPositions = s.getXAxisTicksPositions();\n        }\n\n        if ((e.globals.comboCharts && !this.tConfig.shared || this.tConfig.intersect && !this.tConfig.shared || (\"bar\" === e.config.chart.type || \"rangeBar\" === e.config.chart.type) && !this.tConfig.shared) && (this.showOnIntersect = !0), 0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e.globals.collapsedSeries.length !== e.globals.series.length) {\n          this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints, this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement(\"div\"), this.tooltipTitle.classList.add(\"apexcharts-tooltip-title\"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i.appendChild(this.tooltipTitle));\n          var a = e.globals.series.length;\n          (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (a = this.showOnIntersect ? 1 : e.globals.series.length), this.ttItems = this.createTTElements(a), this.addSVGEvents();\n        }\n      }\n    }, {\n      key: \"createTTElements\",\n      value: function value(t) {\n        for (var e = this.w, i = [], s = this.getElTooltip(), a = 0; a < t; a++) {\n          var n = document.createElement(\"div\");\n          n.classList.add(\"apexcharts-tooltip-series-group\"), this.tConfig.shared && this.tConfig.enabledOnSeries && Array.isArray(this.tConfig.enabledOnSeries) && this.tConfig.enabledOnSeries.indexOf(a) < 0 && n.classList.add(\"apexcharts-tooltip-series-group-hidden\");\n          var r = document.createElement(\"span\");\n          r.classList.add(\"apexcharts-tooltip-marker\"), r.style.backgroundColor = e.globals.colors[a], n.appendChild(r);\n          var o = document.createElement(\"div\");\n          o.classList.add(\"apexcharts-tooltip-text\"), o.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, o.style.fontSize = this.tConfig.style.fontSize;\n          var l = document.createElement(\"div\");\n          l.classList.add(\"apexcharts-tooltip-y-group\");\n          var h = document.createElement(\"span\");\n          h.classList.add(\"apexcharts-tooltip-text-label\"), l.appendChild(h);\n          var c = document.createElement(\"span\");\n          c.classList.add(\"apexcharts-tooltip-text-value\"), l.appendChild(c);\n          var d = document.createElement(\"div\");\n          d.classList.add(\"apexcharts-tooltip-z-group\");\n          var u = document.createElement(\"span\");\n          u.classList.add(\"apexcharts-tooltip-text-z-label\"), d.appendChild(u);\n          var g = document.createElement(\"span\");\n          g.classList.add(\"apexcharts-tooltip-text-z-value\"), d.appendChild(g), o.appendChild(l), o.appendChild(d), n.appendChild(o), s.appendChild(n), i.push(n);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"addSVGEvents\",\n      value: function value() {\n        var t = this.w,\n            e = t.config.chart.type,\n            i = this.getElTooltip(),\n            s = !(\"bar\" !== e && \"candlestick\" !== e && \"rangeBar\" !== e),\n            a = t.globals.dom.Paper.node,\n            n = this.getElGrid();\n        n && (this.seriesBound = n.getBoundingClientRect());\n        var r,\n            o = [],\n            l = [],\n            h = {\n          hoverArea: a,\n          elGrid: n,\n          tooltipEl: i,\n          tooltipY: o,\n          tooltipX: l,\n          ttItems: this.ttItems\n        };\n        if (t.globals.axisCharts && (\"area\" === e || \"line\" === e || \"scatter\" === e || \"bubble\" === e ? r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:longestSeries='true'] .apexcharts-marker\") : s ? r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-rangebar-area\") : \"heatmap\" === e ? r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-heatmap\") : \"radar\" === e && (r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-marker\")), r && r.length)) for (var c = 0; c < r.length; c++) {\n          o.push(r[c].getAttribute(\"cy\")), l.push(r[c].getAttribute(\"cx\"));\n        }\n        if (t.globals.xyCharts && !this.showOnIntersect || t.globals.comboCharts && !this.showOnIntersect || s && this.hasBars() && this.tConfig.shared) this.addPathsEventListeners([a], h);else if (s && !t.globals.comboCharts) this.addBarsEventListeners(h);else if (\"bubble\" === e || \"scatter\" === e || \"radar\" === e || this.showOnIntersect && (\"area\" === e || \"line\" === e)) this.addPointsEventsListeners(h);else if (!t.globals.axisCharts || \"heatmap\" === e) {\n          var d = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n          this.addPathsEventListeners(d, h);\n        }\n\n        if (this.showOnIntersect) {\n          var u = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-line-series .apexcharts-marker\");\n          u.length > 0 && this.addPathsEventListeners(u, h);\n          var g = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-area-series .apexcharts-marker\");\n          g.length > 0 && this.addPathsEventListeners(g, h), this.hasBars() && !this.tConfig.shared && this.addBarsEventListeners(h);\n        }\n      }\n    }, {\n      key: \"drawFixedTooltipRect\",\n      value: function value() {\n        var t = this.w,\n            e = this.getElTooltip(),\n            i = e.getBoundingClientRect(),\n            s = i.width + 10,\n            a = i.height + 10,\n            n = this.tConfig.fixed.offsetX,\n            r = this.tConfig.fixed.offsetY;\n        return this.tConfig.fixed.position.toLowerCase().indexOf(\"right\") > -1 && (n = n + t.globals.svgWidth - s + 10), this.tConfig.fixed.position.toLowerCase().indexOf(\"bottom\") > -1 && (r = r + t.globals.svgHeight - a - 10), e.style.left = n + \"px\", e.style.top = r + \"px\", {\n          x: n,\n          y: r,\n          ttWidth: s,\n          ttHeight: a\n        };\n      }\n    }, {\n      key: \"addPointsEventsListeners\",\n      value: function value(t) {\n        var e = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers .apexcharts-marker\");\n        this.addPathsEventListeners(e, t);\n      }\n    }, {\n      key: \"addBarsEventListeners\",\n      value: function value(t) {\n        var e = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-rangebar-area\");\n        this.addPathsEventListeners(e, t);\n      }\n    }, {\n      key: \"addPathsEventListeners\",\n      value: function value(t, e) {\n        for (var i = this, s = this, a = function a(_a) {\n          var n = {\n            paths: t[_a],\n            tooltipEl: e.tooltipEl,\n            tooltipY: e.tooltipY,\n            tooltipX: e.tooltipX,\n            elGrid: e.elGrid,\n            hoverArea: e.hoverArea,\n            ttItems: e.ttItems\n          };\n          i.w.globals.tooltipOpts = n;\n          [\"mousemove\", \"mouseup\", \"touchmove\", \"mouseout\", \"touchend\"].map(function (e) {\n            return t[_a].addEventListener(e, s.seriesHover.bind(s, n), {\n              capture: !1,\n              passive: !0\n            });\n          });\n        }, n = 0; n < t.length; n++) {\n          a(n);\n        }\n      }\n    }, {\n      key: \"seriesHover\",\n      value: function value(t, e) {\n        var i = this,\n            s = [],\n            a = this.w;\n        a.config.chart.group && (s = this.ctx.getGroupedCharts()), a.globals.axisCharts && (a.globals.minX === -1 / 0 && a.globals.maxX === 1 / 0 || 0 === a.globals.dataPoints) || (s.length ? s.forEach(function (s) {\n          var a = i.getElTooltip(s),\n              n = {\n            paths: t.paths,\n            tooltipEl: a,\n            tooltipY: t.tooltipY,\n            tooltipX: t.tooltipX,\n            elGrid: t.elGrid,\n            hoverArea: t.hoverArea,\n            ttItems: s.w.globals.tooltip.ttItems\n          };\n          s.w.globals.minX === i.w.globals.minX && s.w.globals.maxX === i.w.globals.maxX && s.w.globals.tooltip.seriesHoverByContext({\n            chartCtx: s,\n            ttCtx: s.w.globals.tooltip,\n            opt: n,\n            e: e\n          });\n        }) : this.seriesHoverByContext({\n          chartCtx: this.ctx,\n          ttCtx: this.w.globals.tooltip,\n          opt: t,\n          e: e\n        }));\n      }\n    }, {\n      key: \"seriesHoverByContext\",\n      value: function value(t) {\n        var e = t.chartCtx,\n            i = t.ttCtx,\n            s = t.opt,\n            a = t.e,\n            n = e.w,\n            r = this.getElTooltip();\n        (i.tooltipRect = {\n          x: 0,\n          y: 0,\n          ttWidth: r.getBoundingClientRect().width,\n          ttHeight: r.getBoundingClientRect().height\n        }, i.e = a, !i.hasBars() || n.globals.comboCharts || i.isBarShared) || this.tConfig.onDatasetHover.highlightDataSeries && new G(e).toggleSeriesOnHover(a, a.target.parentNode);\n        i.fixedTooltip && i.drawFixedTooltipRect(), n.globals.axisCharts ? i.axisChartsTooltips({\n          e: a,\n          opt: s,\n          tooltipRect: i.tooltipRect\n        }) : i.nonAxisChartsTooltips({\n          e: a,\n          opt: s,\n          tooltipRect: i.tooltipRect\n        });\n      }\n    }, {\n      key: \"axisChartsTooltips\",\n      value: function value(t) {\n        var e,\n            i,\n            s,\n            a = t.e,\n            n = t.opt,\n            r = this.w,\n            o = null,\n            l = n.elGrid.getBoundingClientRect(),\n            h = \"touchmove\" === a.type ? a.touches[0].clientX : a.clientX,\n            c = \"touchmove\" === a.type ? a.touches[0].clientY : a.clientY;\n        if (this.clientY = c, this.clientX = h, c < l.top || c > l.top + l.height) this.handleMouseOut(n);else {\n          if (Array.isArray(this.tConfig.enabledOnSeries)) {\n            var d = parseInt(n.paths.getAttribute(\"index\"));\n            if (this.tConfig.enabledOnSeries.indexOf(d) < 0) return void this.handleMouseOut(n);\n          }\n\n          var u = this.getElTooltip(),\n              g = this.getElXCrosshairs(),\n              f = r.globals.xyCharts || \"bar\" === r.config.chart.type && !r.globals.isBarHorizontal && this.hasBars() && this.tConfig.shared || r.globals.comboCharts && this.hasBars;\n\n          if (r.globals.isBarHorizontal && this.hasBars() && (f = !1), \"mousemove\" === a.type || \"touchmove\" === a.type || \"mouseup\" === a.type) {\n            if (null !== g && g.classList.add(\"active\"), null !== this.ycrosshairs && this.blyaxisTooltip && this.ycrosshairs.classList.add(\"active\"), f && !this.showOnIntersect) {\n              e = (o = this.tooltipUtil.getNearestValues({\n                context: this,\n                hoverArea: n.hoverArea,\n                elGrid: n.elGrid,\n                clientX: h,\n                clientY: c,\n                hasBars: this.hasBars\n              })).j;\n              var p = o.capturedSeries;\n              if (o.hoverX < 0 || o.hoverX > r.globals.gridWidth) return void this.handleMouseOut(n);\n\n              if (null !== p) {\n                if (null === r.globals.series[p][e]) return void n.tooltipEl.classList.remove(\"active\");\n                void 0 !== r.globals.series[p][e] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(e) && this.tooltipUtil.isinitialSeriesSameLen() ? this.create(a, this, p, e, n.ttItems) : this.create(a, this, p, e, n.ttItems, !1) : this.tooltipUtil.isXoverlap(e) && this.create(a, this, 0, e, n.ttItems);\n              } else this.tooltipUtil.isXoverlap(e) && this.create(a, this, 0, e, n.ttItems);\n            } else if (\"heatmap\" === r.config.chart.type) {\n              var x = this.intersect.handleHeatTooltip({\n                e: a,\n                opt: n,\n                x: i,\n                y: s\n              });\n              i = x.x, s = x.y, u.style.left = i + \"px\", u.style.top = s + \"px\";\n            } else this.hasBars && this.intersect.handleBarTooltip({\n              e: a,\n              opt: n\n            }), this.hasMarkers && this.intersect.handleMarkerTooltip({\n              e: a,\n              opt: n,\n              x: i,\n              y: s\n            });\n\n            if (this.blyaxisTooltip) for (var b = 0; b < r.config.yaxis.length; b++) {\n              this.axesTooltip.drawYaxisTooltipText(b, c, this.xyRatios);\n            }\n            n.tooltipEl.classList.add(\"active\");\n          } else \"mouseout\" !== a.type && \"touchend\" !== a.type || this.handleMouseOut(n);\n        }\n      }\n    }, {\n      key: \"nonAxisChartsTooltips\",\n      value: function value(t) {\n        var e = t.e,\n            i = t.opt,\n            s = t.tooltipRect,\n            a = this.w,\n            n = i.paths.getAttribute(\"rel\"),\n            r = this.getElTooltip(),\n            o = a.globals.dom.elWrap.getBoundingClientRect();\n\n        if (\"mousemove\" === e.type || \"touchmove\" === e.type) {\n          r.classList.add(\"active\"), this.tooltipLabels.drawSeriesTexts({\n            ttItems: i.ttItems,\n            i: parseInt(n) - 1,\n            shared: !1\n          });\n          var l = a.globals.clientX - o.left - s.ttWidth / 2,\n              h = a.globals.clientY - o.top - s.ttHeight - 10;\n          r.style.left = l + \"px\", r.style.top = h + \"px\";\n        } else \"mouseout\" !== e.type && \"touchend\" !== e.type || r.classList.remove(\"active\");\n      }\n    }, {\n      key: \"deactivateHoverFilter\",\n      value: function value() {\n        for (var t = this.w, e = new f(this.ctx), i = t.globals.dom.Paper.select(\".apexcharts-bar-area\"), s = 0; s < i.length; s++) {\n          e.pathMouseLeave(i[s]);\n        }\n      }\n    }, {\n      key: \"handleMouseOut\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.getElXCrosshairs();\n\n        if (t.tooltipEl.classList.remove(\"active\"), this.deactivateHoverFilter(), \"bubble\" !== e.config.chart.type && this.marker.resetPointsSize(), null !== i && i.classList.remove(\"active\"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove(\"active\"), this.blxaxisTooltip && this.xaxisTooltip.classList.remove(\"active\"), this.blyaxisTooltip) {\n          null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n\n          for (var s = 0; s < this.yaxisTTEls.length; s++) {\n            this.yaxisTTEls[s].classList.remove(\"active\");\n          }\n        }\n      }\n    }, {\n      key: \"getElMarkers\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series-markers\");\n      }\n    }, {\n      key: \"getAllMarkers\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers .apexcharts-marker\");\n      }\n    }, {\n      key: \"hasMarkers\",\n      value: function value() {\n        return this.getElMarkers().length > 0;\n      }\n    }, {\n      key: \"getElBars\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-rangebar-series\");\n      }\n    }, {\n      key: \"hasBars\",\n      value: function value() {\n        return this.getElBars().length > 0;\n      }\n    }, {\n      key: \"markerClick\",\n      value: function value(t, e, i) {\n        var s = this.w;\n        \"function\" == typeof s.config.chart.events.markerClick && s.config.chart.events.markerClick(t, this.ctx, {\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: s\n        }), this.ctx.fireEvent(\"markerClick\", [t, this.ctx, {\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: s\n        }]);\n      }\n    }, {\n      key: \"create\",\n      value: function value(t, e, i, s, a) {\n        var n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,\n            r = this.w,\n            o = e;\n        \"mouseup\" === t.type && this.markerClick(t, i, s), null === n && (n = this.tConfig.shared);\n        var l = this.hasMarkers(),\n            h = this.getElBars();\n\n        if (n) {\n          if (o.tooltipLabels.drawSeriesTexts({\n            ttItems: a,\n            i: i,\n            j: s,\n            shared: !this.showOnIntersect && this.tConfig.shared\n          }), l && (r.globals.markers.largestSize > 0 ? o.marker.enlargePoints(s) : o.tooltipPosition.moveDynamicPointsOnHover(s)), this.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(h), this.barSeriesHeight > 0)) {\n            var c = new f(this.ctx),\n                d = r.globals.dom.Paper.select(\".apexcharts-bar-area[j='\".concat(s, \"']\"));\n            this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(s);\n\n            for (var u = 0; u < d.length; u++) {\n              c.pathMouseEnter(d[u]);\n            }\n          }\n        } else o.tooltipLabels.drawSeriesTexts({\n          shared: !1,\n          ttItems: a,\n          i: i,\n          j: s\n        }), this.hasBars() && o.tooltipPosition.moveStickyTooltipOverBars(s), l && o.tooltipPosition.moveMarkers(i, s);\n      }\n    }]), t;\n  }(),\n      bt = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w, this.ev = this.w.config.chart.events, this.localeValues = this.w.globals.locale.toolbar;\n    }\n\n    return s(t, [{\n      key: \"createToolbar\",\n      value: function value() {\n        var t = this.w,\n            e = document.createElement(\"div\");\n        if (e.setAttribute(\"class\", \"apexcharts-toolbar\"), t.globals.dom.elWrap.appendChild(e), this.elZoom = document.createElement(\"div\"), this.elZoomIn = document.createElement(\"div\"), this.elZoomOut = document.createElement(\"div\"), this.elPan = document.createElement(\"div\"), this.elSelection = document.createElement(\"div\"), this.elZoomReset = document.createElement(\"div\"), this.elMenuIcon = document.createElement(\"div\"), this.elMenu = document.createElement(\"div\"), this.elCustomIcons = [], this.t = t.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for (var i = 0; i < this.t.customIcons.length; i++) {\n          this.elCustomIcons.push(document.createElement(\"div\"));\n        }\n        this.elMenuItems = [];\n        var s = [];\n        this.t.zoomin && t.config.chart.zoom.enabled && s.push({\n          el: this.elZoomIn,\n          icon: \"string\" == typeof this.t.zoomin ? this.t.zoomin : '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n',\n          title: this.localeValues.zoomIn,\n          \"class\": \"apexcharts-zoom-in-icon\"\n        }), this.t.zoomout && t.config.chart.zoom.enabled && s.push({\n          el: this.elZoomOut,\n          icon: \"string\" == typeof this.t.zoomout ? this.t.zoomout : '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n',\n          title: this.localeValues.zoomOut,\n          \"class\": \"apexcharts-zoom-out-icon\"\n        }), this.t.zoom && t.config.chart.zoom.enabled && s.push({\n          el: this.elZoom,\n          icon: \"string\" == typeof this.t.zoom ? this.t.zoom : '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\\n    <path d=\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\"/>\\n</svg>',\n          title: this.localeValues.selectionZoom,\n          \"class\": t.globals.isTouchDevice ? \"hidden\" : \"apexcharts-zoom-icon\"\n        }), this.t.selection && t.config.chart.selection.enabled && s.push({\n          el: this.elSelection,\n          icon: \"string\" == typeof this.t.selection ? this.t.selection : '<svg fill=\"#6E8192\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z\"/>\\n</svg>',\n          title: this.localeValues.selection,\n          \"class\": t.globals.isTouchDevice ? \"hidden\" : \"apexcharts-selection-icon\"\n        }), this.t.pan && t.config.chart.zoom.enabled && s.push({\n          el: this.elPan,\n          icon: \"string\" == typeof this.t.pan ? this.t.pan : '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <defs>\\n        <path d=\"M0 0h24v24H0z\" id=\"a\"/>\\n    </defs>\\n    <clipPath id=\"b\">\\n        <use overflow=\"visible\" xlink:href=\"#a\"/>\\n    </clipPath>\\n    <path clip-path=\"url(#b)\" d=\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\"/>\\n</svg>',\n          title: this.localeValues.pan,\n          \"class\": t.globals.isTouchDevice ? \"hidden\" : \"apexcharts-pan-icon\"\n        }), this.t.reset && t.config.chart.zoom.enabled && s.push({\n          el: this.elZoomReset,\n          icon: \"string\" == typeof this.t.reset ? this.t.reset : '<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"/>\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n</svg>',\n          title: this.localeValues.reset,\n          \"class\": \"apexcharts-reset-zoom-icon\"\n        }), this.t.download && s.push({\n          el: this.elMenuIcon,\n          icon: \"string\" == typeof this.t.download ? this.t.download : '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/></svg>',\n          title: this.localeValues.menu,\n          \"class\": \"apexcharts-menu-icon\"\n        });\n\n        for (var a = 0; a < this.elCustomIcons.length; a++) {\n          s.push({\n            el: this.elCustomIcons[a],\n            icon: this.t.customIcons[a].icon,\n            title: this.t.customIcons[a].title,\n            index: this.t.customIcons[a].index,\n            \"class\": \"apexcharts-toolbar-custom-icon \" + this.t.customIcons[a][\"class\"]\n          });\n        }\n\n        s.forEach(function (t, e) {\n          t.index && d.moveIndexInArray(s, e, t.index);\n        });\n\n        for (var n = 0; n < s.length; n++) {\n          f.setAttrs(s[n].el, {\n            \"class\": s[n][\"class\"],\n            title: s[n].title\n          }), s[n].el.innerHTML = s[n].icon, e.appendChild(s[n].el);\n        }\n\n        e.appendChild(this.elMenu), f.setAttrs(this.elMenu, {\n          \"class\": \"apexcharts-menu\"\n        });\n\n        for (var r = [{\n          name: \"exportSVG\",\n          title: this.localeValues.exportToSVG\n        }, {\n          name: \"exportPNG\",\n          title: this.localeValues.exportToPNG\n        }], o = 0; o < r.length; o++) {\n          this.elMenuItems.push(document.createElement(\"div\")), this.elMenuItems[o].innerHTML = r[o].title, f.setAttrs(this.elMenuItems[o], {\n            \"class\": \"apexcharts-menu-item \".concat(r[o].name),\n            title: r[o].title\n          }), this.elMenu.appendChild(this.elMenuItems[o]);\n        }\n\n        t.globals.zoomEnabled ? this.elZoom.classList.add(\"selected\") : t.globals.panEnabled ? this.elPan.classList.add(\"selected\") : t.globals.selectionEnabled && this.elSelection.classList.add(\"selected\"), this.addToolbarEventListeners();\n      }\n    }, {\n      key: \"addToolbarEventListeners\",\n      value: function value() {\n        var t = this;\n        this.elZoomReset.addEventListener(\"click\", this.handleZoomReset.bind(this)), this.elSelection.addEventListener(\"click\", this.toggleSelection.bind(this)), this.elZoom.addEventListener(\"click\", this.toggleZooming.bind(this)), this.elZoomIn.addEventListener(\"click\", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener(\"click\", this.handleZoomOut.bind(this)), this.elPan.addEventListener(\"click\", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener(\"click\", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function (e) {\n          e.classList.contains(\"exportSVG\") ? e.addEventListener(\"click\", t.downloadSVG.bind(t)) : e.classList.contains(\"exportPNG\") && e.addEventListener(\"click\", t.downloadPNG.bind(t));\n        });\n\n        for (var e = 0; e < this.t.customIcons.length; e++) {\n          this.elCustomIcons[e].addEventListener(\"click\", this.t.customIcons[e].click);\n        }\n      }\n    }, {\n      key: \"toggleSelection\",\n      value: function value() {\n        this.toggleOtherControls(), this.w.globals.selectionEnabled = !this.w.globals.selectionEnabled, this.elSelection.classList.contains(\"selected\") ? this.elSelection.classList.remove(\"selected\") : this.elSelection.classList.add(\"selected\");\n      }\n    }, {\n      key: \"toggleZooming\",\n      value: function value() {\n        this.toggleOtherControls(), this.w.globals.zoomEnabled = !this.w.globals.zoomEnabled, this.elZoom.classList.contains(\"selected\") ? this.elZoom.classList.remove(\"selected\") : this.elZoom.classList.add(\"selected\");\n      }\n    }, {\n      key: \"getToolbarIconsReference\",\n      value: function value() {\n        var t = this.w;\n        this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(\".apexcharts-zoom-icon\")), this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(\".apexcharts-pan-icon\")), this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(\".apexcharts-selection-icon\"));\n      }\n    }, {\n      key: \"enableZooming\",\n      value: function value() {\n        this.toggleOtherControls(), this.w.globals.zoomEnabled = !0, this.elZoom && this.elZoom.classList.add(\"selected\"), this.elPan && this.elPan.classList.remove(\"selected\");\n      }\n    }, {\n      key: \"enablePanning\",\n      value: function value() {\n        this.toggleOtherControls(), this.w.globals.panEnabled = !0, this.elPan && this.elPan.classList.add(\"selected\"), this.elZoom && this.elZoom.classList.remove(\"selected\");\n      }\n    }, {\n      key: \"togglePanning\",\n      value: function value() {\n        this.toggleOtherControls(), this.w.globals.panEnabled = !this.w.globals.panEnabled, this.elPan.classList.contains(\"selected\") ? this.elPan.classList.remove(\"selected\") : this.elPan.classList.add(\"selected\");\n      }\n    }, {\n      key: \"toggleOtherControls\",\n      value: function value() {\n        var t = this.w;\n        t.globals.panEnabled = !1, t.globals.zoomEnabled = !1, t.globals.selectionEnabled = !1, this.getToolbarIconsReference(), this.elPan && this.elPan.classList.remove(\"selected\"), this.elSelection && this.elSelection.classList.remove(\"selected\"), this.elZoom && this.elZoom.classList.remove(\"selected\");\n      }\n    }, {\n      key: \"handleZoomIn\",\n      value: function value() {\n        var t = this.w,\n            e = (t.globals.minX + t.globals.maxX) / 2,\n            i = (t.globals.minX + e) / 2,\n            s = (t.globals.maxX + e) / 2;\n        t.globals.disableZoomIn || this.zoomUpdateOptions(i, s);\n      }\n    }, {\n      key: \"handleZoomOut\",\n      value: function value() {\n        var t = this.w;\n\n        if (!(\"datetime\" === t.config.xaxis.type && new Date(t.globals.minX).getUTCFullYear() < 1e3)) {\n          var e = (t.globals.minX + t.globals.maxX) / 2,\n              i = t.globals.minX - (e - t.globals.minX),\n              s = t.globals.maxX - (e - t.globals.maxX);\n          t.globals.disableZoomOut || this.zoomUpdateOptions(i, s);\n        }\n      }\n    }, {\n      key: \"zoomUpdateOptions\",\n      value: function value(t, e) {\n        var i = {\n          min: t,\n          max: e\n        },\n            s = this.getBeforeZoomRange(i);\n        s && (i = s.xaxis), this.w.globals.zoomed = !0, this.ctx._updateOptions({\n          xaxis: i\n        }, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(i);\n      }\n    }, {\n      key: \"zoomCallback\",\n      value: function value(t, e) {\n        \"function\" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {\n          xaxis: t,\n          yaxis: e\n        });\n      }\n    }, {\n      key: \"getBeforeZoomRange\",\n      value: function value(t, e) {\n        var i = null;\n        return \"function\" == typeof this.ev.beforeZoom && (i = this.ev.beforeZoom(this, {\n          xaxis: t,\n          yaxis: e\n        })), i;\n      }\n    }, {\n      key: \"toggleMenu\",\n      value: function value() {\n        this.elMenu.classList.contains(\"open\") ? this.elMenu.classList.remove(\"open\") : this.elMenu.classList.add(\"open\");\n      }\n    }, {\n      key: \"downloadPNG\",\n      value: function value() {\n        var t = new nt(this.ctx);\n        t.exportToPng(this.ctx), this.toggleMenu();\n      }\n    }, {\n      key: \"downloadSVG\",\n      value: function value() {\n        var t = new nt(this.ctx);\n        t.exportToSVG(), this.toggleMenu();\n      }\n    }, {\n      key: \"handleZoomReset\",\n      value: function value(t) {\n        var e = this;\n        this.ctx.getSyncedCharts().forEach(function (t) {\n          var i = t.w;\n          i.globals.minX !== i.globals.initialminX && i.globals.maxX !== i.globals.initialmaxX && (t.revertDefaultAxisMinMax(), \"function\" == typeof i.config.chart.events.zoomed && e.zoomCallback({\n            min: i.config.xaxis.min,\n            max: i.config.xaxis.max\n          }), i.globals.zoomed = !1, t._updateSeries(i.globals.initialSeries, i.config.chart.animations.dynamicAnimation.enabled));\n        });\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        this.elZoomReset && (this.elZoomReset.removeEventListener(\"click\", this.handleZoomReset.bind(this)), this.elSelection.removeEventListener(\"click\", this.toggleSelection.bind(this)), this.elZoom.removeEventListener(\"click\", this.toggleZooming.bind(this)), this.elZoomIn.removeEventListener(\"click\", this.handleZoomIn.bind(this)), this.elZoomOut.removeEventListener(\"click\", this.handleZoomOut.bind(this)), this.elPan.removeEventListener(\"click\", this.togglePanning.bind(this)), this.elMenuIcon.removeEventListener(\"click\", this.toggleMenu.bind(this))), this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;\n      }\n    }]), t;\n  }(),\n      mt = function (t) {\n    function i(t) {\n      var s;\n      return e(this, i), (s = h(this, o(i).call(this, t))).ctx = t, s.w = t.w, s.dragged = !1, s.graphics = new f(s.ctx), s.eventList = [\"mousedown\", \"mousemove\", \"touchstart\", \"touchmove\", \"mouseup\", \"touchend\"], s.clientX = 0, s.clientY = 0, s.startX = 0, s.endX = 0, s.dragX = 0, s.startY = 0, s.endY = 0, s.dragY = 0, s;\n    }\n\n    return r(i, bt), s(i, [{\n      key: \"init\",\n      value: function value(t) {\n        var e = this,\n            i = t.xyRatios,\n            s = this.w,\n            a = this;\n        this.xyRatios = i, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = s.globals.dom.baseEl.querySelector(\".apexcharts-grid\"), this.zoomRect.node.classList.add(\"apexcharts-zoom-rect\"), this.selectionRect.node.classList.add(\"apexcharts-selection-rect\"), s.globals.dom.elGraphical.add(this.zoomRect), s.globals.dom.elGraphical.add(this.selectionRect), \"x\" === s.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n          minX: 0,\n          minY: 0,\n          maxX: s.globals.gridWidth,\n          maxY: s.globals.gridHeight\n        }).on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")) : \"y\" === s.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n          minX: 0,\n          maxX: s.globals.gridWidth\n        }).on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")) : this.slDraggableRect = this.selectionRect.draggable().on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")), this.preselectedSelection(), this.hoverArea = s.globals.dom.baseEl.querySelector(s.globals.chartClass), this.hoverArea.classList.add(\"zoomable\"), this.eventList.forEach(function (t) {\n          e.hoverArea.addEventListener(t, a.svgMouseEvents.bind(a, i), {\n            capture: !1,\n            passive: !0\n          });\n        });\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        var t = this,\n            e = this;\n        this.eventList.forEach(function (i) {\n          t.hoverArea && t.hoverArea.removeEventListener(i, e.svgMouseEvents.bind(e, e.xyRatios), {\n            capture: !1,\n            passive: !0\n          });\n        }), this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;\n      }\n    }, {\n      key: \"svgMouseEvents\",\n      value: function value(t, e) {\n        var i = this.w,\n            s = this,\n            a = this.ctx.toolbar,\n            n = i.globals.zoomEnabled ? i.config.chart.zoom.type : i.config.chart.selection.type;\n\n        if (e.shiftKey ? (this.shiftWasPressed = !0, a.enablePanning()) : this.shiftWasPressed && (a.enableZooming(), this.shiftWasPressed = !1), !(e.target.classList.contains(\"apexcharts-selection-rect\") || e.target.parentNode.classList.contains(\"apexcharts-toolbar\"))) {\n          if (s.clientX = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientX : \"touchend\" === e.type ? e.changedTouches[0].clientX : e.clientX, s.clientY = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientY : \"touchend\" === e.type ? e.changedTouches[0].clientY : e.clientY, \"mousedown\" === e.type && 1 === e.which) {\n            var r = s.gridRect.getBoundingClientRect();\n            s.startX = s.clientX - r.left, s.startY = s.clientY - r.top, s.dragged = !1, s.w.globals.mousedown = !0;\n          }\n\n          if ((\"mousemove\" === e.type && 1 === e.which || \"touchmove\" === e.type) && (s.dragged = !0, i.globals.panEnabled ? (i.globals.selection = null, s.w.globals.mousedown && s.panDragging({\n            context: s,\n            zoomtype: n,\n            xyRatios: t\n          })) : (s.w.globals.mousedown && i.globals.zoomEnabled || s.w.globals.mousedown && i.globals.selectionEnabled) && (s.selection = s.selectionDrawing({\n            context: s,\n            zoomtype: n\n          }))), \"mouseup\" === e.type || \"touchend\" === e.type) {\n            var o = s.gridRect.getBoundingClientRect();\n            s.w.globals.mousedown && (s.endX = s.clientX - o.left, s.endY = s.clientY - o.top, s.dragX = Math.abs(s.endX - s.startX), s.dragY = Math.abs(s.endY - s.startY), (i.globals.zoomEnabled || i.globals.selectionEnabled) && s.selectionDrawn({\n              context: s,\n              zoomtype: n\n            })), i.globals.zoomEnabled && s.hideSelectionRect(this.selectionRect), s.dragged = !1, s.w.globals.mousedown = !1;\n          }\n\n          this.makeSelectionRectDraggable();\n        }\n      }\n    }, {\n      key: \"makeSelectionRectDraggable\",\n      value: function value() {\n        var t = this.w;\n\n        if (this.selectionRect) {\n          var e = this.selectionRect.node.getBoundingClientRect();\n          e.width > 0 && e.height > 0 && this.slDraggableRect.selectize().resize({\n            constraint: {\n              minX: 0,\n              minY: 0,\n              maxX: t.globals.gridWidth,\n              maxY: t.globals.gridHeight\n            }\n          }).on(\"resizing\", this.selectionDragging.bind(this, \"resizing\"));\n        }\n      }\n    }, {\n      key: \"preselectedSelection\",\n      value: function value() {\n        var t = this.w,\n            e = this.xyRatios;\n        if (!t.globals.zoomEnabled) if (void 0 !== t.globals.selection && null !== t.globals.selection) this.drawSelectionRect(t.globals.selection);else if (void 0 !== t.config.chart.selection.xaxis.min && void 0 !== t.config.chart.selection.xaxis.max) {\n          var i = (t.config.chart.selection.xaxis.min - t.globals.minX) / e.xRatio,\n              s = {\n            x: i,\n            y: 0,\n            width: t.globals.gridWidth - (t.globals.maxX - t.config.chart.selection.xaxis.max) / e.xRatio - i,\n            height: t.globals.gridHeight,\n            translateX: 0,\n            translateY: 0,\n            selectionEnabled: !0\n          };\n          this.drawSelectionRect(s), this.makeSelectionRectDraggable(), \"function\" == typeof t.config.chart.events.selection && t.config.chart.events.selection(this.ctx, {\n            xaxis: {\n              min: t.config.chart.selection.xaxis.min,\n              max: t.config.chart.selection.xaxis.max\n            },\n            yaxis: {}\n          });\n        }\n      }\n    }, {\n      key: \"drawSelectionRect\",\n      value: function value(t) {\n        var e = t.x,\n            i = t.y,\n            s = t.width,\n            a = t.height,\n            n = t.translateX,\n            r = t.translateY,\n            o = this.w,\n            l = this.zoomRect,\n            h = this.selectionRect;\n\n        if (this.dragged || null !== o.globals.selection) {\n          var c = {\n            transform: \"translate(\" + n + \", \" + r + \")\"\n          };\n          o.globals.zoomEnabled && this.dragged && (l.attr({\n            x: e,\n            y: i,\n            width: s,\n            height: a,\n            fill: o.config.chart.zoom.zoomedArea.fill.color,\n            \"fill-opacity\": o.config.chart.zoom.zoomedArea.fill.opacity,\n            stroke: o.config.chart.zoom.zoomedArea.stroke.color,\n            \"stroke-width\": o.config.chart.zoom.zoomedArea.stroke.width,\n            \"stroke-opacity\": o.config.chart.zoom.zoomedArea.stroke.opacity\n          }), f.setAttrs(l.node, c)), o.globals.selectionEnabled && (h.attr({\n            x: e,\n            y: i,\n            width: s > 0 ? s : 0,\n            height: a > 0 ? a : 0,\n            fill: o.config.chart.selection.fill.color,\n            \"fill-opacity\": o.config.chart.selection.fill.opacity,\n            stroke: o.config.chart.selection.stroke.color,\n            \"stroke-width\": o.config.chart.selection.stroke.width,\n            \"stroke-dasharray\": o.config.chart.selection.stroke.dashArray,\n            \"stroke-opacity\": o.config.chart.selection.stroke.opacity\n          }), f.setAttrs(h.node, c));\n        }\n      }\n    }, {\n      key: \"hideSelectionRect\",\n      value: function value(t) {\n        t && t.attr({\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        });\n      }\n    }, {\n      key: \"selectionDrawing\",\n      value: function value(t) {\n        var e = t.context,\n            i = t.zoomtype,\n            s = this.w,\n            a = e,\n            n = this.gridRect.getBoundingClientRect(),\n            r = a.startX - 1,\n            o = a.startY,\n            l = a.clientX - n.left - r,\n            h = a.clientY - n.top - o,\n            c = 0,\n            d = 0,\n            u = {};\n        return (Math.abs(l + r) > s.globals.gridWidth || a.clientX - n.left < 0) && (a.hideSelectionRect(this.zoomRect), a.dragged = !1, a.w.globals.mousedown = !1), r > a.clientX - n.left && (c = -(l = Math.abs(l))), o > a.clientY - n.top && (d = -(h = Math.abs(h))), u = \"x\" === i ? {\n          x: r,\n          y: 0,\n          width: l,\n          height: s.globals.gridHeight,\n          translateX: c,\n          translateY: 0\n        } : \"y\" === i ? {\n          x: 0,\n          y: o,\n          width: s.globals.gridWidth,\n          height: h,\n          translateX: 0,\n          translateY: d\n        } : {\n          x: r,\n          y: o,\n          width: l,\n          height: h,\n          translateX: c,\n          translateY: d\n        }, a.drawSelectionRect(u), a.selectionDragging(\"resizing\"), u;\n      }\n    }, {\n      key: \"selectionDragging\",\n      value: function value(t, e) {\n        var i = this,\n            s = this.w,\n            a = this.xyRatios,\n            n = this.selectionRect,\n            r = 0;\n        \"resizing\" === t && (r = 30), \"function\" == typeof s.config.chart.events.selection && s.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function () {\n          var t = i.gridRect.getBoundingClientRect(),\n              e = n.node.getBoundingClientRect(),\n              r = s.globals.xAxisScale.niceMin + (e.left - t.left) * a.xRatio,\n              o = s.globals.xAxisScale.niceMin + (e.right - t.left) * a.xRatio,\n              l = s.globals.yAxisScale[0].niceMin + (t.bottom - e.bottom) * a.yRatio[0],\n              h = s.globals.yAxisScale[0].niceMax - (e.top - t.top) * a.yRatio[0];\n          s.config.chart.events.selection(i.ctx, {\n            xaxis: {\n              min: r,\n              max: o\n            },\n            yaxis: {\n              min: l,\n              max: h\n            }\n          });\n        }, r));\n      }\n    }, {\n      key: \"selectionDrawn\",\n      value: function value(t) {\n        var e = t.context,\n            i = t.zoomtype,\n            s = this.w,\n            a = e,\n            n = this.xyRatios,\n            r = this.ctx.toolbar;\n\n        if (a.startX > a.endX) {\n          var o = a.startX;\n          a.startX = a.endX, a.endX = o;\n        }\n\n        if (a.startY > a.endY) {\n          var l = a.startY;\n          a.startY = a.endY, a.endY = l;\n        }\n\n        var h = s.globals.xAxisScale.niceMin + a.startX * n.xRatio,\n            c = s.globals.xAxisScale.niceMin + a.endX * n.xRatio,\n            u = [],\n            g = [];\n        if (s.config.yaxis.forEach(function (t, e) {\n          u.push(Math.floor(s.globals.yAxisScale[e].niceMax - n.yRatio[e] * a.startY)), g.push(Math.floor(s.globals.yAxisScale[e].niceMax - n.yRatio[e] * a.endY));\n        }), a.dragged && (a.dragX > 10 || a.dragY > 10) && h !== c) if (s.globals.zoomEnabled) {\n          var f = d.clone(s.config.yaxis);\n          s.globals.zoomed || (s.globals.lastXAxis = d.clone(s.config.xaxis), s.globals.lastYAxis = d.clone(s.config.yaxis));\n          var p = {\n            min: h,\n            max: c\n          };\n\n          if (\"xy\" !== i && \"y\" !== i || f.forEach(function (t, e) {\n            f[e].min = g[e], f[e].max = u[e];\n          }), s.config.chart.zoom.autoScaleYaxis) {\n            var x = new B(a.ctx);\n            f = x.autoScaleY(a.ctx, {\n              xaxis: p\n            });\n          }\n\n          if (r) {\n            var b = r.getBeforeZoomRange(p, f);\n            b && (p = b.xaxis ? b.xaxis : p, f = b.yaxis ? b.yaxe : f);\n          }\n\n          a.ctx._updateOptions({\n            xaxis: p,\n            yaxis: f\n          }, !1, a.w.config.chart.animations.dynamicAnimation.enabled), \"function\" == typeof s.config.chart.events.zoomed && r.zoomCallback(p, f), s.globals.zoomed = !0;\n        } else if (s.globals.selectionEnabled) {\n          var m,\n              v = null;\n          m = {\n            min: h,\n            max: c\n          }, \"xy\" !== i && \"y\" !== i || (v = d.clone(s.config.yaxis)).forEach(function (t, e) {\n            v[e].min = g[e], v[e].max = u[e];\n          }), s.globals.selection = a.selection, \"function\" == typeof s.config.chart.events.selection && s.config.chart.events.selection(a.ctx, {\n            xaxis: m,\n            yaxis: v\n          });\n        }\n      }\n    }, {\n      key: \"panDragging\",\n      value: function value(t) {\n        var e,\n            i = t.context,\n            s = (t.zoomtype, this.w),\n            a = i;\n\n        if (void 0 !== s.globals.lastClientPosition.x) {\n          var n = s.globals.lastClientPosition.x - a.clientX,\n              r = s.globals.lastClientPosition.y - a.clientY;\n          Math.abs(n) > Math.abs(r) && n > 0 ? e = \"left\" : Math.abs(n) > Math.abs(r) && n < 0 ? e = \"right\" : Math.abs(r) > Math.abs(n) && r > 0 ? e = \"up\" : Math.abs(r) > Math.abs(n) && r < 0 && (e = \"down\");\n        }\n\n        s.globals.lastClientPosition = {\n          x: a.clientX,\n          y: a.clientY\n        };\n        var o = s.globals.minX,\n            l = s.globals.maxX;\n        this.panScrolled(e, o, l);\n      }\n    }, {\n      key: \"panScrolled\",\n      value: function value(t, e, i) {\n        var s = this.w,\n            a = this.xyRatios,\n            n = d.clone(s.config.yaxis);\n        \"left\" === t ? (e = s.globals.minX + s.globals.gridWidth / 15 * a.xRatio, i = s.globals.maxX + s.globals.gridWidth / 15 * a.xRatio) : \"right\" === t && (e = s.globals.minX - s.globals.gridWidth / 15 * a.xRatio, i = s.globals.maxX - s.globals.gridWidth / 15 * a.xRatio), (e < s.globals.initialminX || i > s.globals.initialmaxX) && (e = s.globals.minX, i = s.globals.maxX);\n        var r = {\n          min: e,\n          max: i\n        };\n        s.config.chart.zoom.autoScaleYaxis && (n = new B(me.ctx).autoScaleY(me.ctx, {\n          xaxis: r\n        }));\n        this.ctx._updateOptions({\n          xaxis: {\n            min: e,\n            max: i\n          },\n          yaxis: n\n        }, !1, !1), \"function\" == typeof s.config.chart.events.scrolled && s.config.chart.events.scrolled(this.ctx, {\n          xaxis: {\n            min: e,\n            max: i\n          }\n        });\n      }\n    }]), i;\n  }(),\n      vt = function () {\n    function t(i) {\n      e(this, t), this.ctx = i, this.w = i.w;\n    }\n\n    return s(t, [{\n      key: \"draw\",\n      value: function value() {\n        this.drawTitleSubtitle(\"title\"), this.drawTitleSubtitle(\"subtitle\");\n      }\n    }, {\n      key: \"drawTitleSubtitle\",\n      value: function value(t) {\n        var e = this.w,\n            i = \"title\" === t ? e.config.title : e.config.subtitle,\n            s = e.globals.svgWidth / 2,\n            a = i.offsetY,\n            n = \"middle\";\n\n        if (\"left\" === i.align ? (s = 10, n = \"start\") : \"right\" === i.align && (s = e.globals.svgWidth - 10, n = \"end\"), s += i.offsetX, a = a + parseInt(i.style.fontSize) + 2, void 0 !== i.text) {\n          var r = new f(this.ctx).drawText({\n            x: s,\n            y: a,\n            text: i.text,\n            textAnchor: n,\n            fontSize: i.style.fontSize,\n            fontFamily: i.style.fontFamily,\n            foreColor: i.style.color,\n            opacity: 1\n          });\n          r.node.setAttribute(\"class\", \"apexcharts-\".concat(t, \"-text\")), e.globals.dom.Paper.add(r);\n        }\n      }\n    }]), t;\n  }();\n\n  st = \"undefined\" != typeof window ? window : void 0, _at = function at(e, i) {\n    var s = (void 0 !== this ? this : e).SVG = function (t) {\n      if (s.supported) return t = new s.Doc(t), s.parser.draw || s.prepare(), t;\n    };\n\n    if (s.ns = \"http://www.w3.org/2000/svg\", s.xmlns = \"http://www.w3.org/2000/xmlns/\", s.xlink = \"http://www.w3.org/1999/xlink\", s.svgjs = \"http://svgjs.com/svgjs\", s.supported = !0, !s.supported) return !1;\n    s.did = 1e3, s.eid = function (t) {\n      return \"Svgjs\" + d(t) + s.did++;\n    }, s.create = function (t) {\n      var e = i.createElementNS(this.ns, t);\n      return e.setAttribute(\"id\", this.eid(t)), e;\n    }, s.extend = function () {\n      var t, e, i, a;\n\n      for (e = (t = [].slice.call(arguments)).pop(), a = t.length - 1; a >= 0; a--) {\n        if (t[a]) for (i in e) {\n          t[a].prototype[i] = e[i];\n        }\n      }\n\n      s.Set && s.Set.inherit && s.Set.inherit();\n    }, s.invent = function (t) {\n      var e = \"function\" == typeof t.create ? t.create : function () {\n        this.constructor.call(this, s.create(t.create));\n      };\n      return t.inherit && (e.prototype = new t.inherit()), t.extend && s.extend(e, t.extend), t.construct && s.extend(t.parent || s.Container, t.construct), e;\n    }, s.adopt = function (t) {\n      return t ? t.instance ? t.instance : ((i = \"svg\" == t.nodeName ? t.parentNode instanceof e.SVGElement ? new s.Nested() : new s.Doc() : \"linearGradient\" == t.nodeName ? new s.Gradient(\"linear\") : \"radialGradient\" == t.nodeName ? new s.Gradient(\"radial\") : s[d(t.nodeName)] ? new s[d(t.nodeName)]() : new s.Element(t)).type = t.nodeName, i.node = t, t.instance = i, i instanceof s.Doc && i.namespace().defs(), i.setData(JSON.parse(t.getAttribute(\"svgjs:data\")) || {}), i) : null;\n      var i;\n    }, s.prepare = function () {\n      var t = i.getElementsByTagName(\"body\")[0],\n          e = (t ? new s.Doc(t) : s.adopt(i.documentElement).nested()).size(2, 0);\n      s.parser = {\n        body: t || i.documentElement,\n        draw: e.style(\"opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden\").node,\n        poly: e.polyline().node,\n        path: e.path().node,\n        \"native\": s.create(\"svg\")\n      };\n    }, s.parser = {\n      \"native\": s.create(\"svg\")\n    }, i.addEventListener(\"DOMContentLoaded\", function () {\n      s.parser.draw || s.prepare();\n    }, !1), s.regex = {\n      numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i,\n      hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n      rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/,\n      reference: /#([a-z0-9\\-_]+)/i,\n      transforms: /\\)\\s*,?\\s*/,\n      whitespace: /\\s/g,\n      isHex: /^#[a-f0-9]{3,6}$/i,\n      isRgb: /^rgb\\(/,\n      isCss: /[^:]+:[^;]+;?/,\n      isBlank: /^(\\s+)?$/,\n      isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n      isPercent: /^-?[\\d\\.]+%$/,\n      isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i,\n      delimiter: /[\\s,]+/,\n      hyphen: /([^e])\\-/gi,\n      pathLetters: /[MLHVCSQTAZ]/gi,\n      isPathLetter: /[MLHVCSQTAZ]/i,\n      numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi,\n      dots: /\\./g\n    }, s.utils = {\n      map: function map(t, e) {\n        var i,\n            s = t.length,\n            a = [];\n\n        for (i = 0; i < s; i++) {\n          a.push(e(t[i]));\n        }\n\n        return a;\n      },\n      filter: function filter(t, e) {\n        var i,\n            s = t.length,\n            a = [];\n\n        for (i = 0; i < s; i++) {\n          e(t[i]) && a.push(t[i]);\n        }\n\n        return a;\n      },\n      radians: function radians(t) {\n        return t % 360 * Math.PI / 180;\n      },\n      degrees: function degrees(t) {\n        return 180 * t / Math.PI % 360;\n      },\n      filterSVGElements: function filterSVGElements(t) {\n        return this.filter(t, function (t) {\n          return t instanceof e.SVGElement;\n        });\n      }\n    }, s.defaults = {\n      attrs: {\n        \"fill-opacity\": 1,\n        \"stroke-opacity\": 1,\n        \"stroke-width\": 0,\n        \"stroke-linejoin\": \"miter\",\n        \"stroke-linecap\": \"butt\",\n        fill: \"#000000\",\n        stroke: \"#000000\",\n        opacity: 1,\n        x: 0,\n        y: 0,\n        cx: 0,\n        cy: 0,\n        width: 0,\n        height: 0,\n        r: 0,\n        rx: 0,\n        ry: 0,\n        offset: 0,\n        \"stop-opacity\": 1,\n        \"stop-color\": \"#000000\",\n        \"font-size\": 16,\n        \"font-family\": \"Helvetica, Arial, sans-serif\",\n        \"text-anchor\": \"start\"\n      }\n    }, s.Color = function (e) {\n      var i, a;\n      (this.r = 0, this.g = 0, this.b = 0, e) && (\"string\" == typeof e ? s.regex.isRgb.test(e) ? (i = s.regex.rgb.exec(e.replace(s.regex.whitespace, \"\")), this.r = parseInt(i[1]), this.g = parseInt(i[2]), this.b = parseInt(i[3])) : s.regex.isHex.test(e) && (i = s.regex.hex.exec(4 == (a = e).length ? [\"#\", a.substring(1, 2), a.substring(1, 2), a.substring(2, 3), a.substring(2, 3), a.substring(3, 4), a.substring(3, 4)].join(\"\") : a), this.r = parseInt(i[1], 16), this.g = parseInt(i[2], 16), this.b = parseInt(i[3], 16)) : \"object\" === t(e) && (this.r = e.r, this.g = e.g, this.b = e.b));\n    }, s.extend(s.Color, {\n      toString: function toString() {\n        return this.toHex();\n      },\n      toHex: function toHex() {\n        return \"#\" + u(this.r) + u(this.g) + u(this.b);\n      },\n      toRgb: function toRgb() {\n        return \"rgb(\" + [this.r, this.g, this.b].join() + \")\";\n      },\n      brightness: function brightness() {\n        return this.r / 255 * .3 + this.g / 255 * .59 + this.b / 255 * .11;\n      },\n      morph: function morph(t) {\n        return this.destination = new s.Color(t), this;\n      },\n      at: function at(t) {\n        return this.destination ? (t = t < 0 ? 0 : t > 1 ? 1 : t, new s.Color({\n          r: ~~(this.r + (this.destination.r - this.r) * t),\n          g: ~~(this.g + (this.destination.g - this.g) * t),\n          b: ~~(this.b + (this.destination.b - this.b) * t)\n        })) : this;\n      }\n    }), s.Color.test = function (t) {\n      return t += \"\", s.regex.isHex.test(t) || s.regex.isRgb.test(t);\n    }, s.Color.isRgb = function (t) {\n      return t && \"number\" == typeof t.r && \"number\" == typeof t.g && \"number\" == typeof t.b;\n    }, s.Color.isColor = function (t) {\n      return s.Color.isRgb(t) || s.Color.test(t);\n    }, s.Array = function (t, e) {\n      0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()), this.value = this.parse(t);\n    }, s.extend(s.Array, {\n      morph: function morph(t) {\n        if (this.destination = this.parse(t), this.value.length != this.destination.length) {\n          for (var e = this.value[this.value.length - 1], i = this.destination[this.destination.length - 1]; this.value.length > this.destination.length;) {\n            this.destination.push(i);\n          }\n\n          for (; this.value.length < this.destination.length;) {\n            this.value.push(e);\n          }\n        }\n\n        return this;\n      },\n      settle: function settle() {\n        for (var t = 0, e = this.value.length, i = []; t < e; t++) {\n          -1 == i.indexOf(this.value[t]) && i.push(this.value[t]);\n        }\n\n        return this.value = i;\n      },\n      at: function at(t) {\n        if (!this.destination) return this;\n\n        for (var e = 0, i = this.value.length, a = []; e < i; e++) {\n          a.push(this.value[e] + (this.destination[e] - this.value[e]) * t);\n        }\n\n        return new s.Array(a);\n      },\n      toString: function toString() {\n        return this.value.join(\" \");\n      },\n      valueOf: function valueOf() {\n        return this.value;\n      },\n      parse: function parse(t) {\n        return t = t.valueOf(), Array.isArray(t) ? t : this.split(t);\n      },\n      split: function split(t) {\n        return t.trim().split(s.regex.delimiter).map(parseFloat);\n      },\n      reverse: function reverse() {\n        return this.value.reverse(), this;\n      },\n      clone: function clone() {\n        var t = new this.constructor();\n        return t.value = function t(e) {\n          var i = e.slice(0);\n\n          for (var s = i.length; s--;) {\n            Array.isArray(i[s]) && (i[s] = t(i[s]));\n          }\n\n          return i;\n        }(this.value), t;\n      }\n    }), s.PointArray = function (t, e) {\n      s.Array.call(this, t, e || [[0, 0]]);\n    }, s.PointArray.prototype = new s.Array(), s.PointArray.prototype.constructor = s.PointArray, s.extend(s.PointArray, {\n      toString: function toString() {\n        for (var t = 0, e = this.value.length, i = []; t < e; t++) {\n          i.push(this.value[t].join(\",\"));\n        }\n\n        return i.join(\" \");\n      },\n      toLine: function toLine() {\n        return {\n          x1: this.value[0][0],\n          y1: this.value[0][1],\n          x2: this.value[1][0],\n          y2: this.value[1][1]\n        };\n      },\n      at: function at(t) {\n        if (!this.destination) return this;\n\n        for (var e = 0, i = this.value.length, a = []; e < i; e++) {\n          a.push([this.value[e][0] + (this.destination[e][0] - this.value[e][0]) * t, this.value[e][1] + (this.destination[e][1] - this.value[e][1]) * t]);\n        }\n\n        return new s.PointArray(a);\n      },\n      parse: function parse(t) {\n        var e = [];\n\n        if (t = t.valueOf(), Array.isArray(t)) {\n          if (Array.isArray(t[0])) return t.map(function (t) {\n            return t.slice();\n          });\n          if (null != t[0].x) return t.map(function (t) {\n            return [t.x, t.y];\n          });\n        } else t = t.trim().split(s.regex.delimiter).map(parseFloat);\n\n        t.length % 2 != 0 && t.pop();\n\n        for (var i = 0, a = t.length; i < a; i += 2) {\n          e.push([t[i], t[i + 1]]);\n        }\n\n        return e;\n      },\n      move: function move(t, e) {\n        var i = this.bbox();\n        if (t -= i.x, e -= i.y, !isNaN(t) && !isNaN(e)) for (var s = this.value.length - 1; s >= 0; s--) {\n          this.value[s] = [this.value[s][0] + t, this.value[s][1] + e];\n        }\n        return this;\n      },\n      size: function size(t, e) {\n        var i,\n            s = this.bbox();\n\n        for (i = this.value.length - 1; i >= 0; i--) {\n          s.width && (this.value[i][0] = (this.value[i][0] - s.x) * t / s.width + s.x), s.height && (this.value[i][1] = (this.value[i][1] - s.y) * e / s.height + s.y);\n        }\n\n        return this;\n      },\n      bbox: function bbox() {\n        return s.parser.draw || s.prepare(), s.parser.poly.setAttribute(\"points\", this.toString()), s.parser.poly.getBBox();\n      }\n    });\n\n    for (var a = {\n      M: function M(t, e, i) {\n        return e.x = i.x = t[0], e.y = i.y = t[1], [\"M\", e.x, e.y];\n      },\n      L: function L(t, e) {\n        return e.x = t[0], e.y = t[1], [\"L\", t[0], t[1]];\n      },\n      H: function H(t, e) {\n        return e.x = t[0], [\"H\", t[0]];\n      },\n      V: function V(t, e) {\n        return e.y = t[0], [\"V\", t[0]];\n      },\n      C: function C(t, e) {\n        return e.x = t[4], e.y = t[5], [\"C\", t[0], t[1], t[2], t[3], t[4], t[5]];\n      },\n      S: function S(t, e) {\n        return e.x = t[2], e.y = t[3], [\"S\", t[0], t[1], t[2], t[3]];\n      },\n      Q: function Q(t, e) {\n        return e.x = t[2], e.y = t[3], [\"Q\", t[0], t[1], t[2], t[3]];\n      },\n      T: function T(t, e) {\n        return e.x = t[0], e.y = t[1], [\"T\", t[0], t[1]];\n      },\n      Z: function Z(t, e, i) {\n        return e.x = i.x, e.y = i.y, [\"Z\"];\n      },\n      A: function A(t, e) {\n        return e.x = t[5], e.y = t[6], [\"A\", t[0], t[1], t[2], t[3], t[4], t[5], t[6]];\n      }\n    }, n = \"mlhvqtcsaz\".split(\"\"), r = 0, o = n.length; r < o; ++r) {\n      a[n[r]] = function (t) {\n        return function (e, i, s) {\n          if (\"H\" == t) e[0] = e[0] + i.x;else if (\"V\" == t) e[0] = e[0] + i.y;else if (\"A\" == t) e[5] = e[5] + i.x, e[6] = e[6] + i.y;else for (var n = 0, r = e.length; n < r; ++n) {\n            e[n] = e[n] + (n % 2 ? i.y : i.x);\n          }\n          return a[t](e, i, s);\n        };\n      }(n[r].toUpperCase());\n    }\n\n    s.PathArray = function (t, e) {\n      s.Array.call(this, t, e || [[\"M\", 0, 0]]);\n    }, s.PathArray.prototype = new s.Array(), s.PathArray.prototype.constructor = s.PathArray, s.extend(s.PathArray, {\n      toString: function toString() {\n        return function (t) {\n          for (var e = 0, i = t.length, s = \"\"; e < i; e++) {\n            s += t[e][0], null != t[e][1] && (s += t[e][1], null != t[e][2] && (s += \" \", s += t[e][2], null != t[e][3] && (s += \" \", s += t[e][3], s += \" \", s += t[e][4], null != t[e][5] && (s += \" \", s += t[e][5], s += \" \", s += t[e][6], null != t[e][7] && (s += \" \", s += t[e][7])))));\n          }\n\n          return s + \" \";\n        }(this.value);\n      },\n      move: function move(t, e) {\n        var i = this.bbox();\n        if (t -= i.x, e -= i.y, !isNaN(t) && !isNaN(e)) for (var s, a = this.value.length - 1; a >= 0; a--) {\n          \"M\" == (s = this.value[a][0]) || \"L\" == s || \"T\" == s ? (this.value[a][1] += t, this.value[a][2] += e) : \"H\" == s ? this.value[a][1] += t : \"V\" == s ? this.value[a][1] += e : \"C\" == s || \"S\" == s || \"Q\" == s ? (this.value[a][1] += t, this.value[a][2] += e, this.value[a][3] += t, this.value[a][4] += e, \"C\" == s && (this.value[a][5] += t, this.value[a][6] += e)) : \"A\" == s && (this.value[a][6] += t, this.value[a][7] += e);\n        }\n        return this;\n      },\n      size: function size(t, e) {\n        var i,\n            s,\n            a = this.bbox();\n\n        for (i = this.value.length - 1; i >= 0; i--) {\n          \"M\" == (s = this.value[i][0]) || \"L\" == s || \"T\" == s ? (this.value[i][1] = (this.value[i][1] - a.x) * t / a.width + a.x, this.value[i][2] = (this.value[i][2] - a.y) * e / a.height + a.y) : \"H\" == s ? this.value[i][1] = (this.value[i][1] - a.x) * t / a.width + a.x : \"V\" == s ? this.value[i][1] = (this.value[i][1] - a.y) * e / a.height + a.y : \"C\" == s || \"S\" == s || \"Q\" == s ? (this.value[i][1] = (this.value[i][1] - a.x) * t / a.width + a.x, this.value[i][2] = (this.value[i][2] - a.y) * e / a.height + a.y, this.value[i][3] = (this.value[i][3] - a.x) * t / a.width + a.x, this.value[i][4] = (this.value[i][4] - a.y) * e / a.height + a.y, \"C\" == s && (this.value[i][5] = (this.value[i][5] - a.x) * t / a.width + a.x, this.value[i][6] = (this.value[i][6] - a.y) * e / a.height + a.y)) : \"A\" == s && (this.value[i][1] = this.value[i][1] * t / a.width, this.value[i][2] = this.value[i][2] * e / a.height, this.value[i][6] = (this.value[i][6] - a.x) * t / a.width + a.x, this.value[i][7] = (this.value[i][7] - a.y) * e / a.height + a.y);\n        }\n\n        return this;\n      },\n      equalCommands: function equalCommands(t) {\n        var e, i, a;\n\n        for (t = new s.PathArray(t), a = this.value.length === t.value.length, e = 0, i = this.value.length; a && e < i; e++) {\n          a = this.value[e][0] === t.value[e][0];\n        }\n\n        return a;\n      },\n      morph: function morph(t) {\n        return t = new s.PathArray(t), this.equalCommands(t) ? this.destination = t : this.destination = null, this;\n      },\n      at: function at(t) {\n        if (!this.destination) return this;\n        var e,\n            i,\n            a,\n            n,\n            r = this.value,\n            o = this.destination.value,\n            l = [],\n            h = new s.PathArray();\n\n        for (e = 0, i = r.length; e < i; e++) {\n          for (l[e] = [r[e][0]], a = 1, n = r[e].length; a < n; a++) {\n            l[e][a] = r[e][a] + (o[e][a] - r[e][a]) * t;\n          }\n\n          \"A\" === l[e][0] && (l[e][4] = +(0 != l[e][4]), l[e][5] = +(0 != l[e][5]));\n        }\n\n        return h.value = l, h;\n      },\n      parse: function parse(t) {\n        if (t instanceof s.PathArray) return t.valueOf();\n        var e,\n            i = {\n          M: 2,\n          L: 2,\n          H: 1,\n          V: 1,\n          C: 6,\n          S: 4,\n          Q: 4,\n          T: 2,\n          A: 7,\n          Z: 0\n        };\n        t = \"string\" == typeof t ? t.replace(s.regex.numbersWithDots, h).replace(s.regex.pathLetters, \" $& \").replace(s.regex.hyphen, \"$1 -\").trim().split(s.regex.delimiter) : t.reduce(function (t, e) {\n          return [].concat.call(t, e);\n        }, []);\n        var n = [],\n            r = new s.Point(),\n            o = new s.Point(),\n            l = 0,\n            c = t.length;\n\n        do {\n          s.regex.isPathLetter.test(t[l]) ? (e = t[l], ++l) : \"M\" == e ? e = \"L\" : \"m\" == e && (e = \"l\"), n.push(a[e].call(null, t.slice(l, l += i[e.toUpperCase()]).map(parseFloat), r, o));\n        } while (c > l);\n\n        return n;\n      },\n      bbox: function bbox() {\n        return s.parser.draw || s.prepare(), s.parser.path.setAttribute(\"d\", this.toString()), s.parser.path.getBBox();\n      }\n    }), s.Number = s.invent({\n      create: function create(t, e) {\n        this.value = 0, this.unit = e || \"\", \"number\" == typeof t ? this.value = isNaN(t) ? 0 : isFinite(t) ? t : t < 0 ? -3.4e38 : 3.4e38 : \"string\" == typeof t ? (e = t.match(s.regex.numberAndUnit)) && (this.value = parseFloat(e[1]), \"%\" == e[5] ? this.value /= 100 : \"s\" == e[5] && (this.value *= 1e3), this.unit = e[5]) : t instanceof s.Number && (this.value = t.valueOf(), this.unit = t.unit);\n      },\n      extend: {\n        toString: function toString() {\n          return (\"%\" == this.unit ? ~~(1e8 * this.value) / 1e6 : \"s\" == this.unit ? this.value / 1e3 : this.value) + this.unit;\n        },\n        toJSON: function toJSON() {\n          return this.toString();\n        },\n        valueOf: function valueOf() {\n          return this.value;\n        },\n        plus: function plus(t) {\n          return t = new s.Number(t), new s.Number(this + t, this.unit || t.unit);\n        },\n        minus: function minus(t) {\n          return t = new s.Number(t), new s.Number(this - t, this.unit || t.unit);\n        },\n        times: function times(t) {\n          return t = new s.Number(t), new s.Number(this * t, this.unit || t.unit);\n        },\n        divide: function divide(t) {\n          return t = new s.Number(t), new s.Number(this / t, this.unit || t.unit);\n        },\n        to: function to(t) {\n          var e = new s.Number(this);\n          return \"string\" == typeof t && (e.unit = t), e;\n        },\n        morph: function morph(t) {\n          return this.destination = new s.Number(t), t.relative && (this.destination.value += this.value), this;\n        },\n        at: function at(t) {\n          return this.destination ? new s.Number(this.destination).minus(this).times(t).plus(this) : this;\n        }\n      }\n    }), s.Element = s.invent({\n      create: function create(t) {\n        this._stroke = s.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t) && (this.type = t.nodeName, this.node.instance = this, this._stroke = t.getAttribute(\"stroke\") || this._stroke);\n      },\n      extend: {\n        x: function x(t) {\n          return this.attr(\"x\", t);\n        },\n        y: function y(t) {\n          return this.attr(\"y\", t);\n        },\n        cx: function cx(t) {\n          return null == t ? this.x() + this.width() / 2 : this.x(t - this.width() / 2);\n        },\n        cy: function cy(t) {\n          return null == t ? this.y() + this.height() / 2 : this.y(t - this.height() / 2);\n        },\n        move: function move(t, e) {\n          return this.x(t).y(e);\n        },\n        center: function center(t, e) {\n          return this.cx(t).cy(e);\n        },\n        width: function width(t) {\n          return this.attr(\"width\", t);\n        },\n        height: function height(t) {\n          return this.attr(\"height\", t);\n        },\n        size: function size(t, e) {\n          var i = g(this, t, e);\n          return this.width(new s.Number(i.width)).height(new s.Number(i.height));\n        },\n        clone: function clone(t) {\n          this.writeDataToDom();\n          var e = b(this.node.cloneNode(!0));\n          return t ? t.add(e) : this.after(e), e;\n        },\n        remove: function remove() {\n          return this.parent() && this.parent().removeElement(this), this;\n        },\n        replace: function replace(t) {\n          return this.after(t).remove(), t;\n        },\n        addTo: function addTo(t) {\n          return t.put(this);\n        },\n        putIn: function putIn(t) {\n          return t.add(this);\n        },\n        id: function id(t) {\n          return this.attr(\"id\", t);\n        },\n        inside: function inside(t, e) {\n          var i = this.bbox();\n          return t > i.x && e > i.y && t < i.x + i.width && e < i.y + i.height;\n        },\n        show: function show() {\n          return this.style(\"display\", \"\");\n        },\n        hide: function hide() {\n          return this.style(\"display\", \"none\");\n        },\n        visible: function visible() {\n          return \"none\" != this.style(\"display\");\n        },\n        toString: function toString() {\n          return this.attr(\"id\");\n        },\n        classes: function classes() {\n          var t = this.attr(\"class\");\n          return null == t ? [] : t.trim().split(s.regex.delimiter);\n        },\n        hasClass: function hasClass(t) {\n          return -1 != this.classes().indexOf(t);\n        },\n        addClass: function addClass(t) {\n          if (!this.hasClass(t)) {\n            var e = this.classes();\n            e.push(t), this.attr(\"class\", e.join(\" \"));\n          }\n\n          return this;\n        },\n        removeClass: function removeClass(t) {\n          return this.hasClass(t) && this.attr(\"class\", this.classes().filter(function (e) {\n            return e != t;\n          }).join(\" \")), this;\n        },\n        toggleClass: function toggleClass(t) {\n          return this.hasClass(t) ? this.removeClass(t) : this.addClass(t);\n        },\n        reference: function reference(t) {\n          return s.get(this.attr(t));\n        },\n        parent: function parent(t) {\n          var i = this;\n          if (!i.node.parentNode) return null;\n          if (i = s.adopt(i.node.parentNode), !t) return i;\n\n          for (; i && i.node instanceof e.SVGElement;) {\n            if (\"string\" == typeof t ? i.matches(t) : i instanceof t) return i;\n            if (!i.node.parentNode || \"#document\" == i.node.parentNode.nodeName) return null;\n            i = s.adopt(i.node.parentNode);\n          }\n        },\n        doc: function doc() {\n          return this instanceof s.Doc ? this : this.parent(s.Doc);\n        },\n        parents: function parents(t) {\n          var e = [],\n              i = this;\n\n          do {\n            if (!(i = i.parent(t)) || !i.node) break;\n            e.push(i);\n          } while (i.parent);\n\n          return e;\n        },\n        matches: function matches(t) {\n          return function (t, e) {\n            return (t.matches || t.matchesSelector || t.msMatchesSelector || t.mozMatchesSelector || t.webkitMatchesSelector || t.oMatchesSelector).call(t, e);\n          }(this.node, t);\n        },\n        \"native\": function native() {\n          return this.node;\n        },\n        svg: function svg(t) {\n          var e = i.createElement(\"svg\");\n          if (!(t && this instanceof s.Parent)) return e.appendChild(t = i.createElement(\"svg\")), this.writeDataToDom(), t.appendChild(this.node.cloneNode(!0)), e.innerHTML.replace(/^<svg>/, \"\").replace(/<\\/svg>$/, \"\");\n          e.innerHTML = \"<svg>\" + t.replace(/\\n/, \"\").replace(/<([\\w:-]+)([^<]+?)\\/>/g, \"<$1$2></$1>\") + \"</svg>\";\n\n          for (var a = 0, n = e.firstChild.childNodes.length; a < n; a++) {\n            this.node.appendChild(e.firstChild.firstChild);\n          }\n\n          return this;\n        },\n        writeDataToDom: function writeDataToDom() {\n          (this.each || this.lines) && (this.each ? this : this.lines()).each(function () {\n            this.writeDataToDom();\n          });\n          return this.node.removeAttribute(\"svgjs:data\"), Object.keys(this.dom).length && this.node.setAttribute(\"svgjs:data\", JSON.stringify(this.dom)), this;\n        },\n        setData: function setData(t) {\n          return this.dom = t, this;\n        },\n        is: function is(t) {\n          return function (t, e) {\n            return t instanceof e;\n          }(this, t);\n        }\n      }\n    }), s.easing = {\n      \"-\": function _(t) {\n        return t;\n      },\n      \"<>\": function _(t) {\n        return -Math.cos(t * Math.PI) / 2 + .5;\n      },\n      \">\": function _(t) {\n        return Math.sin(t * Math.PI / 2);\n      },\n      \"<\": function _(t) {\n        return 1 - Math.cos(t * Math.PI / 2);\n      }\n    }, s.morph = function (t) {\n      return function (e, i) {\n        return new s.MorphObj(e, i).at(t);\n      };\n    }, s.Situation = s.invent({\n      create: function create(t) {\n        this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new s.Number(t.duration).valueOf(), this.delay = new s.Number(t.delay).valueOf(), this.start = +new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t.ease, this.loop = 0, this.loops = !1, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};\n      }\n    }), s.FX = s.invent({\n      create: function create(t) {\n        this._target = t, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;\n      },\n      extend: {\n        animate: function animate(e, i, a) {\n          \"object\" === t(e) && (i = e.ease, a = e.delay, e = e.duration);\n          var n = new s.Situation({\n            duration: e || 1e3,\n            delay: a || 0,\n            ease: s.easing[i || \"-\"] || i\n          });\n          return this.queue(n), this;\n        },\n        delay: function delay(t) {\n          var e = new s.Situation({\n            duration: t,\n            delay: 0,\n            ease: s.easing[\"-\"]\n          });\n          return this.queue(e);\n        },\n        target: function target(t) {\n          return t && t instanceof s.Element ? (this._target = t, this) : this._target;\n        },\n        timeToAbsPos: function timeToAbsPos(t) {\n          return (t - this.situation.start) / (this.situation.duration / this._speed);\n        },\n        absPosToTime: function absPosToTime(t) {\n          return this.situation.duration / this._speed * t + this.situation.start;\n        },\n        startAnimFrame: function startAnimFrame() {\n          this.stopAnimFrame(), this.animationFrame = e.requestAnimationFrame(function () {\n            this.step();\n          }.bind(this));\n        },\n        stopAnimFrame: function stopAnimFrame() {\n          e.cancelAnimationFrame(this.animationFrame);\n        },\n        start: function start() {\n          return !this.active && this.situation && (this.active = !0, this.startCurrent()), this;\n        },\n        startCurrent: function startCurrent() {\n          return this.situation.start = +new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();\n        },\n        queue: function queue(t) {\n          return (\"function\" == typeof t || t instanceof s.Situation) && this.situations.push(t), this.situation || (this.situation = this.situations.shift()), this;\n        },\n        dequeue: function dequeue() {\n          return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof s.Situation ? this.start() : this.situation.call(this)), this;\n        },\n        initAnimations: function initAnimations() {\n          var t,\n              e,\n              i,\n              a = this.situation;\n          if (a.init) return this;\n\n          for (t in a.animations) {\n            for (i = this.target()[t](), Array.isArray(i) || (i = [i]), Array.isArray(a.animations[t]) || (a.animations[t] = [a.animations[t]]), e = i.length; e--;) {\n              a.animations[t][e] instanceof s.Number && (i[e] = new s.Number(i[e])), a.animations[t][e] = i[e].morph(a.animations[t][e]);\n            }\n          }\n\n          for (t in a.attrs) {\n            a.attrs[t] = new s.MorphObj(this.target().attr(t), a.attrs[t]);\n          }\n\n          for (t in a.styles) {\n            a.styles[t] = new s.MorphObj(this.target().style(t), a.styles[t]);\n          }\n\n          return a.initialTransformation = this.target().matrixify(), a.init = !0, this;\n        },\n        clearQueue: function clearQueue() {\n          return this.situations = [], this;\n        },\n        clearCurrent: function clearCurrent() {\n          return this.situation = null, this;\n        },\n        stop: function stop(t, e) {\n          var i = this.active;\n          return this.active = !1, e && this.clearQueue(), t && this.situation && (!i && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();\n        },\n        reset: function reset() {\n          if (this.situation) {\n            var t = this.situation;\n            this.stop(), this.situation = t, this.atStart();\n          }\n\n          return this;\n        },\n        finish: function finish() {\n          for (this.stop(!0, !1); this.dequeue().situation && this.stop(!0, !1);) {\n            ;\n          }\n\n          return this.clearQueue().clearCurrent(), this;\n        },\n        atStart: function atStart() {\n          return this.at(0, !0);\n        },\n        atEnd: function atEnd() {\n          return !0 === this.situation.loops && (this.situation.loops = this.situation.loop + 1), \"number\" == typeof this.situation.loops ? this.at(this.situation.loops, !0) : this.at(1, !0);\n        },\n        at: function at(t, e) {\n          var i = this.situation.duration / this._speed;\n          return this.absPos = t, e || (this.situation.reversed && (this.absPos = 1 - this.absPos), this.absPos += this.situation.loop), this.situation.start = +new Date() - this.absPos * i, this.situation.finish = this.situation.start + i, this.step(!0);\n        },\n        speed: function speed(t) {\n          return 0 === t ? this.pause() : t ? (this._speed = t, this.at(this.absPos, !0)) : this._speed;\n        },\n        loop: function loop(t, e) {\n          var i = this.last();\n          return i.loops = null == t || t, i.loop = 0, e && (i.reversing = !0), this;\n        },\n        pause: function pause() {\n          return this.paused = !0, this.stopAnimFrame(), this;\n        },\n        play: function play() {\n          return this.paused ? (this.paused = !1, this.at(this.absPos, !0)) : this;\n        },\n        reverse: function reverse(t) {\n          var e = this.last();\n          return e.reversed = void 0 === t ? !e.reversed : t, this;\n        },\n        progress: function progress(t) {\n          return t ? this.situation.ease(this.pos) : this.pos;\n        },\n        after: function after(t) {\n          var e = this.last();\n          return this.target().on(\"finished.fx\", function i(s) {\n            s.detail.situation == e && (t.call(this, e), this.off(\"finished.fx\", i));\n          }), this._callStart();\n        },\n        during: function during(t) {\n          var e = this.last(),\n              i = function i(_i2) {\n            _i2.detail.situation == e && t.call(this, _i2.detail.pos, s.morph(_i2.detail.pos), _i2.detail.eased, e);\n          };\n\n          return this.target().off(\"during.fx\", i).on(\"during.fx\", i), this.after(function () {\n            this.off(\"during.fx\", i);\n          }), this._callStart();\n        },\n        afterAll: function afterAll(t) {\n          var e = function e(i) {\n            t.call(this), this.off(\"allfinished.fx\", e);\n          };\n\n          return this.target().off(\"allfinished.fx\", e).on(\"allfinished.fx\", e), this._callStart();\n        },\n        duringAll: function duringAll(t) {\n          var e = function e(_e) {\n            t.call(this, _e.detail.pos, s.morph(_e.detail.pos), _e.detail.eased, _e.detail.situation);\n          };\n\n          return this.target().off(\"during.fx\", e).on(\"during.fx\", e), this.afterAll(function () {\n            this.off(\"during.fx\", e);\n          }), this._callStart();\n        },\n        last: function last() {\n          return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n        },\n        add: function add(t, e, i) {\n          return this.last()[i || \"animations\"][t] = e, this._callStart();\n        },\n        step: function step(t) {\n          var e, i, s;\n          (t || (this.absPos = this.timeToAbsPos(+new Date())), !1 !== this.situation.loops) ? (e = Math.max(this.absPos, 0), i = Math.floor(e), !0 === this.situation.loops || i < this.situation.loops ? (this.pos = e - i, s = this.situation.loop, this.situation.loop = i) : (this.absPos = this.situation.loops, this.pos = 1, s = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - s) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos);\n          this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);\n          var a = this.situation.ease(this.pos);\n\n          for (var n in this.situation.once) {\n            n > this.lastPos && n <= a && (this.situation.once[n].call(this.target(), this.pos, a), delete this.situation.once[n]);\n          }\n\n          return this.active && this.target().fire(\"during\", {\n            pos: this.pos,\n            eased: a,\n            fx: this,\n            situation: this.situation\n          }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire(\"finished\", {\n            fx: this,\n            situation: this.situation\n          }), this.situations.length || (this.target().fire(\"allfinished\"), this.situations.length || (this.target().off(\".fx\"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = a, this) : this;\n        },\n        eachAt: function eachAt() {\n          var t,\n              e,\n              i,\n              a = this,\n              n = this.target(),\n              r = this.situation;\n\n          for (t in r.animations) {\n            i = [].concat(r.animations[t]).map(function (t) {\n              return \"string\" != typeof t && t.at ? t.at(r.ease(a.pos), a.pos) : t;\n            }), n[t].apply(n, i);\n          }\n\n          for (t in r.attrs) {\n            i = [t].concat(r.attrs[t]).map(function (t) {\n              return \"string\" != typeof t && t.at ? t.at(r.ease(a.pos), a.pos) : t;\n            }), n.attr.apply(n, i);\n          }\n\n          for (t in r.styles) {\n            i = [t].concat(r.styles[t]).map(function (t) {\n              return \"string\" != typeof t && t.at ? t.at(r.ease(a.pos), a.pos) : t;\n            }), n.style.apply(n, i);\n          }\n\n          if (r.transforms.length) {\n            for (i = r.initialTransformation, t = 0, e = r.transforms.length; t < e; t++) {\n              var o = r.transforms[t];\n              o instanceof s.Matrix ? i = o.relative ? i.multiply(new s.Matrix().morph(o).at(r.ease(this.pos))) : i.morph(o).at(r.ease(this.pos)) : (o.relative || o.undo(i.extract()), i = i.multiply(o.at(r.ease(this.pos))));\n            }\n\n            n.matrix(i);\n          }\n\n          return this;\n        },\n        once: function once(t, e, i) {\n          var s = this.last();\n          return i || (t = s.ease(t)), s.once[t] = e, this;\n        },\n        _callStart: function _callStart() {\n          return setTimeout(function () {\n            this.start();\n          }.bind(this), 0), this;\n        }\n      },\n      parent: s.Element,\n      construct: {\n        animate: function animate(t, e, i) {\n          return (this.fx || (this.fx = new s.FX(this))).animate(t, e, i);\n        },\n        delay: function delay(t) {\n          return (this.fx || (this.fx = new s.FX(this))).delay(t);\n        },\n        stop: function stop(t, e) {\n          return this.fx && this.fx.stop(t, e), this;\n        },\n        finish: function finish() {\n          return this.fx && this.fx.finish(), this;\n        },\n        pause: function pause() {\n          return this.fx && this.fx.pause(), this;\n        },\n        play: function play() {\n          return this.fx && this.fx.play(), this;\n        },\n        speed: function speed(t) {\n          if (this.fx) {\n            if (null == t) return this.fx.speed();\n            this.fx.speed(t);\n          }\n\n          return this;\n        }\n      }\n    }), s.MorphObj = s.invent({\n      create: function create(t, e) {\n        return s.Color.isColor(e) ? new s.Color(t).morph(e) : s.regex.delimiter.test(t) ? s.regex.pathLetters.test(t) ? new s.PathArray(t).morph(e) : new s.Array(t).morph(e) : s.regex.numberAndUnit.test(e) ? new s.Number(t).morph(e) : (this.value = t, void (this.destination = e));\n      },\n      extend: {\n        at: function at(t, e) {\n          return e < 1 ? this.value : this.destination;\n        },\n        valueOf: function valueOf() {\n          return this.value;\n        }\n      }\n    }), s.extend(s.FX, {\n      attr: function attr(e, i, s) {\n        if (\"object\" === t(e)) for (var a in e) {\n          this.attr(a, e[a]);\n        } else this.add(e, i, \"attrs\");\n        return this;\n      },\n      style: function style(e, i) {\n        if (\"object\" === t(e)) for (var s in e) {\n          this.style(s, e[s]);\n        } else this.add(e, i, \"styles\");\n        return this;\n      },\n      x: function x(t, e) {\n        if (this.target() instanceof s.G) return this.transform({\n          x: t\n        }, e), this;\n        var i = new s.Number(t);\n        return i.relative = e, this.add(\"x\", i);\n      },\n      y: function y(t, e) {\n        if (this.target() instanceof s.G) return this.transform({\n          y: t\n        }, e), this;\n        var i = new s.Number(t);\n        return i.relative = e, this.add(\"y\", i);\n      },\n      cx: function cx(t) {\n        return this.add(\"cx\", new s.Number(t));\n      },\n      cy: function cy(t) {\n        return this.add(\"cy\", new s.Number(t));\n      },\n      move: function move(t, e) {\n        return this.x(t).y(e);\n      },\n      center: function center(t, e) {\n        return this.cx(t).cy(e);\n      },\n      size: function size(t, e) {\n        var i;\n        this.target() instanceof s.Text ? this.attr(\"font-size\", t) : (t && e || (i = this.target().bbox()), t || (t = i.width / i.height * e), e || (e = i.height / i.width * t), this.add(\"width\", new s.Number(t)).add(\"height\", new s.Number(e)));\n        return this;\n      },\n      width: function width(t) {\n        return this.add(\"width\", new s.Number(t));\n      },\n      height: function height(t) {\n        return this.add(\"height\", new s.Number(t));\n      },\n      plot: function plot(t, e, i, s) {\n        return 4 == arguments.length ? this.plot([t, e, i, s]) : this.add(\"plot\", new (this.target().morphArray)(t));\n      },\n      leading: function leading(t) {\n        return this.target().leading ? this.add(\"leading\", new s.Number(t)) : this;\n      },\n      viewbox: function viewbox(t, e, i, a) {\n        return this.target() instanceof s.Container && this.add(\"viewbox\", new s.ViewBox(t, e, i, a)), this;\n      },\n      update: function update(t) {\n        if (this.target() instanceof s.Stop) {\n          if (\"number\" == typeof t || t instanceof s.Number) return this.update({\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          });\n          null != t.opacity && this.attr(\"stop-opacity\", t.opacity), null != t.color && this.attr(\"stop-color\", t.color), null != t.offset && this.attr(\"offset\", t.offset);\n        }\n\n        return this;\n      }\n    }), s.Box = s.invent({\n      create: function create(e, i, a, n) {\n        if (!(\"object\" !== t(e) || e instanceof s.Element)) return s.Box.call(this, null != e.left ? e.left : e.x, null != e.top ? e.top : e.y, e.width, e.height);\n        4 == arguments.length && (this.x = e, this.y = i, this.width = a, this.height = n), m(this);\n      },\n      extend: {\n        merge: function merge(t) {\n          var e = new this.constructor();\n          return e.x = Math.min(this.x, t.x), e.y = Math.min(this.y, t.y), e.width = Math.max(this.x + this.width, t.x + t.width) - e.x, e.height = Math.max(this.y + this.height, t.y + t.height) - e.y, m(e);\n        },\n        transform: function transform(t) {\n          var e,\n              i = 1 / 0,\n              a = -1 / 0,\n              n = 1 / 0,\n              r = -1 / 0;\n          return [new s.Point(this.x, this.y), new s.Point(this.x2, this.y), new s.Point(this.x, this.y2), new s.Point(this.x2, this.y2)].forEach(function (e) {\n            e = e.transform(t), i = Math.min(i, e.x), a = Math.max(a, e.x), n = Math.min(n, e.y), r = Math.max(r, e.y);\n          }), (e = new this.constructor()).x = i, e.width = a - i, e.y = n, e.height = r - n, m(e), e;\n        }\n      }\n    }), s.BBox = s.invent({\n      create: function create(t) {\n        if (s.Box.apply(this, [].slice.call(arguments)), t instanceof s.Element) {\n          var e;\n\n          try {\n            if (!i.documentElement.contains) {\n              for (var a = t.node; a.parentNode;) {\n                a = a.parentNode;\n              }\n\n              if (a != i) throw new Error(\"Element not in the dom\");\n            }\n\n            e = t.node.getBBox();\n          } catch (i) {\n            if (t instanceof s.Shape) {\n              s.parser.draw || s.prepare();\n              var n = t.clone(s.parser.draw.instance).show();\n              e = n.node.getBBox(), n.remove();\n            } else e = {\n              x: t.node.clientLeft,\n              y: t.node.clientTop,\n              width: t.node.clientWidth,\n              height: t.node.clientHeight\n            };\n          }\n\n          s.Box.call(this, e);\n        }\n      },\n      inherit: s.Box,\n      parent: s.Element,\n      construct: {\n        bbox: function bbox() {\n          return new s.BBox(this);\n        }\n      }\n    }), s.BBox.prototype.constructor = s.BBox, s.extend(s.Element, {\n      tbox: function tbox() {\n        return console.warn(\"Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.\"), this.rbox(this.doc());\n      }\n    }), s.RBox = s.invent({\n      create: function create(t) {\n        s.Box.apply(this, [].slice.call(arguments)), t instanceof s.Element && s.Box.call(this, t.node.getBoundingClientRect());\n      },\n      inherit: s.Box,\n      parent: s.Element,\n      extend: {\n        addOffset: function addOffset() {\n          return this.x += e.pageXOffset, this.y += e.pageYOffset, this;\n        }\n      },\n      construct: {\n        rbox: function rbox(t) {\n          return t ? new s.RBox(this).transform(t.screenCTM().inverse()) : new s.RBox(this).addOffset();\n        }\n      }\n    }), s.RBox.prototype.constructor = s.RBox, s.Matrix = s.invent({\n      create: function create(e) {\n        var i,\n            a = p([1, 0, 0, 1, 0, 0]);\n\n        for (e = e instanceof s.Element ? e.matrixify() : \"string\" == typeof e ? p(e.split(s.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? p([].slice.call(arguments)) : Array.isArray(e) ? p(e) : \"object\" === t(e) ? e : a, i = y.length - 1; i >= 0; --i) {\n          this[y[i]] = null != e[y[i]] ? e[y[i]] : a[y[i]];\n        }\n      },\n      extend: {\n        extract: function extract() {\n          var t = f(this, 0, 1),\n              e = f(this, 1, 0),\n              i = 180 / Math.PI * Math.atan2(t.y, t.x) - 90;\n          return {\n            x: this.e,\n            y: this.f,\n            transformedX: (this.e * Math.cos(i * Math.PI / 180) + this.f * Math.sin(i * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n            transformedY: (this.f * Math.cos(i * Math.PI / 180) + this.e * Math.sin(-i * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),\n            skewX: -i,\n            skewY: 180 / Math.PI * Math.atan2(e.y, e.x),\n            scaleX: Math.sqrt(this.a * this.a + this.b * this.b),\n            scaleY: Math.sqrt(this.c * this.c + this.d * this.d),\n            rotation: i,\n            a: this.a,\n            b: this.b,\n            c: this.c,\n            d: this.d,\n            e: this.e,\n            f: this.f,\n            matrix: new s.Matrix(this)\n          };\n        },\n        clone: function clone() {\n          return new s.Matrix(this);\n        },\n        morph: function morph(t) {\n          return this.destination = new s.Matrix(t), this;\n        },\n        at: function at(t) {\n          return this.destination ? new s.Matrix({\n            a: this.a + (this.destination.a - this.a) * t,\n            b: this.b + (this.destination.b - this.b) * t,\n            c: this.c + (this.destination.c - this.c) * t,\n            d: this.d + (this.destination.d - this.d) * t,\n            e: this.e + (this.destination.e - this.e) * t,\n            f: this.f + (this.destination.f - this.f) * t\n          }) : this;\n        },\n        multiply: function multiply(t) {\n          return new s.Matrix(this[\"native\"]().multiply(function (t) {\n            t instanceof s.Matrix || (t = new s.Matrix(t));\n            return t;\n          }(t)[\"native\"]()));\n        },\n        inverse: function inverse() {\n          return new s.Matrix(this[\"native\"]().inverse());\n        },\n        translate: function translate(t, e) {\n          return new s.Matrix(this[\"native\"]().translate(t || 0, e || 0));\n        },\n        scale: function scale(t, e, i, a) {\n          return 1 == arguments.length ? e = t : 3 == arguments.length && (a = i, i = e, e = t), this.around(i, a, new s.Matrix(t, 0, 0, e, 0, 0));\n        },\n        rotate: function rotate(t, e, i) {\n          return t = s.utils.radians(t), this.around(e, i, new s.Matrix(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0));\n        },\n        flip: function flip(t, e) {\n          return \"x\" == t ? this.scale(-1, 1, e, 0) : \"y\" == t ? this.scale(1, -1, 0, e) : this.scale(-1, -1, t, null != e ? e : t);\n        },\n        skew: function skew(t, e, i, a) {\n          return 1 == arguments.length ? e = t : 3 == arguments.length && (a = i, i = e, e = t), t = s.utils.radians(t), e = s.utils.radians(e), this.around(i, a, new s.Matrix(1, Math.tan(e), Math.tan(t), 1, 0, 0));\n        },\n        skewX: function skewX(t, e, i) {\n          return this.skew(t, 0, e, i);\n        },\n        skewY: function skewY(t, e, i) {\n          return this.skew(0, t, e, i);\n        },\n        around: function around(t, e, i) {\n          return this.multiply(new s.Matrix(1, 0, 0, 1, t || 0, e || 0)).multiply(i).multiply(new s.Matrix(1, 0, 0, 1, -t || 0, -e || 0));\n        },\n        \"native\": function native() {\n          for (var t = s.parser[\"native\"].createSVGMatrix(), e = y.length - 1; e >= 0; e--) {\n            t[y[e]] = this[y[e]];\n          }\n\n          return t;\n        },\n        toString: function toString() {\n          return \"matrix(\" + v(this.a) + \",\" + v(this.b) + \",\" + v(this.c) + \",\" + v(this.d) + \",\" + v(this.e) + \",\" + v(this.f) + \")\";\n        }\n      },\n      parent: s.Element,\n      construct: {\n        ctm: function ctm() {\n          return new s.Matrix(this.node.getCTM());\n        },\n        screenCTM: function screenCTM() {\n          if (this instanceof s.Nested) {\n            var t = this.rect(1, 1),\n                e = t.node.getScreenCTM();\n            return t.remove(), new s.Matrix(e);\n          }\n\n          return new s.Matrix(this.node.getScreenCTM());\n        }\n      }\n    }), s.Point = s.invent({\n      create: function create(e, i) {\n        var s;\n        s = Array.isArray(e) ? {\n          x: e[0],\n          y: e[1]\n        } : \"object\" === t(e) ? {\n          x: e.x,\n          y: e.y\n        } : null != e ? {\n          x: e,\n          y: null != i ? i : e\n        } : {\n          x: 0,\n          y: 0\n        }, this.x = s.x, this.y = s.y;\n      },\n      extend: {\n        clone: function clone() {\n          return new s.Point(this);\n        },\n        morph: function morph(t, e) {\n          return this.destination = new s.Point(t, e), this;\n        },\n        at: function at(t) {\n          return this.destination ? new s.Point({\n            x: this.x + (this.destination.x - this.x) * t,\n            y: this.y + (this.destination.y - this.y) * t\n          }) : this;\n        },\n        \"native\": function native() {\n          var t = s.parser[\"native\"].createSVGPoint();\n          return t.x = this.x, t.y = this.y, t;\n        },\n        transform: function transform(t) {\n          return new s.Point(this[\"native\"]().matrixTransform(t[\"native\"]()));\n        }\n      }\n    }), s.extend(s.Element, {\n      point: function point(t, e) {\n        return new s.Point(t, e).transform(this.screenCTM().inverse());\n      }\n    }), s.extend(s.Element, {\n      attr: function attr(e, i, a) {\n        if (null == e) {\n          for (e = {}, a = (i = this.node.attributes).length - 1; a >= 0; a--) {\n            e[i[a].nodeName] = s.regex.isNumber.test(i[a].nodeValue) ? parseFloat(i[a].nodeValue) : i[a].nodeValue;\n          }\n\n          return e;\n        }\n\n        if (\"object\" === t(e)) for (i in e) {\n          this.attr(i, e[i]);\n        } else if (null === i) this.node.removeAttribute(e);else {\n          if (null == i) return null == (i = this.node.getAttribute(e)) ? s.defaults.attrs[e] : s.regex.isNumber.test(i) ? parseFloat(i) : i;\n          \"stroke-width\" == e ? this.attr(\"stroke\", parseFloat(i) > 0 ? this._stroke : null) : \"stroke\" == e && (this._stroke = i), \"fill\" != e && \"stroke\" != e || (s.regex.isImage.test(i) && (i = this.doc().defs().image(i, 0, 0)), i instanceof s.Image && (i = this.doc().defs().pattern(0, 0, function () {\n            this.add(i);\n          }))), \"number\" == typeof i ? i = new s.Number(i) : s.Color.isColor(i) ? i = new s.Color(i) : Array.isArray(i) && (i = new s.Array(i)), \"leading\" == e ? this.leading && this.leading(i) : \"string\" == typeof a ? this.node.setAttributeNS(a, e, i.toString()) : this.node.setAttribute(e, i.toString()), !this.rebuild || \"font-size\" != e && \"x\" != e || this.rebuild(e, i);\n        }\n        return this;\n      }\n    }), s.extend(s.Element, {\n      transform: function transform(e, i) {\n        var a, n;\n        if (\"object\" !== t(e)) return a = new s.Matrix(this).extract(), \"string\" == typeof e ? a[e] : a;\n        if (a = new s.Matrix(this), i = !!i || !!e.relative, null != e.a) a = i ? a.multiply(new s.Matrix(e)) : new s.Matrix(e);else if (null != e.rotation) x(e, this), a = i ? a.rotate(e.rotation, e.cx, e.cy) : a.rotate(e.rotation - a.extract().rotation, e.cx, e.cy);else if (null != e.scale || null != e.scaleX || null != e.scaleY) {\n          if (x(e, this), e.scaleX = null != e.scale ? e.scale : null != e.scaleX ? e.scaleX : 1, e.scaleY = null != e.scale ? e.scale : null != e.scaleY ? e.scaleY : 1, !i) {\n            var r = a.extract();\n            e.scaleX = 1 * e.scaleX / r.scaleX, e.scaleY = 1 * e.scaleY / r.scaleY;\n          }\n\n          a = a.scale(e.scaleX, e.scaleY, e.cx, e.cy);\n        } else if (null != e.skew || null != e.skewX || null != e.skewY) {\n          if (x(e, this), e.skewX = null != e.skew ? e.skew : null != e.skewX ? e.skewX : 0, e.skewY = null != e.skew ? e.skew : null != e.skewY ? e.skewY : 0, !i) {\n            r = a.extract();\n            a = a.multiply(new s.Matrix().skew(r.skewX, r.skewY, e.cx, e.cy).inverse());\n          }\n\n          a = a.skew(e.skewX, e.skewY, e.cx, e.cy);\n        } else e.flip ? (\"x\" == e.flip || \"y\" == e.flip ? e.offset = null == e.offset ? this.bbox()[\"c\" + e.flip] : e.offset : null == e.offset ? (n = this.bbox(), e.flip = n.cx, e.offset = n.cy) : e.flip = e.offset, a = new s.Matrix().flip(e.flip, e.offset)) : null == e.x && null == e.y || (i ? a = a.translate(e.x, e.y) : (null != e.x && (a.e = e.x), null != e.y && (a.f = e.y)));\n        return this.attr(\"transform\", a);\n      }\n    }), s.extend(s.FX, {\n      transform: function transform(e, i) {\n        var a,\n            n,\n            r = this.target();\n        return \"object\" !== t(e) ? (a = new s.Matrix(r).extract(), \"string\" == typeof e ? a[e] : a) : (i = !!i || !!e.relative, null != e.a ? a = new s.Matrix(e) : null != e.rotation ? (x(e, r), a = new s.Rotate(e.rotation, e.cx, e.cy)) : null != e.scale || null != e.scaleX || null != e.scaleY ? (x(e, r), e.scaleX = null != e.scale ? e.scale : null != e.scaleX ? e.scaleX : 1, e.scaleY = null != e.scale ? e.scale : null != e.scaleY ? e.scaleY : 1, a = new s.Scale(e.scaleX, e.scaleY, e.cx, e.cy)) : null != e.skewX || null != e.skewY ? (x(e, r), e.skewX = null != e.skewX ? e.skewX : 0, e.skewY = null != e.skewY ? e.skewY : 0, a = new s.Skew(e.skewX, e.skewY, e.cx, e.cy)) : e.flip ? (\"x\" == e.flip || \"y\" == e.flip ? e.offset = null == e.offset ? r.bbox()[\"c\" + e.flip] : e.offset : null == e.offset ? (n = r.bbox(), e.flip = n.cx, e.offset = n.cy) : e.flip = e.offset, a = new s.Matrix().flip(e.flip, e.offset)) : null == e.x && null == e.y || (a = new s.Translate(e.x, e.y)), a ? (a.relative = i, this.last().transforms.push(a), this._callStart()) : this);\n      }\n    }), s.extend(s.Element, {\n      untransform: function untransform() {\n        return this.attr(\"transform\", null);\n      },\n      matrixify: function matrixify() {\n        return (this.attr(\"transform\") || \"\").split(s.regex.transforms).slice(0, -1).map(function (t) {\n          var e = t.trim().split(\"(\");\n          return [e[0], e[1].split(s.regex.delimiter).map(function (t) {\n            return parseFloat(t);\n          })];\n        }).reduce(function (t, e) {\n          return \"matrix\" == e[0] ? t.multiply(p(e[1])) : t[e[0]].apply(t, e[1]);\n        }, new s.Matrix());\n      },\n      toParent: function toParent(t) {\n        if (this == t) return this;\n        var e = this.screenCTM(),\n            i = t.screenCTM().inverse();\n        return this.addTo(t).untransform().transform(i.multiply(e)), this;\n      },\n      toDoc: function toDoc() {\n        return this.toParent(this.doc());\n      }\n    }), s.Transformation = s.invent({\n      create: function create(e, i) {\n        if (arguments.length > 1 && \"boolean\" != typeof i) return this.constructor.call(this, [].slice.call(arguments));\n        if (Array.isArray(e)) for (var s = 0, a = this.arguments.length; s < a; ++s) {\n          this[this.arguments[s]] = e[s];\n        } else if (\"object\" === t(e)) for (s = 0, a = this.arguments.length; s < a; ++s) {\n          this[this.arguments[s]] = e[this.arguments[s]];\n        }\n        this.inversed = !1, !0 === i && (this.inversed = !0);\n      },\n      extend: {\n        arguments: [],\n        method: \"\",\n        at: function at(t) {\n          for (var e = [], i = 0, a = this.arguments.length; i < a; ++i) {\n            e.push(this[this.arguments[i]]);\n          }\n\n          var n = this._undo || new s.Matrix();\n          return n = new s.Matrix().morph(s.Matrix.prototype[this.method].apply(n, e)).at(t), this.inversed ? n.inverse() : n;\n        },\n        undo: function undo(t) {\n          for (var e = 0, i = this.arguments.length; e < i; ++e) {\n            t[this.arguments[e]] = void 0 === this[this.arguments[e]] ? 0 : t[this.arguments[e]];\n          }\n\n          return t.cx = this.cx, t.cy = this.cy, this._undo = new s[d(this.method)](t, !0).at(1), this;\n        }\n      }\n    }), s.Translate = s.invent({\n      parent: s.Matrix,\n      inherit: s.Transformation,\n      create: function create(t, e) {\n        this.constructor.apply(this, [].slice.call(arguments));\n      },\n      extend: {\n        arguments: [\"transformedX\", \"transformedY\"],\n        method: \"translate\"\n      }\n    }), s.Rotate = s.invent({\n      parent: s.Matrix,\n      inherit: s.Transformation,\n      create: function create(t, e) {\n        this.constructor.apply(this, [].slice.call(arguments));\n      },\n      extend: {\n        arguments: [\"rotation\", \"cx\", \"cy\"],\n        method: \"rotate\",\n        at: function at(t) {\n          var e = new s.Matrix().rotate(new s.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(t), this.cx, this.cy);\n          return this.inversed ? e.inverse() : e;\n        },\n        undo: function undo(t) {\n          return this._undo = t, this;\n        }\n      }\n    }), s.Scale = s.invent({\n      parent: s.Matrix,\n      inherit: s.Transformation,\n      create: function create(t, e) {\n        this.constructor.apply(this, [].slice.call(arguments));\n      },\n      extend: {\n        arguments: [\"scaleX\", \"scaleY\", \"cx\", \"cy\"],\n        method: \"scale\"\n      }\n    }), s.Skew = s.invent({\n      parent: s.Matrix,\n      inherit: s.Transformation,\n      create: function create(t, e) {\n        this.constructor.apply(this, [].slice.call(arguments));\n      },\n      extend: {\n        arguments: [\"skewX\", \"skewY\", \"cx\", \"cy\"],\n        method: \"skew\"\n      }\n    }), s.extend(s.Element, {\n      style: function style(e, i) {\n        if (0 == arguments.length) return this.node.style.cssText || \"\";\n        if (arguments.length < 2) {\n          if (\"object\" === t(e)) for (i in e) {\n            this.style(i, e[i]);\n          } else {\n            if (!s.regex.isCss.test(e)) return this.node.style[c(e)];\n\n            for (e = e.split(/\\s*;\\s*/).filter(function (t) {\n              return !!t;\n            }).map(function (t) {\n              return t.split(/\\s*:\\s*/);\n            }); i = e.pop();) {\n              this.style(i[0], i[1]);\n            }\n          }\n        } else this.node.style[c(e)] = null === i || s.regex.isBlank.test(i) ? \"\" : i;\n        return this;\n      }\n    }), s.Parent = s.invent({\n      create: function create(t) {\n        this.constructor.call(this, t);\n      },\n      inherit: s.Element,\n      extend: {\n        children: function children() {\n          return s.utils.map(s.utils.filterSVGElements(this.node.childNodes), function (t) {\n            return s.adopt(t);\n          });\n        },\n        add: function add(t, e) {\n          return null == e ? this.node.appendChild(t.node) : t.node != this.node.childNodes[e] && this.node.insertBefore(t.node, this.node.childNodes[e]), this;\n        },\n        put: function put(t, e) {\n          return this.add(t, e), t;\n        },\n        has: function has(t) {\n          return this.index(t) >= 0;\n        },\n        index: function index(t) {\n          return [].slice.call(this.node.childNodes).indexOf(t.node);\n        },\n        get: function get(t) {\n          return s.adopt(this.node.childNodes[t]);\n        },\n        first: function first() {\n          return this.get(0);\n        },\n        last: function last() {\n          return this.get(this.node.childNodes.length - 1);\n        },\n        each: function each(t, e) {\n          var i,\n              a,\n              n = this.children();\n\n          for (i = 0, a = n.length; i < a; i++) {\n            n[i] instanceof s.Element && t.apply(n[i], [i, n]), e && n[i] instanceof s.Container && n[i].each(t, e);\n          }\n\n          return this;\n        },\n        removeElement: function removeElement(t) {\n          return this.node.removeChild(t.node), this;\n        },\n        clear: function clear() {\n          for (; this.node.hasChildNodes();) {\n            this.node.removeChild(this.node.lastChild);\n          }\n\n          return delete this._defs, this;\n        },\n        defs: function defs() {\n          return this.doc().defs();\n        }\n      }\n    }), s.extend(s.Parent, {\n      ungroup: function ungroup(t, e) {\n        return 0 === e || this instanceof s.Defs || this.node == s.parser.draw ? this : (t = t || (this instanceof s.Doc ? this : this.parent(s.Parent)), e = e || 1 / 0, this.each(function () {\n          return this instanceof s.Defs ? this : this instanceof s.Parent ? this.ungroup(t, e - 1) : this.toParent(t);\n        }), this.node.firstChild || this.remove(), this);\n      },\n      flatten: function flatten(t, e) {\n        return this.ungroup(t, e);\n      }\n    }), s.Container = s.invent({\n      create: function create(t) {\n        this.constructor.call(this, t);\n      },\n      inherit: s.Parent\n    }), s.ViewBox = s.invent({\n      create: function create(e) {\n        var i,\n            a,\n            n,\n            r,\n            o,\n            l,\n            h,\n            c = 1,\n            d = 1,\n            u = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi;\n\n        if (e instanceof s.Element) {\n          for (l = e, h = e, o = (e.attr(\"viewBox\") || \"\").match(u), e.bbox, n = new s.Number(e.width()), r = new s.Number(e.height()); \"%\" == n.unit;) {\n            c *= n.value, n = new s.Number(l instanceof s.Doc ? l.parent().offsetWidth : l.parent().width()), l = l.parent();\n          }\n\n          for (; \"%\" == r.unit;) {\n            d *= r.value, r = new s.Number(h instanceof s.Doc ? h.parent().offsetHeight : h.parent().height()), h = h.parent();\n          }\n\n          this.x = 0, this.y = 0, this.width = n * c, this.height = r * d, this.zoom = 1, o && (i = parseFloat(o[0]), a = parseFloat(o[1]), n = parseFloat(o[2]), r = parseFloat(o[3]), this.zoom = this.width / this.height > n / r ? this.height / r : this.width / n, this.x = i, this.y = a, this.width = n, this.height = r);\n        } else e = \"string\" == typeof e ? e.match(u).map(function (t) {\n          return parseFloat(t);\n        }) : Array.isArray(e) ? e : \"object\" === t(e) ? [e.x, e.y, e.width, e.height] : 4 == arguments.length ? [].slice.call(arguments) : [0, 0, 0, 0], this.x = e[0], this.y = e[1], this.width = e[2], this.height = e[3];\n      },\n      extend: {\n        toString: function toString() {\n          return this.x + \" \" + this.y + \" \" + this.width + \" \" + this.height;\n        },\n        morph: function morph(t, e, i, a) {\n          return this.destination = new s.ViewBox(t, e, i, a), this;\n        },\n        at: function at(t) {\n          return this.destination ? new s.ViewBox([this.x + (this.destination.x - this.x) * t, this.y + (this.destination.y - this.y) * t, this.width + (this.destination.width - this.width) * t, this.height + (this.destination.height - this.height) * t]) : this;\n        }\n      },\n      parent: s.Container,\n      construct: {\n        viewbox: function viewbox(t, e, i, a) {\n          return 0 == arguments.length ? new s.ViewBox(this) : this.attr(\"viewBox\", new s.ViewBox(t, e, i, a));\n        }\n      }\n    }), [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseover\", \"mouseout\", \"mousemove\", \"touchstart\", \"touchmove\", \"touchleave\", \"touchend\", \"touchcancel\"].forEach(function (t) {\n      s.Element.prototype[t] = function (e) {\n        return s.on(this.node, t, e), this;\n      };\n    }), s.listeners = [], s.handlerMap = [], s.listenerId = 0, s.on = function (t, e, i, a, n) {\n      var r = i.bind(a || t.instance || t),\n          o = (s.handlerMap.indexOf(t) + 1 || s.handlerMap.push(t)) - 1,\n          l = e.split(\".\")[0],\n          h = e.split(\".\")[1] || \"*\";\n      s.listeners[o] = s.listeners[o] || {}, s.listeners[o][l] = s.listeners[o][l] || {}, s.listeners[o][l][h] = s.listeners[o][l][h] || {}, i._svgjsListenerId || (i._svgjsListenerId = ++s.listenerId), s.listeners[o][l][h][i._svgjsListenerId] = r, t.addEventListener(l, r, n || !1);\n    }, s.off = function (t, e, i) {\n      var a = s.handlerMap.indexOf(t),\n          n = e && e.split(\".\")[0],\n          r = e && e.split(\".\")[1],\n          o = \"\";\n      if (-1 != a) if (i) {\n        if (\"function\" == typeof i && (i = i._svgjsListenerId), !i) return;\n        s.listeners[a][n] && s.listeners[a][n][r || \"*\"] && (t.removeEventListener(n, s.listeners[a][n][r || \"*\"][i], !1), delete s.listeners[a][n][r || \"*\"][i]);\n      } else if (r && n) {\n        if (s.listeners[a][n] && s.listeners[a][n][r]) {\n          for (i in s.listeners[a][n][r]) {\n            s.off(t, [n, r].join(\".\"), i);\n          }\n\n          delete s.listeners[a][n][r];\n        }\n      } else if (r) for (e in s.listeners[a]) {\n        for (o in s.listeners[a][e]) {\n          r === o && s.off(t, [e, r].join(\".\"));\n        }\n      } else if (n) {\n        if (s.listeners[a][n]) {\n          for (o in s.listeners[a][n]) {\n            s.off(t, [n, o].join(\".\"));\n          }\n\n          delete s.listeners[a][n];\n        }\n      } else {\n        for (e in s.listeners[a]) {\n          s.off(t, e);\n        }\n\n        delete s.listeners[a], delete s.handlerMap[a];\n      }\n    }, s.extend(s.Element, {\n      on: function on(t, e, i, a) {\n        return s.on(this.node, t, e, i, a), this;\n      },\n      off: function off(t, e) {\n        return s.off(this.node, t, e), this;\n      },\n      fire: function fire(t, i) {\n        return t instanceof e.Event ? this.node.dispatchEvent(t) : this.node.dispatchEvent(t = new s.CustomEvent(t, {\n          detail: i,\n          cancelable: !0\n        })), this._event = t, this;\n      },\n      event: function event() {\n        return this._event;\n      }\n    }), s.Defs = s.invent({\n      create: \"defs\",\n      inherit: s.Container\n    }), s.G = s.invent({\n      create: \"g\",\n      inherit: s.Container,\n      extend: {\n        x: function x(t) {\n          return null == t ? this.transform(\"x\") : this.transform({\n            x: t - this.x()\n          }, !0);\n        },\n        y: function y(t) {\n          return null == t ? this.transform(\"y\") : this.transform({\n            y: t - this.y()\n          }, !0);\n        },\n        cx: function cx(t) {\n          return null == t ? this.gbox().cx : this.x(t - this.gbox().width / 2);\n        },\n        cy: function cy(t) {\n          return null == t ? this.gbox().cy : this.y(t - this.gbox().height / 2);\n        },\n        gbox: function gbox() {\n          var t = this.bbox(),\n              e = this.transform();\n          return t.x += e.x, t.x2 += e.x, t.cx += e.x, t.y += e.y, t.y2 += e.y, t.cy += e.y, t;\n        }\n      },\n      construct: {\n        group: function group() {\n          return this.put(new s.G());\n        }\n      }\n    }), s.Doc = s.invent({\n      create: function create(t) {\n        t && (\"svg\" == (t = \"string\" == typeof t ? i.getElementById(t) : t).nodeName ? this.constructor.call(this, t) : (this.constructor.call(this, s.create(\"svg\")), t.appendChild(this.node), this.size(\"100%\", \"100%\")), this.namespace().defs());\n      },\n      inherit: s.Container,\n      extend: {\n        namespace: function namespace() {\n          return this.attr({\n            xmlns: s.ns,\n            version: \"1.1\"\n          }).attr(\"xmlns:xlink\", s.xlink, s.xmlns).attr(\"xmlns:svgjs\", s.svgjs, s.xmlns);\n        },\n        defs: function defs() {\n          var t;\n          this._defs || ((t = this.node.getElementsByTagName(\"defs\")[0]) ? this._defs = s.adopt(t) : this._defs = new s.Defs(), this.node.appendChild(this._defs.node));\n          return this._defs;\n        },\n        parent: function parent() {\n          return this.node.parentNode && \"#document\" != this.node.parentNode.nodeName ? this.node.parentNode : null;\n        },\n        spof: function spof() {\n          var t = this.node.getScreenCTM();\n          return t && this.style(\"left\", -t.e % 1 + \"px\").style(\"top\", -t.f % 1 + \"px\"), this;\n        },\n        remove: function remove() {\n          return this.parent() && this.parent().removeChild(this.node), this;\n        },\n        clear: function clear() {\n          for (; this.node.hasChildNodes();) {\n            this.node.removeChild(this.node.lastChild);\n          }\n\n          return delete this._defs, s.parser.draw && !s.parser.draw.parentNode && this.node.appendChild(s.parser.draw), this;\n        },\n        clone: function clone(t) {\n          this.writeDataToDom();\n          var e = this.node,\n              i = b(e.cloneNode(!0));\n          return t ? (t.node || t).appendChild(i.node) : e.parentNode.insertBefore(i.node, e.nextSibling), i;\n        }\n      }\n    }), s.extend(s.Element, {\n      siblings: function siblings() {\n        return this.parent().children();\n      },\n      position: function position() {\n        return this.parent().index(this);\n      },\n      next: function next() {\n        return this.siblings()[this.position() + 1];\n      },\n      previous: function previous() {\n        return this.siblings()[this.position() - 1];\n      },\n      forward: function forward() {\n        var t = this.position() + 1,\n            e = this.parent();\n        return e.removeElement(this).add(this, t), e instanceof s.Doc && e.node.appendChild(e.defs().node), this;\n      },\n      backward: function backward() {\n        var t = this.position();\n        return t > 0 && this.parent().removeElement(this).add(this, t - 1), this;\n      },\n      front: function front() {\n        var t = this.parent();\n        return t.node.appendChild(this.node), t instanceof s.Doc && t.node.appendChild(t.defs().node), this;\n      },\n      back: function back() {\n        return this.position() > 0 && this.parent().removeElement(this).add(this, 0), this;\n      },\n      before: function before(t) {\n        t.remove();\n        var e = this.position();\n        return this.parent().add(t, e), this;\n      },\n      after: function after(t) {\n        t.remove();\n        var e = this.position();\n        return this.parent().add(t, e + 1), this;\n      }\n    }), s.Mask = s.invent({\n      create: function create() {\n        this.constructor.call(this, s.create(\"mask\")), this.targets = [];\n      },\n      inherit: s.Container,\n      extend: {\n        remove: function remove() {\n          for (var t = this.targets.length - 1; t >= 0; t--) {\n            this.targets[t] && this.targets[t].unmask();\n          }\n\n          return this.targets = [], s.Element.prototype.remove.call(this), this;\n        }\n      },\n      construct: {\n        mask: function mask() {\n          return this.defs().put(new s.Mask());\n        }\n      }\n    }), s.extend(s.Element, {\n      maskWith: function maskWith(t) {\n        return this.masker = t instanceof s.Mask ? t : this.parent().mask().add(t), this.masker.targets.push(this), this.attr(\"mask\", 'url(\"#' + this.masker.attr(\"id\") + '\")');\n      },\n      unmask: function unmask() {\n        return delete this.masker, this.attr(\"mask\", null);\n      }\n    }), s.ClipPath = s.invent({\n      create: function create() {\n        this.constructor.call(this, s.create(\"clipPath\")), this.targets = [];\n      },\n      inherit: s.Container,\n      extend: {\n        remove: function remove() {\n          for (var t = this.targets.length - 1; t >= 0; t--) {\n            this.targets[t] && this.targets[t].unclip();\n          }\n\n          return this.targets = [], this.parent().removeElement(this), this;\n        }\n      },\n      construct: {\n        clip: function clip() {\n          return this.defs().put(new s.ClipPath());\n        }\n      }\n    }), s.extend(s.Element, {\n      clipWith: function clipWith(t) {\n        return this.clipper = t instanceof s.ClipPath ? t : this.parent().clip().add(t), this.clipper.targets.push(this), this.attr(\"clip-path\", 'url(\"#' + this.clipper.attr(\"id\") + '\")');\n      },\n      unclip: function unclip() {\n        return delete this.clipper, this.attr(\"clip-path\", null);\n      }\n    }), s.Gradient = s.invent({\n      create: function create(t) {\n        this.constructor.call(this, s.create(t + \"Gradient\")), this.type = t;\n      },\n      inherit: s.Container,\n      extend: {\n        at: function at(t, e, i) {\n          return this.put(new s.Stop()).update(t, e, i);\n        },\n        update: function update(t) {\n          return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n        },\n        fill: function fill() {\n          return \"url(#\" + this.id() + \")\";\n        },\n        toString: function toString() {\n          return this.fill();\n        },\n        attr: function attr(t, e, i) {\n          return \"transform\" == t && (t = \"gradientTransform\"), s.Container.prototype.attr.call(this, t, e, i);\n        }\n      },\n      construct: {\n        gradient: function gradient(t, e) {\n          return this.defs().gradient(t, e);\n        }\n      }\n    }), s.extend(s.Gradient, s.FX, {\n      from: function from(t, e) {\n        return \"radial\" == (this._target || this).type ? this.attr({\n          fx: new s.Number(t),\n          fy: new s.Number(e)\n        }) : this.attr({\n          x1: new s.Number(t),\n          y1: new s.Number(e)\n        });\n      },\n      to: function to(t, e) {\n        return \"radial\" == (this._target || this).type ? this.attr({\n          cx: new s.Number(t),\n          cy: new s.Number(e)\n        }) : this.attr({\n          x2: new s.Number(t),\n          y2: new s.Number(e)\n        });\n      }\n    }), s.extend(s.Defs, {\n      gradient: function gradient(t, e) {\n        return this.put(new s.Gradient(t)).update(e);\n      }\n    }), s.Stop = s.invent({\n      create: \"stop\",\n      inherit: s.Element,\n      extend: {\n        update: function update(t) {\n          return (\"number\" == typeof t || t instanceof s.Number) && (t = {\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          }), null != t.opacity && this.attr(\"stop-opacity\", t.opacity), null != t.color && this.attr(\"stop-color\", t.color), null != t.offset && this.attr(\"offset\", new s.Number(t.offset)), this;\n        }\n      }\n    }), s.Pattern = s.invent({\n      create: \"pattern\",\n      inherit: s.Container,\n      extend: {\n        fill: function fill() {\n          return \"url(#\" + this.id() + \")\";\n        },\n        update: function update(t) {\n          return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n        },\n        toString: function toString() {\n          return this.fill();\n        },\n        attr: function attr(t, e, i) {\n          return \"transform\" == t && (t = \"patternTransform\"), s.Container.prototype.attr.call(this, t, e, i);\n        }\n      },\n      construct: {\n        pattern: function pattern(t, e, i) {\n          return this.defs().pattern(t, e, i);\n        }\n      }\n    }), s.extend(s.Defs, {\n      pattern: function pattern(t, e, i) {\n        return this.put(new s.Pattern()).update(i).attr({\n          x: 0,\n          y: 0,\n          width: t,\n          height: e,\n          patternUnits: \"userSpaceOnUse\"\n        });\n      }\n    }), s.Shape = s.invent({\n      create: function create(t) {\n        this.constructor.call(this, t);\n      },\n      inherit: s.Element\n    }), s.Bare = s.invent({\n      create: function create(t, e) {\n        if (this.constructor.call(this, s.create(t)), e) for (var i in e.prototype) {\n          \"function\" == typeof e.prototype[i] && (this[i] = e.prototype[i]);\n        }\n      },\n      inherit: s.Element,\n      extend: {\n        words: function words(t) {\n          for (; this.node.hasChildNodes();) {\n            this.node.removeChild(this.node.lastChild);\n          }\n\n          return this.node.appendChild(i.createTextNode(t)), this;\n        }\n      }\n    }), s.extend(s.Parent, {\n      element: function element(t, e) {\n        return this.put(new s.Bare(t, e));\n      }\n    }), s.Symbol = s.invent({\n      create: \"symbol\",\n      inherit: s.Container,\n      construct: {\n        symbol: function symbol() {\n          return this.put(new s.Symbol());\n        }\n      }\n    }), s.Use = s.invent({\n      create: \"use\",\n      inherit: s.Shape,\n      extend: {\n        element: function element(t, e) {\n          return this.attr(\"href\", (e || \"\") + \"#\" + t, s.xlink);\n        }\n      },\n      construct: {\n        use: function use(t, e) {\n          return this.put(new s.Use()).element(t, e);\n        }\n      }\n    }), s.Rect = s.invent({\n      create: \"rect\",\n      inherit: s.Shape,\n      construct: {\n        rect: function rect(t, e) {\n          return this.put(new s.Rect()).size(t, e);\n        }\n      }\n    }), s.Circle = s.invent({\n      create: \"circle\",\n      inherit: s.Shape,\n      construct: {\n        circle: function circle(t) {\n          return this.put(new s.Circle()).rx(new s.Number(t).divide(2)).move(0, 0);\n        }\n      }\n    }), s.extend(s.Circle, s.FX, {\n      rx: function rx(t) {\n        return this.attr(\"r\", t);\n      },\n      ry: function ry(t) {\n        return this.rx(t);\n      }\n    }), s.Ellipse = s.invent({\n      create: \"ellipse\",\n      inherit: s.Shape,\n      construct: {\n        ellipse: function ellipse(t, e) {\n          return this.put(new s.Ellipse()).size(t, e).move(0, 0);\n        }\n      }\n    }), s.extend(s.Ellipse, s.Rect, s.FX, {\n      rx: function rx(t) {\n        return this.attr(\"rx\", t);\n      },\n      ry: function ry(t) {\n        return this.attr(\"ry\", t);\n      }\n    }), s.extend(s.Circle, s.Ellipse, {\n      x: function x(t) {\n        return null == t ? this.cx() - this.rx() : this.cx(t + this.rx());\n      },\n      y: function y(t) {\n        return null == t ? this.cy() - this.ry() : this.cy(t + this.ry());\n      },\n      cx: function cx(t) {\n        return null == t ? this.attr(\"cx\") : this.attr(\"cx\", t);\n      },\n      cy: function cy(t) {\n        return null == t ? this.attr(\"cy\") : this.attr(\"cy\", t);\n      },\n      width: function width(t) {\n        return null == t ? 2 * this.rx() : this.rx(new s.Number(t).divide(2));\n      },\n      height: function height(t) {\n        return null == t ? 2 * this.ry() : this.ry(new s.Number(t).divide(2));\n      },\n      size: function size(t, e) {\n        var i = g(this, t, e);\n        return this.rx(new s.Number(i.width).divide(2)).ry(new s.Number(i.height).divide(2));\n      }\n    }), s.Line = s.invent({\n      create: \"line\",\n      inherit: s.Shape,\n      extend: {\n        array: function array() {\n          return new s.PointArray([[this.attr(\"x1\"), this.attr(\"y1\")], [this.attr(\"x2\"), this.attr(\"y2\")]]);\n        },\n        plot: function plot(t, e, i, a) {\n          return null == t ? this.array() : (t = void 0 !== e ? {\n            x1: t,\n            y1: e,\n            x2: i,\n            y2: a\n          } : new s.PointArray(t).toLine(), this.attr(t));\n        },\n        move: function move(t, e) {\n          return this.attr(this.array().move(t, e).toLine());\n        },\n        size: function size(t, e) {\n          var i = g(this, t, e);\n          return this.attr(this.array().size(i.width, i.height).toLine());\n        }\n      },\n      construct: {\n        line: function line(t, e, i, a) {\n          return s.Line.prototype.plot.apply(this.put(new s.Line()), null != t ? [t, e, i, a] : [0, 0, 0, 0]);\n        }\n      }\n    }), s.Polyline = s.invent({\n      create: \"polyline\",\n      inherit: s.Shape,\n      construct: {\n        polyline: function polyline(t) {\n          return this.put(new s.Polyline()).plot(t || new s.PointArray());\n        }\n      }\n    }), s.Polygon = s.invent({\n      create: \"polygon\",\n      inherit: s.Shape,\n      construct: {\n        polygon: function polygon(t) {\n          return this.put(new s.Polygon()).plot(t || new s.PointArray());\n        }\n      }\n    }), s.extend(s.Polyline, s.Polygon, {\n      array: function array() {\n        return this._array || (this._array = new s.PointArray(this.attr(\"points\")));\n      },\n      plot: function plot(t) {\n        return null == t ? this.array() : this.clear().attr(\"points\", \"string\" == typeof t ? t : this._array = new s.PointArray(t));\n      },\n      clear: function clear() {\n        return delete this._array, this;\n      },\n      move: function move(t, e) {\n        return this.attr(\"points\", this.array().move(t, e));\n      },\n      size: function size(t, e) {\n        var i = g(this, t, e);\n        return this.attr(\"points\", this.array().size(i.width, i.height));\n      }\n    }), s.extend(s.Line, s.Polyline, s.Polygon, {\n      morphArray: s.PointArray,\n      x: function x(t) {\n        return null == t ? this.bbox().x : this.move(t, this.bbox().y);\n      },\n      y: function y(t) {\n        return null == t ? this.bbox().y : this.move(this.bbox().x, t);\n      },\n      width: function width(t) {\n        var e = this.bbox();\n        return null == t ? e.width : this.size(t, e.height);\n      },\n      height: function height(t) {\n        var e = this.bbox();\n        return null == t ? e.height : this.size(e.width, t);\n      }\n    }), s.Path = s.invent({\n      create: \"path\",\n      inherit: s.Shape,\n      extend: {\n        morphArray: s.PathArray,\n        array: function array() {\n          return this._array || (this._array = new s.PathArray(this.attr(\"d\")));\n        },\n        plot: function plot(t) {\n          return null == t ? this.array() : this.clear().attr(\"d\", \"string\" == typeof t ? t : this._array = new s.PathArray(t));\n        },\n        clear: function clear() {\n          return delete this._array, this;\n        },\n        move: function move(t, e) {\n          return this.attr(\"d\", this.array().move(t, e));\n        },\n        x: function x(t) {\n          return null == t ? this.bbox().x : this.move(t, this.bbox().y);\n        },\n        y: function y(t) {\n          return null == t ? this.bbox().y : this.move(this.bbox().x, t);\n        },\n        size: function size(t, e) {\n          var i = g(this, t, e);\n          return this.attr(\"d\", this.array().size(i.width, i.height));\n        },\n        width: function width(t) {\n          return null == t ? this.bbox().width : this.size(t, this.bbox().height);\n        },\n        height: function height(t) {\n          return null == t ? this.bbox().height : this.size(this.bbox().width, t);\n        }\n      },\n      construct: {\n        path: function path(t) {\n          return this.put(new s.Path()).plot(t || new s.PathArray());\n        }\n      }\n    }), s.Image = s.invent({\n      create: \"image\",\n      inherit: s.Shape,\n      extend: {\n        load: function load(t) {\n          if (!t) return this;\n          var i = this,\n              a = new e.Image();\n          return s.on(a, \"load\", function () {\n            s.off(a);\n            var e = i.parent(s.Pattern);\n            null !== e && (0 == i.width() && 0 == i.height() && i.size(a.width, a.height), e && 0 == e.width() && 0 == e.height() && e.size(i.width(), i.height()), \"function\" == typeof i._loaded && i._loaded.call(i, {\n              width: a.width,\n              height: a.height,\n              ratio: a.width / a.height,\n              url: t\n            }));\n          }), s.on(a, \"error\", function (t) {\n            s.off(a), \"function\" == typeof i._error && i._error.call(i, t);\n          }), this.attr(\"href\", a.src = this.src = t, s.xlink);\n        },\n        loaded: function loaded(t) {\n          return this._loaded = t, this;\n        },\n        error: function error(t) {\n          return this._error = t, this;\n        }\n      },\n      construct: {\n        image: function image(t, e, i) {\n          return this.put(new s.Image()).load(t).size(e || 0, i || e || 0);\n        }\n      }\n    }), s.Text = s.invent({\n      create: function create() {\n        this.constructor.call(this, s.create(\"text\")), this.dom.leading = new s.Number(1.3), this._rebuild = !0, this._build = !1, this.attr(\"font-family\", s.defaults.attrs[\"font-family\"]);\n      },\n      inherit: s.Shape,\n      extend: {\n        x: function x(t) {\n          return null == t ? this.attr(\"x\") : this.attr(\"x\", t);\n        },\n        y: function y(t) {\n          var e = this.attr(\"y\"),\n              i = \"number\" == typeof e ? e - this.bbox().y : 0;\n          return null == t ? \"number\" == typeof e ? e - i : e : this.attr(\"y\", \"number\" == typeof t.valueOf() ? t + i : t);\n        },\n        cx: function cx(t) {\n          return null == t ? this.bbox().cx : this.x(t - this.bbox().width / 2);\n        },\n        cy: function cy(t) {\n          return null == t ? this.bbox().cy : this.y(t - this.bbox().height / 2);\n        },\n        text: function text(t) {\n          if (void 0 === t) {\n            t = \"\";\n\n            for (var e = this.node.childNodes, i = 0, a = e.length; i < a; ++i) {\n              0 != i && 3 != e[i].nodeType && 1 == s.adopt(e[i]).dom.newLined && (t += \"\\n\"), t += e[i].textContent;\n            }\n\n            return t;\n          }\n\n          if (this.clear().build(!0), \"function\" == typeof t) t.call(this, this);else {\n            i = 0;\n\n            for (var n = (t = t.split(\"\\n\")).length; i < n; i++) {\n              this.tspan(t[i]).newLine();\n            }\n          }\n          return this.build(!1).rebuild();\n        },\n        size: function size(t) {\n          return this.attr(\"font-size\", t).rebuild();\n        },\n        leading: function leading(t) {\n          return null == t ? this.dom.leading : (this.dom.leading = new s.Number(t), this.rebuild());\n        },\n        lines: function lines() {\n          var t = (this.textPath && this.textPath() || this).node,\n              e = s.utils.map(s.utils.filterSVGElements(t.childNodes), function (t) {\n            return s.adopt(t);\n          });\n          return new s.Set(e);\n        },\n        rebuild: function rebuild(t) {\n          if (\"boolean\" == typeof t && (this._rebuild = t), this._rebuild) {\n            var e = this,\n                i = 0,\n                a = this.dom.leading * new s.Number(this.attr(\"font-size\"));\n            this.lines().each(function () {\n              this.dom.newLined && (e.textPath() || this.attr(\"x\", e.attr(\"x\")), \"\\n\" == this.text() ? i += a : (this.attr(\"dy\", a + i), i = 0));\n            }), this.fire(\"rebuild\");\n          }\n\n          return this;\n        },\n        build: function build(t) {\n          return this._build = !!t, this;\n        },\n        setData: function setData(t) {\n          return this.dom = t, this.dom.leading = new s.Number(t.leading || 1.3), this;\n        }\n      },\n      construct: {\n        text: function text(t) {\n          return this.put(new s.Text()).text(t);\n        },\n        plain: function plain(t) {\n          return this.put(new s.Text()).plain(t);\n        }\n      }\n    }), s.Tspan = s.invent({\n      create: \"tspan\",\n      inherit: s.Shape,\n      extend: {\n        text: function text(t) {\n          return null == t ? this.node.textContent + (this.dom.newLined ? \"\\n\" : \"\") : (\"function\" == typeof t ? t.call(this, this) : this.plain(t), this);\n        },\n        dx: function dx(t) {\n          return this.attr(\"dx\", t);\n        },\n        dy: function dy(t) {\n          return this.attr(\"dy\", t);\n        },\n        newLine: function newLine() {\n          var t = this.parent(s.Text);\n          return this.dom.newLined = !0, this.dy(t.dom.leading * t.attr(\"font-size\")).attr(\"x\", t.x());\n        }\n      }\n    }), s.extend(s.Text, s.Tspan, {\n      plain: function plain(t) {\n        return !1 === this._build && this.clear(), this.node.appendChild(i.createTextNode(t)), this;\n      },\n      tspan: function tspan(t) {\n        var e = (this.textPath && this.textPath() || this).node,\n            i = new s.Tspan();\n        return !1 === this._build && this.clear(), e.appendChild(i.node), i.text(t);\n      },\n      clear: function clear() {\n        for (var t = (this.textPath && this.textPath() || this).node; t.hasChildNodes();) {\n          t.removeChild(t.lastChild);\n        }\n\n        return this;\n      },\n      length: function length() {\n        return this.node.getComputedTextLength();\n      }\n    }), s.TextPath = s.invent({\n      create: \"textPath\",\n      inherit: s.Parent,\n      parent: s.Text,\n      construct: {\n        morphArray: s.PathArray,\n        path: function path(t) {\n          for (var e = new s.TextPath(), i = this.doc().defs().path(t); this.node.hasChildNodes();) {\n            e.node.appendChild(this.node.firstChild);\n          }\n\n          return this.node.appendChild(e.node), e.attr(\"href\", \"#\" + i, s.xlink), this;\n        },\n        array: function array() {\n          var t = this.track();\n          return t ? t.array() : null;\n        },\n        plot: function plot(t) {\n          var e = this.track(),\n              i = null;\n          return e && (i = e.plot(t)), null == t ? i : this;\n        },\n        track: function track() {\n          var t = this.textPath();\n          if (t) return t.reference(\"href\");\n        },\n        textPath: function textPath() {\n          if (this.node.firstChild && \"textPath\" == this.node.firstChild.nodeName) return s.adopt(this.node.firstChild);\n        }\n      }\n    }), s.Nested = s.invent({\n      create: function create() {\n        this.constructor.call(this, s.create(\"svg\")), this.style(\"overflow\", \"visible\");\n      },\n      inherit: s.Container,\n      construct: {\n        nested: function nested() {\n          return this.put(new s.Nested());\n        }\n      }\n    }), s.A = s.invent({\n      create: \"a\",\n      inherit: s.Container,\n      extend: {\n        to: function to(t) {\n          return this.attr(\"href\", t, s.xlink);\n        },\n        show: function show(t) {\n          return this.attr(\"show\", t, s.xlink);\n        },\n        target: function target(t) {\n          return this.attr(\"target\", t);\n        }\n      },\n      construct: {\n        link: function link(t) {\n          return this.put(new s.A()).to(t);\n        }\n      }\n    }), s.extend(s.Element, {\n      linkTo: function linkTo(t) {\n        var e = new s.A();\n        return \"function\" == typeof t ? t.call(e, e) : e.to(t), this.parent().put(e).put(this);\n      }\n    }), s.Marker = s.invent({\n      create: \"marker\",\n      inherit: s.Container,\n      extend: {\n        width: function width(t) {\n          return this.attr(\"markerWidth\", t);\n        },\n        height: function height(t) {\n          return this.attr(\"markerHeight\", t);\n        },\n        ref: function ref(t, e) {\n          return this.attr(\"refX\", t).attr(\"refY\", e);\n        },\n        update: function update(t) {\n          return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n        },\n        toString: function toString() {\n          return \"url(#\" + this.id() + \")\";\n        }\n      },\n      construct: {\n        marker: function marker(t, e, i) {\n          return this.defs().marker(t, e, i);\n        }\n      }\n    }), s.extend(s.Defs, {\n      marker: function marker(t, e, i) {\n        return this.put(new s.Marker()).size(t, e).ref(t / 2, e / 2).viewbox(0, 0, t, e).attr(\"orient\", \"auto\").update(i);\n      }\n    }), s.extend(s.Line, s.Polyline, s.Polygon, s.Path, {\n      marker: function marker(t, e, i, a) {\n        var n = [\"marker\"];\n        return \"all\" != t && n.push(t), n = n.join(\"-\"), t = arguments[1] instanceof s.Marker ? arguments[1] : this.doc().marker(e, i, a), this.attr(n, t);\n      }\n    });\n    var l = {\n      stroke: [\"color\", \"width\", \"opacity\", \"linecap\", \"linejoin\", \"miterlimit\", \"dasharray\", \"dashoffset\"],\n      fill: [\"color\", \"opacity\", \"rule\"],\n      prefix: function prefix(t, e) {\n        return \"color\" == e ? t : t + \"-\" + e;\n      }\n    };\n\n    function h(t, e, i, a) {\n      return i + a.replace(s.regex.dots, \" .\");\n    }\n\n    function c(t) {\n      return t.toLowerCase().replace(/-(.)/g, function (t, e) {\n        return e.toUpperCase();\n      });\n    }\n\n    function d(t) {\n      return t.charAt(0).toUpperCase() + t.slice(1);\n    }\n\n    function u(t) {\n      var e = t.toString(16);\n      return 1 == e.length ? \"0\" + e : e;\n    }\n\n    function g(t, e, i) {\n      if (null == e || null == i) {\n        var s = t.bbox();\n        null == e ? e = s.width / s.height * i : null == i && (i = s.height / s.width * e);\n      }\n\n      return {\n        width: e,\n        height: i\n      };\n    }\n\n    function f(t, e, i) {\n      return {\n        x: e * t.a + i * t.c + 0,\n        y: e * t.b + i * t.d + 0\n      };\n    }\n\n    function p(t) {\n      return {\n        a: t[0],\n        b: t[1],\n        c: t[2],\n        d: t[3],\n        e: t[4],\n        f: t[5]\n      };\n    }\n\n    function x(t, e) {\n      t.cx = null == t.cx ? e.bbox().cx : t.cx, t.cy = null == t.cy ? e.bbox().cy : t.cy;\n    }\n\n    function b(t) {\n      for (var i = t.childNodes.length - 1; i >= 0; i--) {\n        t.childNodes[i] instanceof e.SVGElement && b(t.childNodes[i]);\n      }\n\n      return s.adopt(t).id(s.eid(t.nodeName));\n    }\n\n    function m(t) {\n      return null == t.x && (t.x = 0, t.y = 0, t.width = 0, t.height = 0), t.w = t.width, t.h = t.height, t.x2 = t.x + t.width, t.y2 = t.y + t.height, t.cx = t.x + t.width / 2, t.cy = t.y + t.height / 2, t;\n    }\n\n    function v(t) {\n      return Math.abs(t) > 1e-37 ? t : 0;\n    }\n\n    [\"fill\", \"stroke\"].forEach(function (t) {\n      var e,\n          i = {};\n      i[t] = function (i) {\n        if (void 0 === i) return this;\n        if (\"string\" == typeof i || s.Color.isRgb(i) || i && \"function\" == typeof i.fill) this.attr(t, i);else for (e = l[t].length - 1; e >= 0; e--) {\n          null != i[l[t][e]] && this.attr(l.prefix(t, l[t][e]), i[l[t][e]]);\n        }\n        return this;\n      }, s.extend(s.Element, s.FX, i);\n    }), s.extend(s.Element, s.FX, {\n      rotate: function rotate(t, e, i) {\n        return this.transform({\n          rotation: t,\n          cx: e,\n          cy: i\n        });\n      },\n      skew: function skew(t, e, i, s) {\n        return 1 == arguments.length || 3 == arguments.length ? this.transform({\n          skew: t,\n          cx: e,\n          cy: i\n        }) : this.transform({\n          skewX: t,\n          skewY: e,\n          cx: i,\n          cy: s\n        });\n      },\n      scale: function scale(t, e, i, s) {\n        return 1 == arguments.length || 3 == arguments.length ? this.transform({\n          scale: t,\n          cx: e,\n          cy: i\n        }) : this.transform({\n          scaleX: t,\n          scaleY: e,\n          cx: i,\n          cy: s\n        });\n      },\n      translate: function translate(t, e) {\n        return this.transform({\n          x: t,\n          y: e\n        });\n      },\n      flip: function flip(t, e) {\n        return e = \"number\" == typeof t ? t : e, this.transform({\n          flip: t || \"both\",\n          offset: e\n        });\n      },\n      matrix: function matrix(t) {\n        return this.attr(\"transform\", new s.Matrix(6 == arguments.length ? [].slice.call(arguments) : t));\n      },\n      opacity: function opacity(t) {\n        return this.attr(\"opacity\", t);\n      },\n      dx: function dx(t) {\n        return this.x(new s.Number(t).plus(this instanceof s.FX ? 0 : this.x()), !0);\n      },\n      dy: function dy(t) {\n        return this.y(new s.Number(t).plus(this instanceof s.FX ? 0 : this.y()), !0);\n      },\n      dmove: function dmove(t, e) {\n        return this.dx(t).dy(e);\n      }\n    }), s.extend(s.Rect, s.Ellipse, s.Circle, s.Gradient, s.FX, {\n      radius: function radius(t, e) {\n        var i = (this._target || this).type;\n        return \"radial\" == i || \"circle\" == i ? this.attr(\"r\", new s.Number(t)) : this.rx(t).ry(null == e ? t : e);\n      }\n    }), s.extend(s.Path, {\n      length: function length() {\n        return this.node.getTotalLength();\n      },\n      pointAt: function pointAt(t) {\n        return this.node.getPointAtLength(t);\n      }\n    }), s.extend(s.Parent, s.Text, s.Tspan, s.FX, {\n      font: function font(e, i) {\n        if (\"object\" === t(e)) for (i in e) {\n          this.font(i, e[i]);\n        }\n        return \"leading\" == e ? this.leading(i) : \"anchor\" == e ? this.attr(\"text-anchor\", i) : \"size\" == e || \"family\" == e || \"weight\" == e || \"stretch\" == e || \"variant\" == e || \"style\" == e ? this.attr(\"font-\" + e, i) : this.attr(e, i);\n      }\n    }), s.Set = s.invent({\n      create: function create(t) {\n        Array.isArray(t) ? this.members = t : this.clear();\n      },\n      extend: {\n        add: function add() {\n          var t,\n              e,\n              i = [].slice.call(arguments);\n\n          for (t = 0, e = i.length; t < e; t++) {\n            this.members.push(i[t]);\n          }\n\n          return this;\n        },\n        remove: function remove(t) {\n          var e = this.index(t);\n          return e > -1 && this.members.splice(e, 1), this;\n        },\n        each: function each(t) {\n          for (var e = 0, i = this.members.length; e < i; e++) {\n            t.apply(this.members[e], [e, this.members]);\n          }\n\n          return this;\n        },\n        clear: function clear() {\n          return this.members = [], this;\n        },\n        length: function length() {\n          return this.members.length;\n        },\n        has: function has(t) {\n          return this.index(t) >= 0;\n        },\n        index: function index(t) {\n          return this.members.indexOf(t);\n        },\n        get: function get(t) {\n          return this.members[t];\n        },\n        first: function first() {\n          return this.get(0);\n        },\n        last: function last() {\n          return this.get(this.members.length - 1);\n        },\n        valueOf: function valueOf() {\n          return this.members;\n        },\n        bbox: function bbox() {\n          if (0 == this.members.length) return new s.RBox();\n          var t = this.members[0].rbox(this.members[0].doc());\n          return this.each(function () {\n            t = t.merge(this.rbox(this.doc()));\n          }), t;\n        }\n      },\n      construct: {\n        set: function set(t) {\n          return new s.Set(t);\n        }\n      }\n    }), s.FX.Set = s.invent({\n      create: function create(t) {\n        this.set = t;\n      }\n    }), s.Set.inherit = function () {\n      var t = [];\n\n      for (var e in s.Shape.prototype) {\n        \"function\" == typeof s.Shape.prototype[e] && \"function\" != typeof s.Set.prototype[e] && t.push(e);\n      }\n\n      for (var e in t.forEach(function (t) {\n        s.Set.prototype[t] = function () {\n          for (var e = 0, i = this.members.length; e < i; e++) {\n            this.members[e] && \"function\" == typeof this.members[e][t] && this.members[e][t].apply(this.members[e], arguments);\n          }\n\n          return \"animate\" == t ? this.fx || (this.fx = new s.FX.Set(this)) : this;\n        };\n      }), t = [], s.FX.prototype) {\n        \"function\" == typeof s.FX.prototype[e] && \"function\" != typeof s.FX.Set.prototype[e] && t.push(e);\n      }\n\n      t.forEach(function (t) {\n        s.FX.Set.prototype[t] = function () {\n          for (var e = 0, i = this.set.members.length; e < i; e++) {\n            this.set.members[e].fx[t].apply(this.set.members[e].fx, arguments);\n          }\n\n          return this;\n        };\n      });\n    }, s.extend(s.Element, {\n      data: function data(e, i, s) {\n        if (\"object\" === t(e)) for (i in e) {\n          this.data(i, e[i]);\n        } else if (arguments.length < 2) try {\n          return JSON.parse(this.attr(\"data-\" + e));\n        } catch (t) {\n          return this.attr(\"data-\" + e);\n        } else this.attr(\"data-\" + e, null === i ? null : !0 === s || \"string\" == typeof i || \"number\" == typeof i ? i : JSON.stringify(i));\n        return this;\n      }\n    }), s.extend(s.Element, {\n      remember: function remember(e, i) {\n        if (\"object\" === t(arguments[0])) for (var i in e) {\n          this.remember(i, e[i]);\n        } else {\n          if (1 == arguments.length) return this.memory()[e];\n          this.memory()[e] = i;\n        }\n        return this;\n      },\n      forget: function forget() {\n        if (0 == arguments.length) this._memory = {};else for (var t = arguments.length - 1; t >= 0; t--) {\n          delete this.memory()[arguments[t]];\n        }\n        return this;\n      },\n      memory: function memory() {\n        return this._memory || (this._memory = {});\n      }\n    }), s.get = function (t) {\n      var e = i.getElementById(function (t) {\n        var e = (t || \"\").toString().match(s.regex.reference);\n        if (e) return e[1];\n      }(t) || t);\n      return s.adopt(e);\n    }, s.select = function (t, e) {\n      return new s.Set(s.utils.map((e || i).querySelectorAll(t), function (t) {\n        return s.adopt(t);\n      }));\n    }, s.extend(s.Parent, {\n      select: function select(t) {\n        return s.select(t, this.node);\n      }\n    });\n    var y = \"abcdef\".split(\"\");\n\n    if (\"function\" != typeof e.CustomEvent) {\n      var w = function w(t, e) {\n        e = e || {\n          bubbles: !1,\n          cancelable: !1,\n          detail: void 0\n        };\n        var s = i.createEvent(\"CustomEvent\");\n        return s.initCustomEvent(t, e.bubbles, e.cancelable, e.detail), s;\n      };\n\n      w.prototype = e.Event.prototype, s.CustomEvent = w;\n    } else s.CustomEvent = e.CustomEvent;\n\n    return function (t) {\n      for (var i = 0, s = [\"moz\", \"webkit\"], a = 0; a < s.length && !e.requestAnimationFrame; ++a) {\n        t.requestAnimationFrame = t[s[a] + \"RequestAnimationFrame\"], t.cancelAnimationFrame = t[s[a] + \"CancelAnimationFrame\"] || t[s[a] + \"CancelRequestAnimationFrame\"];\n      }\n\n      t.requestAnimationFrame = t.requestAnimationFrame || function (e) {\n        var s = new Date().getTime(),\n            a = Math.max(0, 16 - (s - i)),\n            n = t.setTimeout(function () {\n          e(s + a);\n        }, a);\n        return i = s + a, n;\n      }, t.cancelAnimationFrame = t.cancelAnimationFrame || t.clearTimeout;\n    }(e), s;\n  },  true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return _at(st, st.document);\n  }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined, function () {\n    SVG.Filter = SVG.invent({\n      create: \"filter\",\n      inherit: SVG.Parent,\n      extend: {\n        source: \"SourceGraphic\",\n        sourceAlpha: \"SourceAlpha\",\n        background: \"BackgroundImage\",\n        backgroundAlpha: \"BackgroundAlpha\",\n        fill: \"FillPaint\",\n        stroke: \"StrokePaint\",\n        autoSetIn: !0,\n        put: function put(t, e) {\n          return this.add(t, e), !t.attr(\"in\") && this.autoSetIn && t.attr(\"in\", this.source), t.attr(\"result\") || t.attr(\"result\", t), t;\n        },\n        blend: function blend(t, e, i) {\n          return this.put(new SVG.BlendEffect(t, e, i));\n        },\n        colorMatrix: function colorMatrix(t, e) {\n          return this.put(new SVG.ColorMatrixEffect(t, e));\n        },\n        convolveMatrix: function convolveMatrix(t) {\n          return this.put(new SVG.ConvolveMatrixEffect(t));\n        },\n        componentTransfer: function componentTransfer(t) {\n          return this.put(new SVG.ComponentTransferEffect(t));\n        },\n        composite: function composite(t, e, i) {\n          return this.put(new SVG.CompositeEffect(t, e, i));\n        },\n        flood: function flood(t, e) {\n          return this.put(new SVG.FloodEffect(t, e));\n        },\n        offset: function offset(t, e) {\n          return this.put(new SVG.OffsetEffect(t, e));\n        },\n        image: function image(t) {\n          return this.put(new SVG.ImageEffect(t));\n        },\n        merge: function merge() {\n          var t = [void 0];\n\n          for (var e in arguments) {\n            t.push(arguments[e]);\n          }\n\n          return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t))());\n        },\n        gaussianBlur: function gaussianBlur(t, e) {\n          return this.put(new SVG.GaussianBlurEffect(t, e));\n        },\n        morphology: function morphology(t, e) {\n          return this.put(new SVG.MorphologyEffect(t, e));\n        },\n        diffuseLighting: function diffuseLighting(t, e, i) {\n          return this.put(new SVG.DiffuseLightingEffect(t, e, i));\n        },\n        displacementMap: function displacementMap(t, e, i, s, a) {\n          return this.put(new SVG.DisplacementMapEffect(t, e, i, s, a));\n        },\n        specularLighting: function specularLighting(t, e, i, s) {\n          return this.put(new SVG.SpecularLightingEffect(t, e, i, s));\n        },\n        tile: function tile() {\n          return this.put(new SVG.TileEffect());\n        },\n        turbulence: function turbulence(t, e, i, s, a) {\n          return this.put(new SVG.TurbulenceEffect(t, e, i, s, a));\n        },\n        toString: function toString() {\n          return \"url(#\" + this.attr(\"id\") + \")\";\n        }\n      }\n    }), SVG.extend(SVG.Defs, {\n      filter: function filter(t) {\n        var e = this.put(new SVG.Filter());\n        return \"function\" == typeof t && t.call(e, e), e;\n      }\n    }), SVG.extend(SVG.Container, {\n      filter: function filter(t) {\n        return this.defs().filter(t);\n      }\n    }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {\n      filter: function filter(t) {\n        return this.filterer = t instanceof SVG.Element ? t : this.doc().filter(t), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr(\"filter\", this.filterer), this.filterer;\n      },\n      unfilter: function unfilter(t) {\n        return this.filterer && !0 === t && this.filterer.remove(), delete this.filterer, this.attr(\"filter\", null);\n      }\n    }), SVG.Effect = SVG.invent({\n      create: function create() {\n        this.constructor.call(this);\n      },\n      inherit: SVG.Element,\n      extend: {\n        \"in\": function _in(t) {\n          return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in\") + '\"]').get(0) || this.attr(\"in\") : this.attr(\"in\", t);\n        },\n        result: function result(t) {\n          return null == t ? this.attr(\"result\") : this.attr(\"result\", t);\n        },\n        toString: function toString() {\n          return this.result();\n        }\n      }\n    }), SVG.ParentEffect = SVG.invent({\n      create: function create() {\n        this.constructor.call(this);\n      },\n      inherit: SVG.Parent,\n      extend: {\n        \"in\": function _in(t) {\n          return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in\") + '\"]').get(0) || this.attr(\"in\") : this.attr(\"in\", t);\n        },\n        result: function result(t) {\n          return null == t ? this.attr(\"result\") : this.attr(\"result\", t);\n        },\n        toString: function toString() {\n          return this.result();\n        }\n      }\n    });\n    var t = {\n      blend: function blend(t, e) {\n        return this.parent() && this.parent().blend(this, t, e);\n      },\n      colorMatrix: function colorMatrix(t, e) {\n        return this.parent() && this.parent().colorMatrix(t, e)[\"in\"](this);\n      },\n      convolveMatrix: function convolveMatrix(t) {\n        return this.parent() && this.parent().convolveMatrix(t)[\"in\"](this);\n      },\n      componentTransfer: function componentTransfer(t) {\n        return this.parent() && this.parent().componentTransfer(t)[\"in\"](this);\n      },\n      composite: function composite(t, e) {\n        return this.parent() && this.parent().composite(this, t, e);\n      },\n      flood: function flood(t, e) {\n        return this.parent() && this.parent().flood(t, e);\n      },\n      offset: function offset(t, e) {\n        return this.parent() && this.parent().offset(t, e)[\"in\"](this);\n      },\n      image: function image(t) {\n        return this.parent() && this.parent().image(t);\n      },\n      merge: function merge() {\n        return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));\n      },\n      gaussianBlur: function gaussianBlur(t, e) {\n        return this.parent() && this.parent().gaussianBlur(t, e)[\"in\"](this);\n      },\n      morphology: function morphology(t, e) {\n        return this.parent() && this.parent().morphology(t, e)[\"in\"](this);\n      },\n      diffuseLighting: function diffuseLighting(t, e, i) {\n        return this.parent() && this.parent().diffuseLighting(t, e, i)[\"in\"](this);\n      },\n      displacementMap: function displacementMap(t, e, i, s) {\n        return this.parent() && this.parent().displacementMap(this, t, e, i, s);\n      },\n      specularLighting: function specularLighting(t, e, i, s) {\n        return this.parent() && this.parent().specularLighting(t, e, i, s)[\"in\"](this);\n      },\n      tile: function tile() {\n        return this.parent() && this.parent().tile()[\"in\"](this);\n      },\n      turbulence: function turbulence(t, e, i, s, a) {\n        return this.parent() && this.parent().turbulence(t, e, i, s, a)[\"in\"](this);\n      }\n    };\n    SVG.extend(SVG.Effect, t), SVG.extend(SVG.ParentEffect, t), SVG.ChildEffect = SVG.invent({\n      create: function create() {\n        this.constructor.call(this);\n      },\n      inherit: SVG.Element,\n      extend: {\n        \"in\": function _in(t) {\n          this.attr(\"in\", t);\n        }\n      }\n    });\n    var e = {\n      blend: function blend(t, e, i) {\n        this.attr({\n          \"in\": t,\n          in2: e,\n          mode: i || \"normal\"\n        });\n      },\n      colorMatrix: function colorMatrix(t, e) {\n        \"matrix\" == t && (e = a(e)), this.attr({\n          type: t,\n          values: void 0 === e ? null : e\n        });\n      },\n      convolveMatrix: function convolveMatrix(t) {\n        t = a(t), this.attr({\n          order: Math.sqrt(t.split(\" \").length),\n          kernelMatrix: t\n        });\n      },\n      composite: function composite(t, e, i) {\n        this.attr({\n          \"in\": t,\n          in2: e,\n          operator: i\n        });\n      },\n      flood: function flood(t, e) {\n        this.attr(\"flood-color\", t), null != e && this.attr(\"flood-opacity\", e);\n      },\n      offset: function offset(t, e) {\n        this.attr({\n          dx: t,\n          dy: e\n        });\n      },\n      image: function image(t) {\n        this.attr(\"href\", t, SVG.xlink);\n      },\n      displacementMap: function displacementMap(t, e, i, s, a) {\n        this.attr({\n          \"in\": t,\n          in2: e,\n          scale: i,\n          xChannelSelector: s,\n          yChannelSelector: a\n        });\n      },\n      gaussianBlur: function gaussianBlur(t, e) {\n        null != t || null != e ? this.attr(\"stdDeviation\", function (t) {\n          if (!Array.isArray(t)) return t;\n\n          for (var e = 0, i = t.length, s = []; e < i; e++) {\n            s.push(t[e]);\n          }\n\n          return s.join(\" \");\n        }(Array.prototype.slice.call(arguments))) : this.attr(\"stdDeviation\", \"0 0\");\n      },\n      morphology: function morphology(t, e) {\n        this.attr({\n          operator: t,\n          radius: e\n        });\n      },\n      tile: function tile() {},\n      turbulence: function turbulence(t, e, i, s, a) {\n        this.attr({\n          numOctaves: e,\n          seed: i,\n          stitchTiles: s,\n          baseFrequency: t,\n          type: a\n        });\n      }\n    },\n        i = {\n      merge: function merge() {\n        var t;\n\n        if (arguments[0] instanceof SVG.Set) {\n          var e = this;\n          arguments[0].each(function (t) {\n            this instanceof SVG.MergeNode ? e.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e.put(new SVG.MergeNode(this));\n          });\n        } else {\n          t = Array.isArray(arguments[0]) ? arguments[0] : arguments;\n\n          for (var i = 0; i < t.length; i++) {\n            t[i] instanceof SVG.MergeNode ? this.put(t[i]) : this.put(new SVG.MergeNode(t[i]));\n          }\n        }\n      },\n      componentTransfer: function componentTransfer(t) {\n        if (this.rgb = new SVG.Set(), [\"r\", \"g\", \"b\", \"a\"].forEach(function (t) {\n          this[t] = new SVG[\"Func\" + t.toUpperCase()](\"identity\"), this.rgb.add(this[t]), this.node.appendChild(this[t].node);\n        }.bind(this)), t) for (var e in t.rgb && ([\"r\", \"g\", \"b\"].forEach(function (e) {\n          this[e].attr(t.rgb);\n        }.bind(this)), delete t.rgb), t) {\n          this[e].attr(t[e]);\n        }\n      },\n      diffuseLighting: function diffuseLighting(t, e, i) {\n        this.attr({\n          surfaceScale: t,\n          diffuseConstant: e,\n          kernelUnitLength: i\n        });\n      },\n      specularLighting: function specularLighting(t, e, i, s) {\n        this.attr({\n          surfaceScale: t,\n          diffuseConstant: e,\n          specularExponent: i,\n          kernelUnitLength: s\n        });\n      }\n    },\n        s = {\n      distantLight: function distantLight(t, e) {\n        this.attr({\n          azimuth: t,\n          elevation: e\n        });\n      },\n      pointLight: function pointLight(t, e, i) {\n        this.attr({\n          x: t,\n          y: e,\n          z: i\n        });\n      },\n      spotLight: function spotLight(t, e, i, s, a, n) {\n        this.attr({\n          x: t,\n          y: e,\n          z: i,\n          pointsAtX: s,\n          pointsAtY: a,\n          pointsAtZ: n\n        });\n      },\n      mergeNode: function mergeNode(t) {\n        this.attr(\"in\", t);\n      }\n    };\n\n    function a(t) {\n      return Array.isArray(t) && (t = new SVG.Array(t)), t.toString().replace(/^\\s+/, \"\").replace(/\\s+$/, \"\").replace(/\\s+/g, \" \");\n    }\n\n    function n() {\n      var t = function t() {};\n\n      for (var e in \"function\" == typeof arguments[arguments.length - 1] && (t = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments) {\n        for (var i in arguments[e]) {\n          t(arguments[e][i], i, arguments[e]);\n        }\n      }\n    }\n\n    [\"r\", \"g\", \"b\", \"a\"].forEach(function (t) {\n      s[\"Func\" + t.toUpperCase()] = function (t) {\n        switch (this.attr(\"type\", t), t) {\n          case \"table\":\n            this.attr(\"tableValues\", arguments[1]);\n            break;\n\n          case \"linear\":\n            this.attr(\"slope\", arguments[1]), this.attr(\"intercept\", arguments[2]);\n            break;\n\n          case \"gamma\":\n            this.attr(\"amplitude\", arguments[1]), this.attr(\"exponent\", arguments[2]), this.attr(\"offset\", arguments[2]);\n        }\n      };\n    }), n(e, function (t, e) {\n      var i = e.charAt(0).toUpperCase() + e.slice(1);\n      SVG[i + \"Effect\"] = SVG.invent({\n        create: function create() {\n          this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments), this.result(this.attr(\"id\") + \"Out\");\n        },\n        inherit: SVG.Effect,\n        extend: {}\n      });\n    }), n(i, function (t, e) {\n      var i = e.charAt(0).toUpperCase() + e.slice(1);\n      SVG[i + \"Effect\"] = SVG.invent({\n        create: function create() {\n          this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments), this.result(this.attr(\"id\") + \"Out\");\n        },\n        inherit: SVG.ParentEffect,\n        extend: {}\n      });\n    }), n(s, function (t, e) {\n      var i = e.charAt(0).toUpperCase() + e.slice(1);\n      SVG[i] = SVG.invent({\n        create: function create() {\n          this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments);\n        },\n        inherit: SVG.ChildEffect,\n        extend: {}\n      });\n    }), SVG.extend(SVG.MergeEffect, {\n      \"in\": function _in(t) {\n        return t instanceof SVG.MergeNode ? this.add(t, 0) : this.add(new SVG.MergeNode(t), 0), this;\n      }\n    }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {\n      in2: function in2(t) {\n        return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in2\") + '\"]').get(0) || this.attr(\"in2\") : this.attr(\"in2\", t);\n      }\n    }), SVG.filter = {\n      sepiatone: [.343, .669, .119, 0, 0, .249, .626, .13, 0, 0, .172, .334, .111, 0, 0, 0, 0, 0, 1, 0]\n    };\n  }.call(void 0), function () {\n    function t(t, a, n, r, o, l, h) {\n      for (var c = t.slice(a, n || h), d = r.slice(o, l || h), u = 0, g = {\n        pos: [0, 0],\n        start: [0, 0]\n      }, f = {\n        pos: [0, 0],\n        start: [0, 0]\n      };;) {\n        if (c[u] = e.call(g, c[u]), d[u] = e.call(f, d[u]), c[u][0] != d[u][0] || \"M\" == c[u][0] || \"A\" == c[u][0] && (c[u][4] != d[u][4] || c[u][5] != d[u][5]) ? (Array.prototype.splice.apply(c, [u, 1].concat(s.call(g, c[u]))), Array.prototype.splice.apply(d, [u, 1].concat(s.call(f, d[u])))) : (c[u] = i.call(g, c[u]), d[u] = i.call(f, d[u])), ++u == c.length && u == d.length) break;\n        u == c.length && c.push([\"C\", g.pos[0], g.pos[1], g.pos[0], g.pos[1], g.pos[0], g.pos[1]]), u == d.length && d.push([\"C\", f.pos[0], f.pos[1], f.pos[0], f.pos[1], f.pos[0], f.pos[1]]);\n      }\n\n      return {\n        start: c,\n        dest: d\n      };\n    }\n\n    function e(t) {\n      switch (t[0]) {\n        case \"z\":\n        case \"Z\":\n          t[0] = \"L\", t[1] = this.start[0], t[2] = this.start[1];\n          break;\n\n        case \"H\":\n          t[0] = \"L\", t[2] = this.pos[1];\n          break;\n\n        case \"V\":\n          t[0] = \"L\", t[2] = t[1], t[1] = this.pos[0];\n          break;\n\n        case \"T\":\n          t[0] = \"Q\", t[3] = t[1], t[4] = t[2], t[1] = this.reflection[1], t[2] = this.reflection[0];\n          break;\n\n        case \"S\":\n          t[0] = \"C\", t[6] = t[4], t[5] = t[3], t[4] = t[2], t[3] = t[1], t[2] = this.reflection[1], t[1] = this.reflection[0];\n      }\n\n      return t;\n    }\n\n    function i(t) {\n      var e = t.length;\n      return this.pos = [t[e - 2], t[e - 1]], -1 != \"SCQT\".indexOf(t[0]) && (this.reflection = [2 * this.pos[0] - t[e - 4], 2 * this.pos[1] - t[e - 3]]), t;\n    }\n\n    function s(t) {\n      var e = [t];\n\n      switch (t[0]) {\n        case \"M\":\n          return this.pos = this.start = [t[1], t[2]], e;\n\n        case \"L\":\n          t[5] = t[3] = t[1], t[6] = t[4] = t[2], t[1] = this.pos[0], t[2] = this.pos[1];\n          break;\n\n        case \"Q\":\n          t[6] = t[4], t[5] = t[3], t[4] = 1 * t[4] / 3 + 2 * t[2] / 3, t[3] = 1 * t[3] / 3 + 2 * t[1] / 3, t[2] = 1 * this.pos[1] / 3 + 2 * t[2] / 3, t[1] = 1 * this.pos[0] / 3 + 2 * t[1] / 3;\n          break;\n\n        case \"A\":\n          t = (e = function (t, e) {\n            var i,\n                s,\n                a,\n                n,\n                r,\n                o,\n                l,\n                h,\n                c,\n                d,\n                u,\n                g,\n                f,\n                p,\n                x,\n                b,\n                m,\n                v,\n                y,\n                w,\n                k,\n                A,\n                S,\n                C,\n                L,\n                z,\n                P = Math.abs(e[1]),\n                M = Math.abs(e[2]),\n                E = e[3] % 360,\n                T = e[4],\n                X = e[5],\n                I = e[6],\n                Y = e[7],\n                F = new SVG.Point(t),\n                R = new SVG.Point(I, Y),\n                D = [];\n            if (0 === P || 0 === M || F.x === R.x && F.y === R.y) return [[\"C\", F.x, F.y, R.x, R.y, R.x, R.y]];\n            i = new SVG.Point((F.x - R.x) / 2, (F.y - R.y) / 2).transform(new SVG.Matrix().rotate(E)), (s = i.x * i.x / (P * P) + i.y * i.y / (M * M)) > 1 && (s = Math.sqrt(s), P *= s, M *= s);\n            a = new SVG.Matrix().rotate(E).scale(1 / P, 1 / M).rotate(-E), F = F.transform(a), R = R.transform(a), n = [R.x - F.x, R.y - F.y], o = n[0] * n[0] + n[1] * n[1], r = Math.sqrt(o), n[0] /= r, n[1] /= r, l = o < 4 ? Math.sqrt(1 - o / 4) : 0, T === X && (l *= -1);\n            h = new SVG.Point((R.x + F.x) / 2 + l * -n[1], (R.y + F.y) / 2 + l * n[0]), c = new SVG.Point(F.x - h.x, F.y - h.y), d = new SVG.Point(R.x - h.x, R.y - h.y), u = Math.acos(c.x / Math.sqrt(c.x * c.x + c.y * c.y)), c.y < 0 && (u *= -1);\n            g = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)), d.y < 0 && (g *= -1);\n            X && u > g && (g += 2 * Math.PI);\n            !X && u < g && (g -= 2 * Math.PI);\n\n            for (p = Math.ceil(2 * Math.abs(u - g) / Math.PI), b = [], m = u, f = (g - u) / p, x = 4 * Math.tan(f / 4) / 3, k = 0; k <= p; k++) {\n              y = Math.cos(m), v = Math.sin(m), w = new SVG.Point(h.x + y, h.y + v), b[k] = [new SVG.Point(w.x + x * v, w.y - x * y), w, new SVG.Point(w.x - x * v, w.y + x * y)], m += f;\n            }\n\n            for (b[0][0] = b[0][1].clone(), b[b.length - 1][2] = b[b.length - 1][1].clone(), a = new SVG.Matrix().rotate(E).scale(P, M).rotate(-E), k = 0, A = b.length; k < A; k++) {\n              b[k][0] = b[k][0].transform(a), b[k][1] = b[k][1].transform(a), b[k][2] = b[k][2].transform(a);\n            }\n\n            for (k = 1, A = b.length; k < A; k++) {\n              w = b[k - 1][2], S = w.x, C = w.y, w = b[k][0], L = w.x, z = w.y, w = b[k][1], I = w.x, Y = w.y, D.push([\"C\", S, C, L, z, I, Y]);\n            }\n\n            return D;\n          }(this.pos, t))[0];\n\n      }\n\n      return t[0] = \"C\", this.pos = [t[5], t[6]], this.reflection = [2 * t[5] - t[3], 2 * t[6] - t[4]], e;\n    }\n\n    function a(t, e) {\n      if (!1 === e) return !1;\n\n      for (var i = e, s = t.length; i < s; ++i) {\n        if (\"M\" == t[i][0]) return i;\n      }\n\n      return !1;\n    }\n\n    SVG.extend(SVG.PathArray, {\n      morph: function morph(e) {\n        for (var i = this.value, s = this.parse(e), n = 0, r = 0, o = !1, l = !1; !1 !== n || !1 !== r;) {\n          var h;\n          o = a(i, !1 !== n && n + 1), l = a(s, !1 !== r && r + 1), !1 === n && (n = 0 == (h = new SVG.PathArray(c.start).bbox()).height || 0 == h.width ? i.push(i[0]) - 1 : i.push([\"M\", h.x + h.width / 2, h.y + h.height / 2]) - 1), !1 === r && (r = 0 == (h = new SVG.PathArray(c.dest).bbox()).height || 0 == h.width ? s.push(s[0]) - 1 : s.push([\"M\", h.x + h.width / 2, h.y + h.height / 2]) - 1);\n          var c = t(i, n, o, s, r, l);\n          i = i.slice(0, n).concat(c.start, !1 === o ? [] : i.slice(o)), s = s.slice(0, r).concat(c.dest, !1 === l ? [] : s.slice(l)), n = !1 !== o && n + c.start.length, r = !1 !== l && r + c.dest.length;\n        }\n\n        return this.value = i, this.destination = new SVG.PathArray(), this.destination.value = s, this;\n      }\n    });\n  }(), function () {\n    function t(t) {\n      t.remember(\"_draggable\", this), this.el = t;\n    }\n\n    t.prototype.init = function (t, e) {\n      var i = this;\n      this.constraint = t, this.value = e, this.el.on(\"mousedown.drag\", function (t) {\n        i.start(t);\n      }), this.el.on(\"touchstart.drag\", function (t) {\n        i.start(t);\n      });\n    }, t.prototype.transformPoint = function (t, e) {\n      var i = (t = t || window.event).changedTouches && t.changedTouches[0] || t;\n      return this.p.x = i.pageX - (e || 0), this.p.y = i.pageY, this.p.matrixTransform(this.m);\n    }, t.prototype.getBBox = function () {\n      var t = this.el.bbox();\n      return this.el instanceof SVG.Nested && (t = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t.x = this.el.x(), t.y = this.el.y()), t;\n    }, t.prototype.start = function (t) {\n      if (\"click\" != t.type && \"mousedown\" != t.type && \"mousemove\" != t.type || 1 == (t.which || t.buttons)) {\n        var e = this;\n        this.el.fire(\"beforedrag\", {\n          event: t,\n          handler: this\n        }), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();\n        var i,\n            s = this.getBBox();\n        if (this.el instanceof SVG.Text) switch (i = this.el.node.getComputedTextLength(), this.el.attr(\"text-anchor\")) {\n          case \"middle\":\n            i /= 2;\n            break;\n\n          case \"start\":\n            i = 0;\n        }\n        this.startPoints = {\n          point: this.transformPoint(t, i),\n          box: s,\n          transform: this.el.transform()\n        }, SVG.on(window, \"mousemove.drag\", function (t) {\n          e.drag(t);\n        }), SVG.on(window, \"touchmove.drag\", function (t) {\n          e.drag(t);\n        }), SVG.on(window, \"mouseup.drag\", function (t) {\n          e.end(t);\n        }), SVG.on(window, \"touchend.drag\", function (t) {\n          e.end(t);\n        }), this.el.fire(\"dragstart\", {\n          event: t,\n          p: this.startPoints.point,\n          m: this.m,\n          handler: this\n        }), t.preventDefault(), t.stopPropagation();\n      }\n    }, t.prototype.drag = function (t) {\n      var e = this.getBBox(),\n          i = this.transformPoint(t),\n          s = this.startPoints.box.x + i.x - this.startPoints.point.x,\n          a = this.startPoints.box.y + i.y - this.startPoints.point.y,\n          n = this.constraint,\n          r = i.x - this.startPoints.point.x,\n          o = i.y - this.startPoints.point.y,\n          l = new CustomEvent(\"dragmove\", {\n        detail: {\n          event: t,\n          p: i,\n          m: this.m,\n          handler: this\n        },\n        cancelable: !0\n      });\n      if (this.el.fire(l), l.defaultPrevented) return i;\n\n      if (\"function\" == typeof n) {\n        var h = n.call(this.el, s, a, this.m);\n        \"boolean\" == typeof h && (h = {\n          x: h,\n          y: h\n        }), !0 === h.x ? this.el.x(s) : !1 !== h.x && this.el.x(h.x), !0 === h.y ? this.el.y(a) : !1 !== h.y && this.el.y(h.y);\n      } else \"object\" == _typeof(n) && (null != n.minX && s < n.minX ? s = n.minX : null != n.maxX && s > n.maxX - e.width && (s = n.maxX - e.width), null != n.minY && a < n.minY ? a = n.minY : null != n.maxY && a > n.maxY - e.height && (a = n.maxY - e.height), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({\n        x: r,\n        y: o\n      }, !0) : this.el.move(s, a));\n\n      return i;\n    }, t.prototype.end = function (t) {\n      var e = this.drag(t);\n      this.el.fire(\"dragend\", {\n        event: t,\n        p: e,\n        m: this.m,\n        handler: this\n      }), SVG.off(window, \"mousemove.drag\"), SVG.off(window, \"touchmove.drag\"), SVG.off(window, \"mouseup.drag\"), SVG.off(window, \"touchend.drag\");\n    }, SVG.extend(SVG.Element, {\n      draggable: function draggable(e, i) {\n        \"function\" != typeof e && \"object\" != _typeof(e) || (i = e, e = !0);\n        var s = this.remember(\"_draggable\") || new t(this);\n        return (e = void 0 === e || e) ? s.init(i || {}, e) : (this.off(\"mousedown.drag\"), this.off(\"touchstart.drag\")), this;\n      }\n    });\n  }.call(void 0), function () {\n    function t(t) {\n      this.el = t, t.remember(\"_selectHandler\", this), this.pointSelection = {\n        isSelected: !1\n      }, this.rectSelection = {\n        isSelected: !1\n      };\n    }\n\n    t.prototype.init = function (t, e) {\n      var i = this.el.bbox();\n\n      for (var s in this.options = {}, this.el.selectize.defaults) {\n        this.options[s] = this.el.selectize.defaults[s], void 0 !== e[s] && (this.options[s] = e[s]);\n      }\n\n      this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)), this.options.deepSelect && -1 !== [\"line\", \"polyline\", \"polygon\"].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t), this.observe(), this.cleanup();\n    }, t.prototype.selectPoints = function (t) {\n      return this.pointSelection.isSelected = t, this.pointSelection.set ? this : (this.pointSelection.set = this.parent.set(), this.drawCircles(), this);\n    }, t.prototype.getPointArray = function () {\n      var t = this.el.bbox();\n      return this.el.array().valueOf().map(function (e) {\n        return [e[0] - t.x, e[1] - t.y];\n      });\n    }, t.prototype.drawCircles = function () {\n      for (var t = this, e = this.getPointArray(), i = 0, s = e.length; i < s; ++i) {\n        var a = function (e) {\n          return function (i) {\n            (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();\n            var s = i.pageX || i.touches[0].pageX,\n                a = i.pageY || i.touches[0].pageY;\n            t.el.fire(\"point\", {\n              x: s,\n              y: a,\n              i: e,\n              event: i\n            });\n          };\n        }(i);\n\n        this.pointSelection.set.add(this.nested.circle(this.options.radius).center(e[i][0], e[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + \"_point\").on(\"touchstart\", a).on(\"mousedown\", a));\n      }\n    }, t.prototype.updatePointSelection = function () {\n      var t = this.getPointArray();\n      this.pointSelection.set.each(function (e) {\n        this.cx() === t[e][0] && this.cy() === t[e][1] || this.center(t[e][0], t[e][1]);\n      });\n    }, t.prototype.updateRectSelection = function () {\n      var t = this.el.bbox();\n      this.rectSelection.set.get(0).attr({\n        width: t.width,\n        height: t.height\n      }), this.options.points && (this.rectSelection.set.get(2).center(t.width, 0), this.rectSelection.set.get(3).center(t.width, t.height), this.rectSelection.set.get(4).center(0, t.height), this.rectSelection.set.get(5).center(t.width / 2, 0), this.rectSelection.set.get(6).center(t.width, t.height / 2), this.rectSelection.set.get(7).center(t.width / 2, t.height), this.rectSelection.set.get(8).center(0, t.height / 2)), this.options.rotationPoint && (this.options.points ? this.rectSelection.set.get(9).center(t.width / 2, 20) : this.rectSelection.set.get(1).center(t.width / 2, 20));\n    }, t.prototype.selectRect = function (t) {\n      var e = this,\n          i = this.el.bbox();\n\n      function s(t) {\n        return function (i) {\n          (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();\n          var s = i.pageX || i.touches[0].pageX,\n              a = i.pageY || i.touches[0].pageY;\n          e.el.fire(t, {\n            x: s,\n            y: a,\n            event: i\n          });\n        };\n      }\n\n      if (this.rectSelection.isSelected = t, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i.width, i.height).addClass(this.options.classRect)), this.options.points && !this.rectSelection.set.get(1)) {\n        var a = \"touchstart\",\n            n = \"mousedown\";\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, 0).attr(\"class\", this.options.classPoints + \"_lt\").on(n, s(\"lt\")).on(a, s(\"lt\"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, 0).attr(\"class\", this.options.classPoints + \"_rt\").on(n, s(\"rt\")).on(a, s(\"rt\"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, i.height).attr(\"class\", this.options.classPoints + \"_rb\").on(n, s(\"rb\")).on(a, s(\"rb\"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, i.height).attr(\"class\", this.options.classPoints + \"_lb\").on(n, s(\"lb\")).on(a, s(\"lb\"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, 0).attr(\"class\", this.options.classPoints + \"_t\").on(n, s(\"t\")).on(a, s(\"t\"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, i.height / 2).attr(\"class\", this.options.classPoints + \"_r\").on(n, s(\"r\")).on(a, s(\"r\"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, i.height).attr(\"class\", this.options.classPoints + \"_b\").on(n, s(\"b\")).on(a, s(\"b\"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, i.height / 2).attr(\"class\", this.options.classPoints + \"_l\").on(n, s(\"l\")).on(a, s(\"l\"))), this.rectSelection.set.each(function () {\n          this.addClass(e.options.classPoints);\n        });\n      }\n\n      if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {\n        var r = function r(t) {\n          (t = t || window.event).preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation();\n          var i = t.pageX || t.touches[0].pageX,\n              s = t.pageY || t.touches[0].pageY;\n          e.el.fire(\"rot\", {\n            x: i,\n            y: s,\n            event: t\n          });\n        };\n\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, 20).attr(\"class\", this.options.classPoints + \"_rot\").on(\"touchstart\", r).on(\"mousedown\", r));\n      }\n    }, t.prototype.handler = function () {\n      var t = this.el.bbox();\n      this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();\n    }, t.prototype.observe = function () {\n      var t = this;\n      if (MutationObserver) {\n        if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function () {\n          t.handler();\n        }), this.observerInst.observe(this.el.node, {\n          attributes: !0\n        });else try {\n          this.observerInst.disconnect(), delete this.observerInst;\n        } catch (t) {}\n      } else this.el.off(\"DOMAttrModified.select\"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on(\"DOMAttrModified.select\", function () {\n        t.handler();\n      });\n    }, t.prototype.cleanup = function () {\n      !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function () {\n        this.remove();\n      }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function () {\n        this.remove();\n      }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);\n    }, SVG.extend(SVG.Element, {\n      selectize: function selectize(e, i) {\n        return \"object\" == _typeof(e) && (i = e, e = !0), (this.remember(\"_selectHandler\") || new t(this)).init(void 0 === e || e, i || {}), this;\n      }\n    }), SVG.Element.prototype.selectize.defaults = {\n      points: !0,\n      classRect: \"svg_select_boundingRect\",\n      classPoints: \"svg_select_points\",\n      radius: 7,\n      rotationPoint: !0,\n      deepSelect: !1\n    };\n  }(), function () {\n    (function () {\n      function t(t) {\n        t.remember(\"_resizeHandler\", this), this.el = t, this.parameters = {}, this.lastUpdateCall = null, this.p = t.doc().node.createSVGPoint();\n      }\n\n      t.prototype.transformPoint = function (t, e, i) {\n        return this.p.x = t - (this.offset.x - window.pageXOffset), this.p.y = e - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i || this.m);\n      }, t.prototype._extractPosition = function (t) {\n        return {\n          x: null != t.clientX ? t.clientX : t.touches[0].clientX,\n          y: null != t.clientY ? t.clientY : t.touches[0].clientY\n        };\n      }, t.prototype.init = function (t) {\n        var e = this;\n\n        if (this.stop(), \"stop\" !== t) {\n          for (var i in this.options = {}, this.el.resize.defaults) {\n            this.options[i] = this.el.resize.defaults[i], void 0 !== t[i] && (this.options[i] = t[i]);\n          }\n\n          this.el.on(\"lt.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"rt.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"rb.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"lb.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"t.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"r.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"b.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"l.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"rot.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"point.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.update();\n        }\n      }, t.prototype.stop = function () {\n        return this.el.off(\"lt.resize\"), this.el.off(\"rt.resize\"), this.el.off(\"rb.resize\"), this.el.off(\"lb.resize\"), this.el.off(\"t.resize\"), this.el.off(\"r.resize\"), this.el.off(\"b.resize\"), this.el.off(\"l.resize\"), this.el.off(\"rot.resize\"), this.el.off(\"point.resize\"), this;\n      }, t.prototype.resize = function (t) {\n        var e = this;\n        this.m = this.el.node.getScreenCTM().inverse(), this.offset = {\n          x: window.pageXOffset,\n          y: window.pageYOffset\n        };\n\n        var i = this._extractPosition(t.detail.event);\n\n        if (this.parameters = {\n          type: this.el.type,\n          p: this.transformPoint(i.x, i.y),\n          x: t.detail.x,\n          y: t.detail.y,\n          box: this.el.bbox(),\n          rotation: this.el.transform().rotation\n        }, \"text\" === this.el.type && (this.parameters.fontSize = this.el.attr()[\"font-size\"]), void 0 !== t.detail.i) {\n          var s = this.el.array().valueOf();\n          this.parameters.i = t.detail.i, this.parameters.pointCoords = [s[t.detail.i][0], s[t.detail.i][1]];\n        }\n\n        switch (t.type) {\n          case \"lt\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e);\n\n              if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height - i[1] > 0) {\n                if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize - i[0]);\n                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y + i[1]).size(this.parameters.box.width - i[0], this.parameters.box.height - i[1]);\n              }\n            };\n\n            break;\n\n          case \"rt\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 2);\n\n              if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height - i[1] > 0) {\n                if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize + i[0]);\n                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).size(this.parameters.box.width + i[0], this.parameters.box.height - i[1]);\n              }\n            };\n\n            break;\n\n          case \"rb\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 0);\n\n              if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height + i[1] > 0) {\n                if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize + i[0]);\n                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i[0], this.parameters.box.height + i[1]);\n              }\n            };\n\n            break;\n\n          case \"lb\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 1);\n\n              if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height + i[1] > 0) {\n                if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize - i[0]);\n                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).size(this.parameters.box.width - i[0], this.parameters.box.height + i[1]);\n              }\n            };\n\n            break;\n\n          case \"t\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 2);\n\n              if (this.parameters.box.height - i[1] > 0) {\n                if (\"text\" === this.parameters.type) return;\n                this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).height(this.parameters.box.height - i[1]);\n              }\n            };\n\n            break;\n\n          case \"r\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 0);\n\n              if (this.parameters.box.width + i[0] > 0) {\n                if (\"text\" === this.parameters.type) return;\n                this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i[0]);\n              }\n            };\n\n            break;\n\n          case \"b\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 0);\n\n              if (this.parameters.box.height + i[1] > 0) {\n                if (\"text\" === this.parameters.type) return;\n                this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i[1]);\n              }\n            };\n\n            break;\n\n          case \"l\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 1);\n\n              if (this.parameters.box.width - i[0] > 0) {\n                if (\"text\" === this.parameters.type) return;\n                this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).width(this.parameters.box.width - i[0]);\n              }\n            };\n\n            break;\n\n          case \"rot\":\n            this.calc = function (t, e) {\n              var i = t + this.parameters.p.x,\n                  s = e + this.parameters.p.y,\n                  a = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2),\n                  n = 180 * (Math.atan2(s - this.parameters.box.y - this.parameters.box.height / 2, i - this.parameters.box.x - this.parameters.box.width / 2) - a) / Math.PI;\n              this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(this.parameters.rotation + n - n % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);\n            };\n\n            break;\n\n          case \"point\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, this.parameters.pointCoords[0], this.parameters.pointCoords[1]),\n                  s = this.el.array().valueOf();\n              s[this.parameters.i][0] = this.parameters.pointCoords[0] + i[0], s[this.parameters.i][1] = this.parameters.pointCoords[1] + i[1], this.el.plot(s);\n            };\n\n        }\n\n        this.el.fire(\"resizestart\", {\n          dx: this.parameters.x,\n          dy: this.parameters.y,\n          event: t\n        }), SVG.on(window, \"touchmove.resize\", function (t) {\n          e.update(t || window.event);\n        }), SVG.on(window, \"touchend.resize\", function () {\n          e.done();\n        }), SVG.on(window, \"mousemove.resize\", function (t) {\n          e.update(t || window.event);\n        }), SVG.on(window, \"mouseup.resize\", function () {\n          e.done();\n        });\n      }, t.prototype.update = function (t) {\n        if (t) {\n          var e = this._extractPosition(t),\n              i = this.transformPoint(e.x, e.y),\n              s = i.x - this.parameters.p.x,\n              a = i.y - this.parameters.p.y;\n\n          this.lastUpdateCall = [s, a], this.calc(s, a), this.el.fire(\"resizing\", {\n            dx: s,\n            dy: a,\n            event: t\n          });\n        } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\n      }, t.prototype.done = function () {\n        this.lastUpdateCall = null, SVG.off(window, \"mousemove.resize\"), SVG.off(window, \"mouseup.resize\"), SVG.off(window, \"touchmove.resize\"), SVG.off(window, \"touchend.resize\"), this.el.fire(\"resizedone\");\n      }, t.prototype.snapToGrid = function (t, e, i, s) {\n        var a;\n        return void 0 !== s ? a = [(i + t) % this.options.snapToGrid, (s + e) % this.options.snapToGrid] : (i = null == i ? 3 : i, a = [(this.parameters.box.x + t + (1 & i ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e + (2 & i ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t -= Math.abs(a[0]) < this.options.snapToGrid / 2 ? a[0] : a[0] - (t < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e -= Math.abs(a[1]) < this.options.snapToGrid / 2 ? a[1] : a[1] - (e < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t, e, i, s);\n      }, t.prototype.constraintToBox = function (t, e, i, s) {\n        var a,\n            n,\n            r = this.options.constraint || {};\n        return void 0 !== s ? (a = i, n = s) : (a = this.parameters.box.x + (1 & i ? 0 : this.parameters.box.width), n = this.parameters.box.y + (2 & i ? 0 : this.parameters.box.height)), void 0 !== r.minX && a + t < r.minX && (t = r.minX - a), void 0 !== r.maxX && a + t > r.maxX && (t = r.maxX - a), void 0 !== r.minY && n + e < r.minY && (e = r.minY - n), void 0 !== r.maxY && n + e > r.maxY && (e = r.maxY - n), [t, e];\n      }, t.prototype.checkAspectRatio = function (t) {\n        if (!this.options.saveAspectRatio) return t;\n        var e = t.slice(),\n            i = this.parameters.box.width / this.parameters.box.height,\n            s = this.parameters.box.width + t[0],\n            a = this.parameters.box.height - t[1],\n            n = s / a;\n        return n < i ? e[1] = s / i - this.parameters.box.height : n > i && (e[0] = this.parameters.box.width - a * i), e;\n      }, SVG.extend(SVG.Element, {\n        resize: function resize(e) {\n          return (this.remember(\"_resizeHandler\") || new t(this)).init(e || {}), this;\n        }\n      }), SVG.Element.prototype.resize.defaults = {\n        snapToAngle: .1,\n        snapToGrid: 1,\n        constraint: {},\n        saveAspectRatio: !1\n      };\n    }).call(this);\n  }();\n  return function (t, e) {\n    void 0 === e && (e = {});\n    var i = e.insertAt;\n\n    if (t && \"undefined\" != typeof document) {\n      var s = document.head || document.getElementsByTagName(\"head\")[0],\n          a = document.createElement(\"style\");\n      a.type = \"text/css\", \"top\" === i && s.firstChild ? s.insertBefore(a, s.firstChild) : s.appendChild(a), a.styleSheet ? a.styleSheet.cssText = t : a.appendChild(document.createTextNode(t));\n    }\n  }('.apexcharts-canvas {\\n  position: relative;\\n  user-select: none;\\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\\n}\\n\\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\\n.apexcharts-canvas ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n  width: 6px;\\n}\\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  background-color: rgba(0,0,0,.5);\\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5);\\n}\\n.apexcharts-canvas.dark {\\n  background: #343F57;\\n}\\n\\n.apexcharts-inner {\\n  position: relative;\\n}\\n\\n.legend-mouseover-inactive {\\n  transition: 0.15s ease all;\\n  opacity: 0.20;\\n}\\n\\n.apexcharts-series-collapsed {\\n  opacity: 0;\\n}\\n\\n.apexcharts-gridline, .apexcharts-text {\\n  pointer-events: none;\\n}\\n\\n.apexcharts-tooltip {\\n  border-radius: 5px;\\n  box-shadow: 2px 2px 6px -4px #999;\\n  cursor: default;\\n  font-size: 14px;\\n  left: 62px;\\n  opacity: 0;\\n  pointer-events: none;\\n  position: absolute;\\n  top: 20px;\\n  overflow: hidden;\\n  white-space: nowrap;\\n  z-index: 12;\\n  transition: 0.15s ease all;\\n}\\n.apexcharts-tooltip.light {\\n  border: 1px solid #e3e3e3;\\n  background: rgba(255, 255, 255, 0.96);\\n}\\n.apexcharts-tooltip.dark {\\n  color: #fff;\\n  background: rgba(30,30,30, 0.8);\\n}\\n.apexcharts-tooltip * {\\n  font-family: inherit;\\n}\\n\\n.apexcharts-tooltip .apexcharts-marker,\\n.apexcharts-area-series .apexcharts-area,\\n.apexcharts-line {\\n  pointer-events: none;\\n}\\n\\n.apexcharts-tooltip.active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-tooltip-title {\\n  padding: 6px;\\n  font-size: 15px;\\n  margin-bottom: 4px;\\n}\\n.apexcharts-tooltip.light .apexcharts-tooltip-title {\\n  background: #ECEFF1;\\n  border-bottom: 1px solid #ddd;\\n}\\n.apexcharts-tooltip.dark .apexcharts-tooltip-title {\\n  background: rgba(0, 0, 0, 0.7);\\n  border-bottom: 1px solid #0e1726;\\n}\\n\\n.apexcharts-tooltip-text-value,\\n.apexcharts-tooltip-text-z-value {\\n  display: inline-block;\\n  font-weight: 600;\\n  margin-left: 5px;\\n}\\n\\n.apexcharts-tooltip-text-z-label:empty,\\n.apexcharts-tooltip-text-z-value:empty {\\n  display: none;\\n}\\n\\n.apexcharts-tooltip-text-value, \\n.apexcharts-tooltip-text-z-value {\\n  font-weight: 600;\\n}\\n\\n.apexcharts-tooltip-marker {\\n  width: 12px;\\n  height: 12px;\\n  position: relative;\\n  top: 0px;\\n  margin-right: 10px;\\n  border-radius: 50%;\\n}\\n\\n.apexcharts-tooltip-series-group {\\n  padding: 0 10px;\\n  display: none;\\n  text-align: left;\\n  justify-content: left;\\n  align-items: center;\\n}\\n\\n.apexcharts-tooltip-series-group.active .apexcharts-tooltip-marker {\\n  opacity: 1;\\n}\\n.apexcharts-tooltip-series-group.active, .apexcharts-tooltip-series-group:last-child {\\n  padding-bottom: 4px;\\n}\\n.apexcharts-tooltip-series-group-hidden {\\n  opacity: 0;\\n  height: 0;\\n  line-height: 0;\\n  padding: 0 !important;\\n}\\n.apexcharts-tooltip-y-group {\\n  padding: 6px 0 5px;\\n}\\n.apexcharts-tooltip-candlestick {\\n  padding: 4px 8px;\\n}\\n.apexcharts-tooltip-candlestick > div {\\n  margin: 4px 0;\\n}\\n.apexcharts-tooltip-candlestick span.value {\\n  font-weight: bold;\\n}\\n\\n.apexcharts-tooltip-rangebar {\\n  padding: 5px 8px;\\n}\\n\\n.apexcharts-tooltip-rangebar .category {\\n  font-weight: 600;\\n  color: #777;\\n}\\n\\n.apexcharts-tooltip-rangebar .series-name {\\n  font-weight: bold;\\n  display: block;\\n  margin-bottom: 5px;\\n}\\n\\n.apexcharts-xaxistooltip {\\n  opacity: 0;\\n  padding: 9px 10px;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n\\tbackground: #ECEFF1;\\n  border: 1px solid #90A4AE;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-xaxistooltip.dark {\\n  background: rgba(0, 0, 0, 0.7);\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  color: #fff;\\n}\\n\\n.apexcharts-xaxistooltip:after, .apexcharts-xaxistooltip:before {\\n\\tleft: 50%;\\n\\tborder: solid transparent;\\n\\tcontent: \" \";\\n\\theight: 0;\\n\\twidth: 0;\\n\\tposition: absolute;\\n\\tpointer-events: none;\\n}\\n\\n.apexcharts-xaxistooltip:after {\\n\\tborder-color: rgba(236, 239, 241, 0);\\n\\tborder-width: 6px;\\n\\tmargin-left: -6px;\\n}\\n.apexcharts-xaxistooltip:before {\\n\\tborder-color: rgba(144, 164, 174, 0);\\n\\tborder-width: 7px;\\n\\tmargin-left: -7px;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after, .apexcharts-xaxistooltip-bottom:before {\\n  bottom: 100%;\\n}\\n\\n.apexcharts-xaxistooltip-top:after, .apexcharts-xaxistooltip-top:before {\\n  top: 100%;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after {\\n  border-bottom-color: #ECEFF1;\\n}\\n.apexcharts-xaxistooltip-bottom:before {\\n  border-bottom-color: #90A4AE;\\n}\\n\\n.apexcharts-xaxistooltip-bottom.dark:after {\\n  border-bottom-color: rgba(0, 0, 0, 0.5);\\n}\\n.apexcharts-xaxistooltip-bottom.dark:before {\\n  border-bottom-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip-top:after {\\n  border-top-color:#ECEFF1\\n}\\n.apexcharts-xaxistooltip-top:before {\\n  border-top-color: #90A4AE;\\n}\\n.apexcharts-xaxistooltip-top.dark:after {\\n  border-top-color:rgba(0, 0, 0, 0.5);\\n}\\n.apexcharts-xaxistooltip-top.dark:before {\\n  border-top-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n\\n.apexcharts-xaxistooltip.active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-yaxistooltip {\\n  opacity: 0;\\n  padding: 4px 10px;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n\\tbackground: #ECEFF1;\\n  border: 1px solid #90A4AE;\\n}\\n\\n.apexcharts-yaxistooltip.dark {\\n  background: rgba(0, 0, 0, 0.7);\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  color: #fff;\\n}\\n\\n.apexcharts-yaxistooltip:after, .apexcharts-yaxistooltip:before {\\n\\ttop: 50%;\\n\\tborder: solid transparent;\\n\\tcontent: \" \";\\n\\theight: 0;\\n\\twidth: 0;\\n\\tposition: absolute;\\n\\tpointer-events: none;\\n}\\n.apexcharts-yaxistooltip:after {\\n\\tborder-color: rgba(236, 239, 241, 0);\\n\\tborder-width: 6px;\\n\\tmargin-top: -6px;\\n}\\n.apexcharts-yaxistooltip:before {\\n\\tborder-color: rgba(144, 164, 174, 0);\\n\\tborder-width: 7px;\\n\\tmargin-top: -7px;\\n}\\n\\n.apexcharts-yaxistooltip-left:after, .apexcharts-yaxistooltip-left:before {\\n  left: 100%;\\n}\\n\\n.apexcharts-yaxistooltip-right:after, .apexcharts-yaxistooltip-right:before {\\n  right: 100%;\\n}\\n\\n.apexcharts-yaxistooltip-left:after {\\n  border-left-color: #ECEFF1;\\n}\\n.apexcharts-yaxistooltip-left:before {\\n  border-left-color: #90A4AE;\\n}\\n.apexcharts-yaxistooltip-left.dark:after {\\n  border-left-color: rgba(0, 0, 0, 0.5);\\n}\\n.apexcharts-yaxistooltip-left.dark:before {\\n  border-left-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip-right:after {\\n  border-right-color: #ECEFF1;\\n}\\n.apexcharts-yaxistooltip-right:before {\\n  border-right-color: #90A4AE;\\n}\\n.apexcharts-yaxistooltip-right.dark:after {\\n  border-right-color: rgba(0, 0, 0, 0.5);\\n}\\n.apexcharts-yaxistooltip-right.dark:before {\\n  border-right-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip.active {\\n  opacity: 1;\\n}\\n\\n.apexcharts-xcrosshairs, .apexcharts-ycrosshairs {\\n  pointer-events: none;\\n  opacity: 0;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-xcrosshairs.active, .apexcharts-ycrosshairs.active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-ycrosshairs-hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-zoom-rect {\\n  pointer-events: none;\\n}\\n.apexcharts-selection-rect {\\n  cursor: move;\\n}\\n\\n.svg_select_points, .svg_select_points_rot {\\n  opacity: 0;\\n  visibility: hidden;\\n}\\n.svg_select_points_l, .svg_select_points_r {\\n  cursor: ew-resize;\\n  opacity: 1;\\n  visibility: visible;\\n  fill: #888;\\n}\\n.apexcharts-canvas.zoomable .hovering-zoom {\\n  cursor: crosshair\\n}\\n.apexcharts-canvas.zoomable .hovering-pan {\\n  cursor: move\\n}\\n\\n.apexcharts-xaxis,\\n.apexcharts-yaxis {\\n  pointer-events: none;\\n}\\n\\n.apexcharts-zoom-icon, \\n.apexcharts-zoom-in-icon,\\n.apexcharts-zoom-out-icon,\\n.apexcharts-reset-zoom-icon, \\n.apexcharts-pan-icon, \\n.apexcharts-selection-icon,\\n.apexcharts-menu-icon, \\n.apexcharts-toolbar-custom-icon {\\n  cursor: pointer;\\n  width: 20px;\\n  height: 20px;\\n  line-height: 24px;\\n  color: #6E8192;\\n  text-align: center;\\n}\\n\\n\\n.apexcharts-zoom-icon svg, \\n.apexcharts-zoom-in-icon svg,\\n.apexcharts-zoom-out-icon svg,\\n.apexcharts-reset-zoom-icon svg,\\n.apexcharts-menu-icon svg {\\n  fill: #6E8192;\\n}\\n.apexcharts-selection-icon svg {\\n  fill: #444;\\n  transform: scale(0.76)\\n}\\n\\n.dark .apexcharts-zoom-icon svg, \\n.dark .apexcharts-zoom-in-icon svg,\\n.dark .apexcharts-zoom-out-icon svg,\\n.dark .apexcharts-reset-zoom-icon svg, \\n.dark .apexcharts-pan-icon svg, \\n.dark .apexcharts-selection-icon svg,\\n.dark .apexcharts-menu-icon svg, \\n.dark .apexcharts-toolbar-custom-icon svg{\\n  fill: #f3f4f5;\\n}\\n\\n.apexcharts-canvas .apexcharts-zoom-icon.selected svg, \\n.apexcharts-canvas .apexcharts-selection-icon.selected svg, \\n.apexcharts-canvas .apexcharts-reset-zoom-icon.selected svg {\\n  fill: #008FFB;\\n}\\n.light .apexcharts-selection-icon:not(.selected):hover svg,\\n.light .apexcharts-zoom-icon:not(.selected):hover svg, \\n.light .apexcharts-zoom-in-icon:hover svg, \\n.light .apexcharts-zoom-out-icon:hover svg, \\n.light .apexcharts-reset-zoom-icon:hover svg, \\n.light .apexcharts-menu-icon:hover svg {\\n  fill: #0e1726;\\n}\\n\\n.apexcharts-selection-icon, .apexcharts-menu-icon {\\n  position: relative;\\n}\\n.apexcharts-reset-zoom-icon {\\n  margin-left: 5px;\\n}\\n.apexcharts-zoom-icon, .apexcharts-reset-zoom-icon, .apexcharts-menu-icon {\\n  transform: scale(0.85);\\n}\\n\\n.apexcharts-zoom-in-icon, .apexcharts-zoom-out-icon {\\n  transform: scale(0.7)\\n}\\n\\n.apexcharts-zoom-out-icon {\\n  margin-right: 3px;\\n}\\n\\n.apexcharts-pan-icon {\\n  transform: scale(0.62);\\n  position: relative;\\n  left: 1px;\\n  top: 0px;\\n}\\n.apexcharts-pan-icon svg {\\n  fill: #fff;\\n  stroke: #6E8192;\\n  stroke-width: 2;\\n}\\n.apexcharts-pan-icon.selected svg {\\n  stroke: #008FFB;\\n}\\n.apexcharts-pan-icon:not(.selected):hover svg {\\n  stroke: #0e1726;\\n}\\n\\n.apexcharts-toolbar {\\n  position: absolute;\\n  z-index: 11;\\n  top: 0px;\\n  right: 3px;\\n  max-width: 176px;\\n  text-align: right;\\n  border-radius: 3px;\\n  padding: 0px 6px 2px 6px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center; \\n}\\n\\n.apexcharts-toolbar svg {\\n  pointer-events: none;\\n}\\n\\n.apexcharts-menu {\\n  background: #fff;\\n  position: absolute;\\n  top: 100%;\\n  border: 1px solid #ddd;\\n  border-radius: 3px;\\n  padding: 3px;\\n  right: 10px;\\n  opacity: 0;\\n  min-width: 110px;\\n  transition: 0.15s ease all;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-menu.open {\\n  opacity: 1;\\n  pointer-events: all;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-menu-item {\\n  padding: 6px 7px;\\n  font-size: 12px;\\n  cursor: pointer;\\n}\\n.light .apexcharts-menu-item:hover {\\n  background: #eee;\\n}\\n.dark .apexcharts-menu {\\n  background: rgba(0, 0, 0, 0.7);\\n  color: #fff;\\n}\\n\\n@media screen and (min-width: 768px) {\\n  .apexcharts-toolbar {\\n    /*opacity: 0;*/\\n  }\\n\\n  .apexcharts-canvas:hover .apexcharts-toolbar {\\n    opacity: 1;\\n  } \\n}\\n\\n.apexcharts-datalabel.hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-pie-label,\\n.apexcharts-datalabel, .apexcharts-datalabel-label, .apexcharts-datalabel-value {\\n  cursor: default;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-pie-label-delay {\\n  opacity: 0;\\n  animation-name: opaque;\\n  animation-duration: 0.3s;\\n  animation-fill-mode: forwards;\\n  animation-timing-function: ease;\\n}\\n\\n.apexcharts-canvas .hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-hide .apexcharts-series-points {\\n  opacity: 0;\\n}\\n\\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events, .apexcharts-radar-series path, .apexcharts-radar-series polygon {\\n  pointer-events: none;\\n}\\n\\n/* markers */\\n\\n.apexcharts-marker {\\n  transition: 0.15s ease all;\\n}\\n\\n@keyframes opaque {\\n  0% {\\n    opacity: 0;\\n  }\\n  100% {\\n    opacity: 1;\\n  }\\n}'), \"document\" in self && (\"classList\" in document.createElement(\"_\") && (!document.createElementNS || \"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")) || function (t) {\n    if (\"Element\" in t) {\n      var e = t.Element.prototype,\n          i = Object,\n          s = String.prototype.trim || function () {\n        return this.replace(/^\\s+|\\s+$/g, \"\");\n      },\n          a = Array.prototype.indexOf || function (t) {\n        for (var e = 0, i = this.length; e < i; e++) {\n          if (e in this && this[e] === t) return e;\n        }\n\n        return -1;\n      },\n          n = function n(t, e) {\n        this.name = t, this.code = DOMException[t], this.message = e;\n      },\n          r = function r(t, e) {\n        if (\"\" === e) throw new n(\"SYNTAX_ERR\", \"The token must not be empty.\");\n        if (/\\s/.test(e)) throw new n(\"INVALID_CHARACTER_ERR\", \"The token must not contain space characters.\");\n        return a.call(t, e);\n      },\n          o = function o(t) {\n        for (var e = s.call(t.getAttribute(\"class\") || \"\"), i = e ? e.split(/\\s+/) : [], a = 0, n = i.length; a < n; a++) {\n          this.push(i[a]);\n        }\n\n        this._updateClassName = function () {\n          t.setAttribute(\"class\", this.toString());\n        };\n      },\n          l = o.prototype = [],\n          h = function h() {\n        return new o(this);\n      };\n\n      if (n.prototype = Error.prototype, l.item = function (t) {\n        return this[t] || null;\n      }, l.contains = function (t) {\n        return ~r(this, t + \"\");\n      }, l.add = function () {\n        var t,\n            e = arguments,\n            i = 0,\n            s = e.length,\n            a = !1;\n\n        do {\n          t = e[i] + \"\", ~r(this, t) || (this.push(t), a = !0);\n        } while (++i < s);\n\n        a && this._updateClassName();\n      }, l.remove = function () {\n        var t,\n            e,\n            i = arguments,\n            s = 0,\n            a = i.length,\n            n = !1;\n\n        do {\n          for (t = i[s] + \"\", e = r(this, t); ~e;) {\n            this.splice(e, 1), n = !0, e = r(this, t);\n          }\n        } while (++s < a);\n\n        n && this._updateClassName();\n      }, l.toggle = function (t, e) {\n        var i = this.contains(t),\n            s = i ? !0 !== e && \"remove\" : !1 !== e && \"add\";\n        return s && this[s](t), !0 === e || !1 === e ? e : !i;\n      }, l.replace = function (t, e) {\n        var i = r(t + \"\");\n        ~i && (this.splice(i, 1, e), this._updateClassName());\n      }, l.toString = function () {\n        return this.join(\" \");\n      }, i.defineProperty) {\n        var c = {\n          get: h,\n          enumerable: !0,\n          configurable: !0\n        };\n\n        try {\n          i.defineProperty(e, \"classList\", c);\n        } catch (t) {\n          void 0 !== t.number && -2146823252 !== t.number || (c.enumerable = !1, i.defineProperty(e, \"classList\", c));\n        }\n      } else i.prototype.__defineGetter__ && e.__defineGetter__(\"classList\", h);\n    }\n  }(self), function () {\n    var t = document.createElement(\"_\");\n\n    if (t.classList.add(\"c1\", \"c2\"), !t.classList.contains(\"c2\")) {\n      var e = function e(t) {\n        var e = DOMTokenList.prototype[t];\n\n        DOMTokenList.prototype[t] = function (t) {\n          var i,\n              s = arguments.length;\n\n          for (i = 0; i < s; i++) {\n            t = arguments[i], e.call(this, t);\n          }\n        };\n      };\n\n      e(\"add\"), e(\"remove\");\n    }\n\n    if (t.classList.toggle(\"c3\", !1), t.classList.contains(\"c3\")) {\n      var i = DOMTokenList.prototype.toggle;\n\n      DOMTokenList.prototype.toggle = function (t, e) {\n        return 1 in arguments && !this.contains(t) == !e ? e : i.call(this, t);\n      };\n    }\n\n    \"replace\" in document.createElement(\"_\").classList || (DOMTokenList.prototype.replace = function (t, e) {\n      var i = this.toString().split(\" \"),\n          s = i.indexOf(t + \"\");\n      ~s && (i = i.slice(s), this.remove.apply(this, i), this.add(e), this.add.apply(this, i.slice(1)));\n    }), t = null;\n  }()), function () {\n    var t = !1;\n\n    function e(t) {\n      var e = t.__resizeTriggers__,\n          i = e.firstElementChild,\n          s = e.lastElementChild,\n          a = i.firstElementChild;\n      s.scrollLeft = s.scrollWidth, s.scrollTop = s.scrollHeight, a.style.width = i.offsetWidth + 1 + \"px\", a.style.height = i.offsetHeight + 1 + \"px\", i.scrollLeft = i.scrollWidth, i.scrollTop = i.scrollHeight;\n    }\n\n    function i(t) {\n      var i = this;\n      e(this), this.__resizeRAF__ && r(this.__resizeRAF__), this.__resizeRAF__ = n(function () {\n        (function (t) {\n          return t.offsetWidth != t.__resizeLast__.width || t.offsetHeight != t.__resizeLast__.height;\n        })(i) && (i.__resizeLast__.width = i.offsetWidth, i.__resizeLast__.height = i.offsetHeight, i.__resizeListeners__.forEach(function (e) {\n          e.call(t);\n        }));\n      });\n    }\n\n    var s,\n        a,\n        n = (s = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (t) {\n      return window.setTimeout(t, 20);\n    }, function (t) {\n      return s(t);\n    }),\n        r = (a = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout, function (t) {\n      return a(t);\n    }),\n        o = !1,\n        l = \"\",\n        h = \"animationstart\",\n        c = \"Webkit Moz O ms\".split(\" \"),\n        d = \"webkitAnimationStart animationstart oAnimationStart MSAnimationStart\".split(\" \"),\n        u = document.createElement(\"fakeelement\");\n    if (void 0 !== u.style.animationName && (o = !0), !1 === o) for (var g = 0; g < c.length; g++) {\n      if (void 0 !== u.style[c[g] + \"AnimationName\"]) {\n        l = \"-\" + c[g].toLowerCase() + \"-\", h = d[g];\n        break;\n      }\n    }\n    var f = \"@\" + l + \"keyframes resizeanim { from { opacity: 0; } to { opacity: 0; } } \",\n        p = l + \"animation: 1ms resizeanim; \";\n    window.addResizeListener = function (s, a) {\n      s.__resizeTriggers__ || (\"static\" == getComputedStyle(s).position && (s.style.position = \"relative\"), function () {\n        if (!t) {\n          var e = (f || \"\") + \".resize-triggers { \" + (p || \"\") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: \" \"; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',\n              i = document.head || document.getElementsByTagName(\"head\")[0],\n              s = document.createElement(\"style\");\n          s.type = \"text/css\", s.styleSheet ? s.styleSheet.cssText = e : s.appendChild(document.createTextNode(e)), i.appendChild(s), t = !0;\n        }\n      }(), s.__resizeLast__ = {}, s.__resizeListeners__ = [], (s.__resizeTriggers__ = document.createElement(\"div\")).className = \"resize-triggers\", s.__resizeTriggers__.innerHTML = '<div class=\"expand-trigger\"><div></div></div><div class=\"contract-trigger\"></div>', s.appendChild(s.__resizeTriggers__), e(s), s.addEventListener(\"scroll\", i, !0), h && s.__resizeTriggers__.addEventListener(h, function (t) {\n        \"resizeanim\" == t.animationName && e(s);\n      })), s.__resizeListeners__.push(a);\n    }, window.removeResizeListener = function (t, e) {\n      t && (t.__resizeListeners__.splice(t.__resizeListeners__.indexOf(e), 1), t.__resizeListeners__.length || (t.removeEventListener(\"scroll\", i), t.__resizeTriggers__ = !t.removeChild(t.__resizeTriggers__)));\n    };\n  }(), window.Apex = {}, function () {\n    function i(t, s) {\n      e(this, i), this.opts = s, this.ctx = this, this.w = new A(s).init(), this.el = t, this.w.globals.cuid = (Math.random() + 1).toString(36).substring(4), this.w.globals.chartID = this.w.config.chart.id ? this.w.config.chart.id : this.w.globals.cuid, this.initModules(), this.create = d.bind(this.create, this), this.windowResizeHandler = this.windowResize.bind(this);\n    }\n\n    return s(i, [{\n      key: \"render\",\n      value: function value() {\n        var t = this;\n        return new $(function (e, i) {\n          if (null !== t.el) {\n            void 0 === Apex._chartInstances && (Apex._chartInstances = []), t.w.config.chart.id && Apex._chartInstances.push({\n              id: t.w.globals.chartID,\n              group: t.w.config.chart.group,\n              chart: t\n            }), t.setLocale(t.w.config.chart.defaultLocale);\n            var s = t.w.config.chart.events.beforeMount;\n            \"function\" == typeof s && s(t, t.w), t.fireEvent(\"beforeMount\", [t, t.w]), window.addEventListener(\"resize\", t.windowResizeHandler), window.addResizeListener(t.el.parentNode, t.parentResizeCallback.bind(t));\n            var a = t.create(t.w.config.series, {});\n            if (!a) return e(t);\n            t.mount(a).then(function () {\n              e(a), \"function\" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.fireEvent(\"mounted\", [t, t.w]);\n            })[\"catch\"](function (t) {\n              i(t);\n            });\n          } else i(new Error(\"Element not found\"));\n        });\n      }\n    }, {\n      key: \"initModules\",\n      value: function value() {\n        this.animations = new g(this), this.core = new U(this.el, this), this.grid = new rt(this), this.coreUtils = new y(this), this.config = new w({}), this.crosshairs = new T(this), this.options = new x(), this.responsive = new lt(this), this.series = new G(this), this.theme = new ht(this), this.formatters = new N(this), this.titleSubtitle = new vt(this), this.legend = new ot(this), this.toolbar = new bt(this), this.dimensions = new _(this), this.zoomPanSelection = new mt(this), this.w.globals.tooltip = new xt(this);\n      }\n    }, {\n      key: \"addEventListener\",\n      value: function value(t, e) {\n        var i = this.w;\n        i.globals.events.hasOwnProperty(t) ? i.globals.events[t].push(e) : i.globals.events[t] = [e];\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        if (i.globals.events.hasOwnProperty(t)) {\n          var s = i.globals.events[t].indexOf(e);\n          -1 !== s && i.globals.events[t].splice(s, 1);\n        }\n      }\n    }, {\n      key: \"fireEvent\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        if (i.globals.events.hasOwnProperty(t)) {\n          e && e.length || (e = []);\n\n          for (var s = i.globals.events[t], a = s.length, n = 0; n < a; n++) {\n            s[n].apply(null, e);\n          }\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function value(t, e) {\n        var i = this.w;\n        this.initModules();\n        var s = this.w.globals;\n        if (s.noData = !1, s.animationEnded = !1, this.responsive.checkResponsiveConfig(e), null === this.el) return s.animationEnded = !0, null;\n        if (this.core.setupElements(), 0 === s.svgWidth) return s.animationEnded = !0, null;\n        var a = y.checkComboSeries(t);\n        s.comboCharts = a.comboCharts, s.comboChartsHasBars = a.comboChartsHasBars, (0 === t.length || 1 === t.length && t[0].data && 0 === t[0].data.length) && this.series.handleNoData(), this.setupEventHandlers(), this.core.parseData(t), this.theme.init(), new C(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), this.legend.init(), this.series.hasAllSeriesEqualX(), s.axisCharts && (this.core.coreCalculations(), \"category\" !== i.config.xaxis.type && this.formatters.setLabelFormatters()), this.formatters.heatmapLabelFormatters(), this.dimensions.plotCoords();\n        var n = this.core.xySettings();\n        this.grid.createGridMask();\n        var r = this.core.plotChartType(t, n);\n        this.core.shiftGraphPosition();\n        var o = {\n          plot: {\n            left: i.globals.translateX,\n            top: i.globals.translateY,\n            width: i.globals.gridWidth,\n            height: i.globals.gridHeight\n          }\n        };\n        return {\n          elGraph: r,\n          xyRatios: n,\n          elInner: i.globals.dom.elGraphical,\n          dimensions: o\n        };\n      }\n    }, {\n      key: \"mount\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n            e = this,\n            i = e.w;\n        return new $(function (s, a) {\n          if (null === e.el) return a(new Error(\"Not enough data to display or target element not found\"));\n          if ((null === t || i.globals.allSeriesCollapsed) && e.series.handleNoData(), e.annotations = new b(e), e.core.drawAxis(i.config.chart.type, t.xyRatios), e.grid = new rt(e), \"back\" === i.config.grid.position && e.grid.drawGrid(), \"back\" === i.config.annotations.position && e.annotations.drawAnnotations(), t.elGraph instanceof Array) for (var n = 0; n < t.elGraph.length; n++) {\n            i.globals.dom.elGraphical.add(t.elGraph[n]);\n          } else i.globals.dom.elGraphical.add(t.elGraph);\n\n          if (\"front\" === i.config.grid.position && e.grid.drawGrid(), \"front\" === i.config.xaxis.crosshairs.position && e.crosshairs.drawXCrosshairs(), \"front\" === i.config.yaxis[0].crosshairs.position && e.crosshairs.drawYCrosshairs(), \"front\" === i.config.annotations.position && e.annotations.drawAnnotations(), !i.globals.noData) {\n            if (i.config.tooltip.enabled && !i.globals.noData && e.w.globals.tooltip.drawTooltip(t.xyRatios), i.globals.axisCharts && i.globals.isXNumeric) (i.config.chart.zoom.enabled || i.config.chart.selection && i.config.chart.selection.enabled || i.config.chart.pan && i.config.chart.pan.enabled) && e.zoomPanSelection.init({\n              xyRatios: t.xyRatios\n            });else {\n              var r = i.config.chart.toolbar.tools;\n              r.zoom = !1, r.zoomin = !1, r.zoomout = !1, r.selection = !1, r.pan = !1, r.reset = !1;\n            }\n            i.config.chart.toolbar.show && !i.globals.allSeriesCollapsed && e.toolbar.createToolbar();\n          }\n\n          i.globals.memory.methodsToExec.length > 0 && i.globals.memory.methodsToExec.forEach(function (t) {\n            t.method(t.params, !1, t.context);\n          }), s(e);\n        });\n      }\n    }, {\n      key: \"clearPreviousPaths\",\n      value: function value() {\n        var t = this.w;\n        t.globals.previousPaths = [], t.globals.allSeriesCollapsed = !1, t.globals.collapsedSeries = [], t.globals.collapsedSeriesIndices = [];\n      }\n    }, {\n      key: \"updateOptions\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],\n            a = this.w;\n        return t.series && (t.series[0].data && (t.series = t.series.map(function (t, e) {\n          return n({}, a.config.series[e], {\n            name: t.name ? t.name : a.config.series[e] && a.config.series[e].name,\n            type: t.type ? t.type : a.config.series[e] && a.config.series[e].type,\n            data: t.data ? t.data : a.config.series[e] && a.config.series[e].data\n          });\n        })), this.revertDefaultAxisMinMax()), t.xaxis && ((t.xaxis.min || t.xaxis.max) && this.forceXAxisUpdate(t), t.xaxis.categories && t.xaxis.categories.length && a.config.xaxis.convertedCatToNumeric && (t = v.convertCatToNumeric(t))), a.globals.collapsedSeriesIndices.length > 0 && this.clearPreviousPaths(), t.theme && (t = this.theme.updateThemeOptions(t)), this._updateOptions(t, e, i, s);\n      }\n    }, {\n      key: \"_updateOptions\",\n      value: function value(e) {\n        var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            s = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n        this.getSyncedCharts().forEach(function (n) {\n          var r = n.w;\n          return r.globals.shouldAnimate = s, i || (r.globals.resized = !0, r.globals.dataChanged = !0, s && n.series.getPreviousPaths()), e && \"object\" === t(e) && (n.config = new w(e), e = y.extendArrayProps(n.config, e), r.config = d.extend(r.config, e), a && (r.globals.lastXAxis = [], r.globals.lastYAxis = [], r.globals.initialConfig = d.extend({}, r.config), r.globals.initialSeries = JSON.parse(JSON.stringify(r.config.series)))), n.update(e);\n        });\n      }\n    }, {\n      key: \"updateSeries\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n        return this.revertDefaultAxisMinMax(), this._updateSeries(t, e, i);\n      }\n    }, {\n      key: \"appendSeries\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            s = this.w.config.series.slice();\n        return s.push(t), this.revertDefaultAxisMinMax(), this._updateSeries(s, e, i);\n      }\n    }, {\n      key: \"_updateSeries\",\n      value: function value(t, e) {\n        var i,\n            s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n            a = this.w;\n        return this.w.globals.shouldAnimate = e, a.globals.dataChanged = !0, a.globals.allSeriesCollapsed && (a.globals.allSeriesCollapsed = !1), e && this.series.getPreviousPaths(), a.globals.axisCharts ? (0 === (i = t.map(function (t, e) {\n          return n({}, a.config.series[e], {\n            name: t.name ? t.name : a.config.series[e] && a.config.series[e].name,\n            type: t.type ? t.type : a.config.series[e] && a.config.series[e].type,\n            data: t.data ? t.data : a.config.series[e] && a.config.series[e].data\n          });\n        })).length && (i = [{\n          data: []\n        }]), a.config.series = i) : a.config.series = t.slice(), s && (a.globals.initialConfig.series = JSON.parse(JSON.stringify(a.config.series)), a.globals.initialSeries = JSON.parse(JSON.stringify(a.config.series))), this.update();\n      }\n    }, {\n      key: \"getSyncedCharts\",\n      value: function value() {\n        var t = this.getGroupedCharts(),\n            e = [this];\n        return t.length && (e = [], t.forEach(function (t) {\n          e.push(t);\n        })), e;\n      }\n    }, {\n      key: \"getGroupedCharts\",\n      value: function value() {\n        var t = this;\n        return Apex._chartInstances.filter(function (t) {\n          if (t.group) return !0;\n        }).map(function (e) {\n          return t.w.config.chart.group === e.group ? e.chart : t;\n        });\n      }\n    }, {\n      key: \"appendData\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = this;\n        i.w.globals.dataChanged = !0, i.series.getPreviousPaths();\n\n        for (var s = i.w.config.series.slice(), a = 0; a < s.length; a++) {\n          if (void 0 !== t[a]) for (var n = 0; n < t[a].data.length; n++) {\n            s[a].data.push(t[a].data[n]);\n          }\n        }\n\n        return i.w.config.series = s, e && (i.w.globals.initialSeries = JSON.parse(JSON.stringify(i.w.config.series))), this.update();\n      }\n    }, {\n      key: \"update\",\n      value: function value(t) {\n        var e = this;\n        return new $(function (i, s) {\n          e.clear();\n          var a = e.create(e.w.config.series, t);\n          if (!a) return i(e);\n          e.mount(a).then(function () {\n            \"function\" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.fireEvent(\"updated\", [e, e.w]), e.w.globals.isDirty = !0, i(e);\n          })[\"catch\"](function (t) {\n            s(t);\n          });\n        });\n      }\n    }, {\n      key: \"forceXAxisUpdate\",\n      value: function value(t) {\n        var e = this.w;\n        void 0 !== t.xaxis.min && (e.config.xaxis.min = t.xaxis.min, e.globals.lastXAxis.min = t.xaxis.min), void 0 !== t.xaxis.max && (e.config.xaxis.max = t.xaxis.max, e.globals.lastXAxis.max = t.xaxis.max);\n      }\n    }, {\n      key: \"revertDefaultAxisMinMax\",\n      value: function value() {\n        var t = this.w;\n        t.config.xaxis.min = t.globals.lastXAxis.min, t.config.xaxis.max = t.globals.lastXAxis.max, t.config.yaxis.map(function (e, i) {\n          t.globals.zoomed && void 0 !== t.globals.lastYAxis[i] && (e.min = t.globals.lastYAxis[i].min, e.max = t.globals.lastYAxis[i].max);\n        });\n      }\n    }, {\n      key: \"clear\",\n      value: function value() {\n        this.zoomPanSelection && this.zoomPanSelection.destroy(), this.toolbar && this.toolbar.destroy(), this.animations = null, this.annotations = null, this.core = null, this.grid = null, this.series = null, this.responsive = null, this.theme = null, this.formatters = null, this.titleSubtitle = null, this.legend = null, this.dimensions = null, this.options = null, this.crosshairs = null, this.zoomPanSelection = null, this.toolbar = null, this.w.globals.tooltip = null, this.clearDomElements();\n      }\n    }, {\n      key: \"killSVG\",\n      value: function value(t) {\n        return new $(function (e, i) {\n          t.each(function (t, e) {\n            this.removeClass(\"*\"), this.off(), this.stop();\n          }, !0), t.ungroup(), t.clear(), e(\"done\");\n        });\n      }\n    }, {\n      key: \"clearDomElements\",\n      value: function value() {\n        var t = this.w.globals.dom;\n        if (null !== this.el) for (; this.el.firstChild;) {\n          this.el.removeChild(this.el.firstChild);\n        }\n        this.killSVG(t.Paper), t.Paper.remove(), t.elWrap = null, t.elGraphical = null, t.elLegendWrap = null, t.baseEl = null, t.elGridRect = null, t.elGridRectMask = null, t.elGridRectMarkerMask = null, t.elDefs = null;\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        this.clear();\n        var t = this.w.config.chart.id;\n        t && Apex._chartInstances.forEach(function (e, i) {\n          e.id === t && Apex._chartInstances.splice(i, 1);\n        }), window.removeEventListener(\"resize\", this.windowResizeHandler), window.removeResizeListener(this.el.parentNode, this.parentResizeCallback.bind(this));\n      }\n    }, {\n      key: \"toggleSeries\",\n      value: function value(t) {\n        var e = this.series.getSeriesByName(t),\n            i = parseInt(e.getAttribute(\"data:realIndex\")),\n            s = e.classList.contains(\"apexcharts-series-collapsed\");\n        this.legend.toggleDataSeries(i, s);\n      }\n    }, {\n      key: \"resetToggleSeries\",\n      value: function value() {\n        this.legend.resetToggleDataSeries();\n      }\n    }, {\n      key: \"setupEventHandlers\",\n      value: function value() {\n        var t = this.w,\n            e = this,\n            i = t.globals.dom.baseEl.querySelector(t.globals.chartClass),\n            s = [\"mousedown\", \"mousemove\", \"touchstart\", \"touchmove\", \"mouseup\", \"touchend\"];\n        s.forEach(function (s) {\n          i.addEventListener(s, function (i) {\n            \"mousedown\" === i.type && 1 === i.which || (\"mouseup\" === i.type && 1 === i.which || \"touchend\" === i.type) && (\"function\" == typeof t.config.chart.events.click && t.config.chart.events.click(i, e, t), e.fireEvent(\"click\", [i, e, t]));\n          }, {\n            capture: !1,\n            passive: !0\n          });\n        }), s.forEach(function (e) {\n          document.addEventListener(e, function (e) {\n            t.globals.clientX = \"touchmove\" === e.type ? e.touches[0].clientX : e.clientX, t.globals.clientY = \"touchmove\" === e.type ? e.touches[0].clientY : e.clientY;\n          });\n        }), this.core.setupBrushHandler();\n      }\n    }, {\n      key: \"addXaxisAnnotation\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            s = this;\n        i && (s = i), s.annotations.addXaxisAnnotationExternal(t, e, s);\n      }\n    }, {\n      key: \"addYaxisAnnotation\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            s = this;\n        i && (s = i), s.annotations.addYaxisAnnotationExternal(t, e, s);\n      }\n    }, {\n      key: \"addPointAnnotation\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            s = this;\n        i && (s = i), s.annotations.addPointAnnotationExternal(t, e, s);\n      }\n    }, {\n      key: \"clearAnnotations\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0,\n            e = this;\n        t && (e = t), e.annotations.clearAnnotations(e);\n      }\n    }, {\n      key: \"addText\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            s = this;\n        i && (s = i), s.annotations.addText(t, e, s);\n      }\n    }, {\n      key: \"getChartArea\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner\");\n      }\n    }, {\n      key: \"getSeriesTotalXRange\",\n      value: function value(t, e) {\n        return this.coreUtils.getSeriesTotalsXRange(t, e);\n      }\n    }, {\n      key: \"getHighestValueInSeries\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n        return new V(this.ctx).getMinYMaxY(t).highestY;\n      }\n    }, {\n      key: \"getLowestValueInSeries\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n        return new V(this.ctx).getMinYMaxY(t).lowestY;\n      }\n    }, {\n      key: \"getSeriesTotal\",\n      value: function value() {\n        return this.w.globals.seriesTotals;\n      }\n    }, {\n      key: \"setLocale\",\n      value: function value(t) {\n        this.setCurrentLocaleValues(t);\n      }\n    }, {\n      key: \"setCurrentLocaleValues\",\n      value: function value(t) {\n        var e = this.w.config.chart.locales;\n        window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));\n        var i = e.filter(function (e) {\n          return e.name === t;\n        })[0];\n        if (!i) throw new Error(\"Wrong locale name provided. Please make sure you set the correct locale name in options\");\n        var s = d.extend(p, i);\n        this.w.globals.locale = s.options;\n      }\n    }, {\n      key: \"dataURI\",\n      value: function value() {\n        return new nt(this.ctx).dataURI();\n      }\n    }, {\n      key: \"paper\",\n      value: function value() {\n        return this.w.globals.dom.Paper;\n      }\n    }, {\n      key: \"parentResizeCallback\",\n      value: function value() {\n        this.w.globals.animationEnded && this.windowResize();\n      }\n    }, {\n      key: \"windowResize\",\n      value: function value() {\n        var t = this;\n        clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function () {\n          t.w.globals.resized = !0, t.w.globals.dataChanged = !1, t.update();\n        }, 150);\n      }\n    }], [{\n      key: \"initOnLoad\",\n      value: function value() {\n        for (var t = document.querySelectorAll(\"[data-apexcharts]\"), e = 0; e < t.length; e++) {\n          new i(t[e], JSON.parse(t[e].getAttribute(\"data-options\"))).render();\n        }\n      }\n    }, {\n      key: \"exec\",\n      value: function value(t, e) {\n        var i = this.getChartByID(t);\n\n        if (i) {\n          for (var s = arguments.length, a = new Array(s > 2 ? s - 2 : 0), n = 2; n < s; n++) {\n            a[n - 2] = arguments[n];\n          }\n\n          switch (e) {\n            case \"updateOptions\":\n              return i.updateOptions.apply(i, a);\n\n            case \"updateSeries\":\n              return i.updateSeries.apply(i, a);\n\n            case \"appendData\":\n              return i.appendData.apply(i, a);\n\n            case \"appendSeries\":\n              return i.appendSeries.apply(i, a);\n\n            case \"toggleSeries\":\n              return i.toggleSeries.apply(i, a);\n\n            case \"dataURI\":\n              return i.dataURI.apply(i, a);\n\n            case \"addXaxisAnnotation\":\n              return i.addXaxisAnnotation.apply(i, a);\n\n            case \"addYaxisAnnotation\":\n              return i.addYaxisAnnotation.apply(i, a);\n\n            case \"addPointAnnotation\":\n              return i.addPointAnnotation.apply(i, a);\n\n            case \"addText\":\n              return i.addText.apply(i, a);\n\n            case \"clearAnnotations\":\n              return i.clearAnnotations.apply(i, a);\n\n            case \"paper\":\n              return i.paper.apply(i, a);\n\n            case \"destroy\":\n              return i.destroy();\n          }\n        }\n      }\n    }, {\n      key: \"merge\",\n      value: function value(t, e) {\n        return d.extend(t, e);\n      }\n    }, {\n      key: \"getChartByID\",\n      value: function value(t) {\n        return Apex._chartInstances.filter(function (e) {\n          return e.id === t;\n        })[0].chart;\n      }\n    }]), i;\n  }();\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/apex/apexcharts.min.js\n");

/***/ }),

/***/ 4:
/*!********************************************************!*\
  !*** multi ./resources/plugins/apex/apexcharts.min.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\laragon\www\Solicitudes\resources\plugins\apex\apexcharts.min.js */"./resources/plugins/apex/apexcharts.min.js");


/***/ })

/******/ });